syntax = "proto3";

//
// THIS FILE WAS AUTOMATICALLY GENERATED -- DO NOT EDIT!!!
//
// 2023-05-31 - 00:26:00.650349200
//

package fix50sp2.proto;
option java_multiple_files = false;
option java_package = "garden_leave.fix50sp2.proto";
option java_outer_classname = "FIX50SP2Protos";
option optimize_for = LITE_RUNTIME;

import "google/protobuf/timestamp.proto";

message Header {
  message FieldPresence {
    bool begin_string = 1;
    bool body_length = 2;
    bool msg_type = 3;
    bool appl_ver_id = 4;
    bool appl_ext_id = 5;
    bool cstm_appl_ver_id = 6;
    bool sender_comp_id = 7;
    bool target_comp_id = 8;
    bool on_behalf_of_comp_id = 9;
    bool deliver_to_comp_id = 10;
    bool secure_data_len = 11;
    bool secure_data = 12;
    bool msg_seq_num = 13;
    bool sender_sub_id = 14;
    bool sender_location_id = 15;
    bool target_sub_id = 16;
    bool target_location_id = 17;
    bool on_behalf_of_sub_id = 18;
    bool on_behalf_of_location_id = 19;
    bool deliver_to_sub_id = 20;
    bool deliver_to_location_id = 21;
    bool poss_dup_flag = 22;
    bool poss_resend = 23;
    bool sending_time = 24;
    bool orig_sending_time = 25;
    bool xml_data_len = 26;
    bool xml_data = 27;
    bool message_encoding = 28;
    bool last_msg_seq_num_processed = 29;
  }

  // FIELDS
  FieldPresence field_presence = 1;
  string begin_string = 2;  // tag 8, name BeginString, type STRING
  int32 body_length = 3;  // tag 9, name BodyLength, type LENGTH
  string msg_type = 4;  // tag 35, name MsgType, type STRING
  string appl_ver_id = 5;  // tag 1128, name ApplVerID, type STRING
  int32 appl_ext_id = 6;  // tag 1156, name ApplExtID, type INT
  string cstm_appl_ver_id = 7;  // tag 1129, name CstmApplVerID, type STRING
  string sender_comp_id = 8;  // tag 49, name SenderCompID, type STRING
  string target_comp_id = 9;  // tag 56, name TargetCompID, type STRING
  string on_behalf_of_comp_id = 10;  // tag 115, name OnBehalfOfCompID, type STRING
  string deliver_to_comp_id = 11;  // tag 128, name DeliverToCompID, type STRING
  int32 secure_data_len = 12;  // tag 90, name SecureDataLen, type LENGTH
  string secure_data = 13;  // tag 91, name SecureData, type DATA
  int32 msg_seq_num = 14;  // tag 34, name MsgSeqNum, type SEQNUM
  string sender_sub_id = 15;  // tag 50, name SenderSubID, type STRING
  string sender_location_id = 16;  // tag 142, name SenderLocationID, type STRING
  string target_sub_id = 17;  // tag 57, name TargetSubID, type STRING
  string target_location_id = 18;  // tag 143, name TargetLocationID, type STRING
  string on_behalf_of_sub_id = 19;  // tag 116, name OnBehalfOfSubID, type STRING
  string on_behalf_of_location_id = 20;  // tag 144, name OnBehalfOfLocationID, type STRING
  string deliver_to_sub_id = 21;  // tag 129, name DeliverToSubID, type STRING
  string deliver_to_location_id = 22;  // tag 145, name DeliverToLocationID, type STRING
  bool poss_dup_flag = 23;  // tag 43, name PossDupFlag, type BOOLEAN
  bool poss_resend = 24;  // tag 97, name PossResend, type BOOLEAN
  uint64 sending_time = 25;  // tag 52, name SendingTime, type UTCTIMESTAMP
  uint64 orig_sending_time = 26;  // tag 122, name OrigSendingTime, type UTCTIMESTAMP
  int32 xml_data_len = 27;  // tag 212, name XmlDataLen, type LENGTH
  string xml_data = 28;  // tag 213, name XmlData, type DATA
  string message_encoding = 29;  // tag 347, name MessageEncoding, type STRING
  int32 last_msg_seq_num_processed = 30;  // tag 369, name LastMsgSeqNumProcessed, type SEQNUM
}

// MESSAGES
//
message QuoteResponse {
  message NoQuoteQualifiers {
    message FieldPresence {
      bool quote_qualifier = 1;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 quote_qualifier = 2;  // tag 695, name QuoteQualifier, type CHAR
  }

  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_time = 3;
      bool event_px = 4;
      bool event_text = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
    double event_px = 5;  // tag 867, name EventPx, type PRICE
    string event_text = 6;  // tag 868, name EventText, type STRING
  }

  message NoInstrumentParties {
    message NoInstrumentPartySubIds {
      message FieldPresence {
        bool instrument_party_sub_id = 1;
        bool instrument_party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
      int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
    }

    message FieldPresence {
      bool instrument_party_id = 1;
      bool instrument_party_id_source = 2;
      bool instrument_party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
    int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
    int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
  
  // GROUPS
    repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
  }

  message NoComplexEvents {
    message NoComplexEventDates {
      message NoComplexEventTimes {
        message FieldPresence {
          bool complex_event_start_time = 1;
          bool complex_event_end_time = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
        uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
      }

      message FieldPresence {
        bool complex_event_start_date = 1;
        bool complex_event_end_date = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
      uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
    
  // GROUPS
      repeated NoComplexEventTimes no_complex_event_times = 4;
    }

    message FieldPresence {
      bool complex_event_type = 1;
      bool complex_opt_payout_amount = 2;
      bool complex_event_price = 3;
      bool complex_event_price_boundary_method = 4;
      bool complex_event_price_boundary_precision = 5;
      bool complex_event_price_time_type = 6;
      bool complex_event_condition = 7;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
    double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
    double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
    int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
    double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
    int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
    int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
  
  // GROUPS
    repeated NoComplexEventDates no_complex_event_dates = 9;
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message NoUndlyInstrumentParties {
      message NoUndlyInstrumentPartySubIds {
        message FieldPresence {
          bool underlying_instrument_party_sub_id = 1;
          bool underlying_instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
        int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool underlying_instrument_party_id = 1;
        bool underlying_instrument_party_id_source = 2;
        bool underlying_instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
      int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
      int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_maturity_time = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_restructuring_type = 13;
      bool underlying_seniority = 14;
      bool underlying_notional_percentage_outstanding = 15;
      bool underlying_original_notional_percentage_outstanding = 16;
      bool underlying_attachment_point = 17;
      bool underlying_detachment_point = 18;
      bool underlying_issue_date = 19;
      bool underlying_repo_collateral_security_type = 20;
      bool underlying_repurchase_term = 21;
      bool underlying_repurchase_rate = 22;
      bool underlying_factor = 23;
      bool underlying_credit_rating = 24;
      bool underlying_instr_registry = 25;
      bool underlying_country_of_issue = 26;
      bool underlying_state_or_province_of_issue = 27;
      bool underlying_locale_of_issue = 28;
      bool underlying_redemption_date = 29;
      bool underlying_strike_price = 30;
      bool underlying_strike_currency = 31;
      bool underlying_opt_attribute = 32;
      bool underlying_contract_multiplier = 33;
      bool underlying_contract_multiplier_unit = 34;
      bool underlying_flow_schedule_type = 35;
      bool underlying_unit_of_measure = 36;
      bool underlying_unit_of_measure_qty = 37;
      bool underlying_price_unit_of_measure = 38;
      bool underlying_price_unit_of_measure_qty = 39;
      bool underlying_time_unit = 40;
      bool underlying_exercise_style = 41;
      bool underlying_coupon_rate = 42;
      bool underlying_security_exchange = 43;
      bool underlying_issuer = 44;
      bool encoded_underlying_issuer_len = 45;
      bool encoded_underlying_issuer = 46;
      bool underlying_security_desc = 47;
      bool encoded_underlying_security_desc_len = 48;
      bool encoded_underlying_security_desc = 49;
      bool underlying_cp_program = 50;
      bool underlying_cp_reg_type = 51;
      bool underlying_allocation_percent = 52;
      bool underlying_currency = 53;
      bool underlying_qty = 54;
      bool underlying_settlement_type = 55;
      bool underlying_cash_amount = 56;
      bool underlying_cash_type = 57;
      bool underlying_px = 58;
      bool underlying_dirty_price = 59;
      bool underlying_end_price = 60;
      bool underlying_start_value = 61;
      bool underlying_current_value = 62;
      bool underlying_end_value = 63;
      bool underlying_adjusted_quantity = 64;
      bool underlying_fx_rate = 65;
      bool underlying_fx_rate_calc = 66;
      bool underlying_cap_value = 67;
      bool underlying_settl_method = 68;
      bool underlying_put_or_call = 69;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
    string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
    double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
    double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
    string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
    int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
    string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
    double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
    string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
    double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
    string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
    int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
    double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
    double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
    string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
    int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
    double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
    string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
    double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
    double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
    double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
    int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
    double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
    string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
    int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
    repeated NoUnderlyingStips no_underlying_stips = 72;
    repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
  }

  message NoStipulations {
    message FieldPresence {
      bool stipulation_type = 1;
      bool stipulation_value = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
    string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
  }

  message NoLegs {
    message NoLegSecurityAltId {
      message FieldPresence {
        bool leg_security_alt_id = 1;
        bool leg_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
      string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
    }

    message NoLegStipulations {
      message FieldPresence {
        bool leg_stipulation_type = 1;
        bool leg_stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
      string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
    }

    message NoNestedPartyIds {
      message NoNestedPartySubIds {
        message FieldPresence {
          bool nested_party_sub_id = 1;
          bool nested_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
        int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
      }

      message FieldPresence {
        bool nested_party_id = 1;
        bool nested_party_id_source = 2;
        bool nested_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
      int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
      int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
    
  // GROUPS
      repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
    }

    message FieldPresence {
      bool leg_symbol = 1;
      bool leg_symbol_sfx = 2;
      bool leg_security_id = 3;
      bool leg_security_id_source = 4;
      bool leg_product = 5;
      bool leg_cfi_code = 6;
      bool leg_security_type = 7;
      bool leg_security_sub_type = 8;
      bool leg_maturity_month_year = 9;
      bool leg_maturity_date = 10;
      bool leg_maturity_time = 11;
      bool leg_coupon_payment_date = 12;
      bool leg_issue_date = 13;
      bool leg_repo_collateral_security_type = 14;
      bool leg_repurchase_term = 15;
      bool leg_repurchase_rate = 16;
      bool leg_factor = 17;
      bool leg_credit_rating = 18;
      bool leg_instr_registry = 19;
      bool leg_country_of_issue = 20;
      bool leg_state_or_province_of_issue = 21;
      bool leg_locale_of_issue = 22;
      bool leg_redemption_date = 23;
      bool leg_strike_price = 24;
      bool leg_strike_currency = 25;
      bool leg_opt_attribute = 26;
      bool leg_contract_multiplier = 27;
      bool leg_contract_multiplier_unit = 28;
      bool leg_flow_schedule_type = 29;
      bool leg_unit_of_measure = 30;
      bool leg_unit_of_measure_qty = 31;
      bool leg_price_unit_of_measure = 32;
      bool leg_price_unit_of_measure_qty = 33;
      bool leg_time_unit = 34;
      bool leg_exercise_style = 35;
      bool leg_coupon_rate = 36;
      bool leg_security_exchange = 37;
      bool leg_issuer = 38;
      bool encoded_leg_issuer_len = 39;
      bool encoded_leg_issuer = 40;
      bool leg_security_desc = 41;
      bool encoded_leg_security_desc_len = 42;
      bool encoded_leg_security_desc = 43;
      bool leg_ratio_qty = 44;
      bool leg_side = 45;
      bool leg_currency = 46;
      bool leg_pool = 47;
      bool leg_dated_date = 48;
      bool leg_contract_settl_month = 49;
      bool leg_interest_accrual_date = 50;
      bool leg_put_or_call = 51;
      bool leg_option_ratio = 52;
      bool leg_price = 53;
      bool leg_qty = 54;
      bool leg_order_qty = 55;
      bool leg_swap_type = 56;
      bool leg_settl_type = 57;
      bool leg_settl_date = 58;
      bool leg_price_type = 59;
      bool leg_bid_px = 60;
      bool leg_offer_px = 61;
      bool leg_benchmark_curve_currency = 62;
      bool leg_benchmark_curve_name = 63;
      bool leg_benchmark_curve_point = 64;
      bool leg_benchmark_price = 65;
      bool leg_benchmark_price_type = 66;
      bool leg_ref_id = 67;
      bool leg_bid_forward_points = 68;
      bool leg_offer_forward_points = 69;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
    string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
    string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
    string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
    int32 leg_product = 6;  // tag 607, name LegProduct, type INT
    string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
    string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
    string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
    string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
    string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
    string leg_maturity_time = 12;  // tag 1212, name LegMaturityTime, type TZTIMEONLY
    string leg_coupon_payment_date = 13;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
    string leg_issue_date = 14;  // tag 249, name LegIssueDate, type LOCALMKTDATE
    string leg_repo_collateral_security_type = 15;  // tag 250, name LegRepoCollateralSecurityType, type STRING
    int32 leg_repurchase_term = 16;  // tag 251, name LegRepurchaseTerm, type INT
    double leg_repurchase_rate = 17;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
    double leg_factor = 18;  // tag 253, name LegFactor, type FLOAT
    string leg_credit_rating = 19;  // tag 257, name LegCreditRating, type STRING
    string leg_instr_registry = 20;  // tag 599, name LegInstrRegistry, type STRING
    string leg_country_of_issue = 21;  // tag 596, name LegCountryOfIssue, type COUNTRY
    string leg_state_or_province_of_issue = 22;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
    string leg_locale_of_issue = 23;  // tag 598, name LegLocaleOfIssue, type STRING
    string leg_redemption_date = 24;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
    double leg_strike_price = 25;  // tag 612, name LegStrikePrice, type PRICE
    string leg_strike_currency = 26;  // tag 942, name LegStrikeCurrency, type CURRENCY
    int32 leg_opt_attribute = 27;  // tag 613, name LegOptAttribute, type CHAR
    double leg_contract_multiplier = 28;  // tag 614, name LegContractMultiplier, type FLOAT
    int32 leg_contract_multiplier_unit = 29;  // tag 1436, name LegContractMultiplierUnit, type INT
    int32 leg_flow_schedule_type = 30;  // tag 1440, name LegFlowScheduleType, type INT
    string leg_unit_of_measure = 31;  // tag 999, name LegUnitOfMeasure, type STRING
    double leg_unit_of_measure_qty = 32;  // tag 1224, name LegUnitOfMeasureQty, type QTY
    string leg_price_unit_of_measure = 33;  // tag 1421, name LegPriceUnitOfMeasure, type STRING
    double leg_price_unit_of_measure_qty = 34;  // tag 1422, name LegPriceUnitOfMeasureQty, type QTY
    string leg_time_unit = 35;  // tag 1001, name LegTimeUnit, type STRING
    int32 leg_exercise_style = 36;  // tag 1420, name LegExerciseStyle, type INT
    double leg_coupon_rate = 37;  // tag 615, name LegCouponRate, type PERCENTAGE
    string leg_security_exchange = 38;  // tag 616, name LegSecurityExchange, type EXCHANGE
    string leg_issuer = 39;  // tag 617, name LegIssuer, type STRING
    int32 encoded_leg_issuer_len = 40;  // tag 618, name EncodedLegIssuerLen, type LENGTH
    string encoded_leg_issuer = 41;  // tag 619, name EncodedLegIssuer, type DATA
    string leg_security_desc = 42;  // tag 620, name LegSecurityDesc, type STRING
    int32 encoded_leg_security_desc_len = 43;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
    string encoded_leg_security_desc = 44;  // tag 622, name EncodedLegSecurityDesc, type DATA
    double leg_ratio_qty = 45;  // tag 623, name LegRatioQty, type FLOAT
    int32 leg_side = 46;  // tag 624, name LegSide, type CHAR
    string leg_currency = 47;  // tag 556, name LegCurrency, type CURRENCY
    string leg_pool = 48;  // tag 740, name LegPool, type STRING
    string leg_dated_date = 49;  // tag 739, name LegDatedDate, type LOCALMKTDATE
    string leg_contract_settl_month = 50;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
    string leg_interest_accrual_date = 51;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
    int32 leg_put_or_call = 52;  // tag 1358, name LegPutOrCall, type INT
    double leg_option_ratio = 53;  // tag 1017, name LegOptionRatio, type FLOAT
    double leg_price = 54;  // tag 566, name LegPrice, type PRICE
    double leg_qty = 55;  // tag 687, name LegQty, type QTY
    double leg_order_qty = 56;  // tag 685, name LegOrderQty, type QTY
    int32 leg_swap_type = 57;  // tag 690, name LegSwapType, type INT
    int32 leg_settl_type = 58;  // tag 587, name LegSettlType, type CHAR
    string leg_settl_date = 59;  // tag 588, name LegSettlDate, type LOCALMKTDATE
    int32 leg_price_type = 60;  // tag 686, name LegPriceType, type INT
    double leg_bid_px = 61;  // tag 681, name LegBidPx, type PRICE
    double leg_offer_px = 62;  // tag 684, name LegOfferPx, type PRICE
    string leg_benchmark_curve_currency = 63;  // tag 676, name LegBenchmarkCurveCurrency, type CURRENCY
    string leg_benchmark_curve_name = 64;  // tag 677, name LegBenchmarkCurveName, type STRING
    string leg_benchmark_curve_point = 65;  // tag 678, name LegBenchmarkCurvePoint, type STRING
    double leg_benchmark_price = 66;  // tag 679, name LegBenchmarkPrice, type PRICE
    int32 leg_benchmark_price_type = 67;  // tag 680, name LegBenchmarkPriceType, type INT
    string leg_ref_id = 68;  // tag 654, name LegRefID, type STRING
    double leg_bid_forward_points = 69;  // tag 1067, name LegBidForwardPoints, type PRICEOFFSET
    double leg_offer_forward_points = 70;  // tag 1068, name LegOfferForwardPoints, type PRICEOFFSET
  
  // GROUPS
    repeated NoLegSecurityAltId no_leg_security_alt_id = 71;
    repeated NoLegStipulations no_leg_stipulations = 72;
    repeated NoNestedPartyIds no_nested_party_ids = 73;
  }

  message FieldPresence {
    bool quote_resp_id = 1;
    bool quote_id = 2;
    bool quote_msg_id = 3;
    bool quote_resp_type = 4;
    bool cl_ord_id = 5;
    bool order_capacity = 6;
    bool order_restrictions = 7;
    bool ioi_id = 8;
    bool quote_type = 9;
    bool pre_trade_anonymity = 10;
    bool trading_session_id = 11;
    bool trading_session_sub_id = 12;
    bool symbol = 13;
    bool symbol_sfx = 14;
    bool security_id = 15;
    bool security_id_source = 16;
    bool product = 17;
    bool product_complex = 18;
    bool security_group = 19;
    bool cfi_code = 20;
    bool security_type = 21;
    bool security_sub_type = 22;
    bool maturity_month_year = 23;
    bool maturity_date = 24;
    bool maturity_time = 25;
    bool settle_on_open_flag = 26;
    bool instrmt_assignment_method = 27;
    bool security_status = 28;
    bool coupon_payment_date = 29;
    bool restructuring_type = 30;
    bool seniority = 31;
    bool notional_percentage_outstanding = 32;
    bool original_notional_percentage_outstanding = 33;
    bool attachment_point = 34;
    bool detachment_point = 35;
    bool issue_date = 36;
    bool repo_collateral_security_type = 37;
    bool repurchase_term = 38;
    bool repurchase_rate = 39;
    bool factor = 40;
    bool credit_rating = 41;
    bool instr_registry = 42;
    bool country_of_issue = 43;
    bool state_or_province_of_issue = 44;
    bool locale_of_issue = 45;
    bool redemption_date = 46;
    bool strike_price = 47;
    bool strike_currency = 48;
    bool strike_multiplier = 49;
    bool strike_value = 50;
    bool strike_price_determination_method = 51;
    bool strike_price_boundary_method = 52;
    bool strike_price_boundary_precision = 53;
    bool underlying_price_determination_method = 54;
    bool opt_attribute = 55;
    bool contract_multiplier = 56;
    bool contract_multiplier_unit = 57;
    bool flow_schedule_type = 58;
    bool min_price_increment = 59;
    bool min_price_increment_amount = 60;
    bool unit_of_measure = 61;
    bool unit_of_measure_qty = 62;
    bool price_unit_of_measure = 63;
    bool price_unit_of_measure_qty = 64;
    bool settl_method = 65;
    bool exercise_style = 66;
    bool opt_payout_type = 67;
    bool opt_payout_amount = 68;
    bool price_quote_method = 69;
    bool valuation_method = 70;
    bool list_method = 71;
    bool cap_price = 72;
    bool floor_price = 73;
    bool put_or_call = 74;
    bool flexible_indicator = 75;
    bool flex_product_eligibility_indicator = 76;
    bool time_unit = 77;
    bool coupon_rate = 78;
    bool security_exchange = 79;
    bool position_limit = 80;
    bool nt_position_limit = 81;
    bool issuer = 82;
    bool encoded_issuer_len = 83;
    bool encoded_issuer = 84;
    bool security_desc = 85;
    bool encoded_security_desc_len = 86;
    bool encoded_security_desc = 87;
    bool security_xml_len = 88;
    bool security_xml_data = 89;
    bool security_xml_schema = 90;
    bool pool = 91;
    bool contract_settl_month = 92;
    bool cp_program = 93;
    bool cp_reg_type = 94;
    bool dated_date = 95;
    bool interest_accrual_date = 96;
    bool agreement_desc = 97;
    bool agreement_id = 98;
    bool agreement_date = 99;
    bool agreement_currency = 100;
    bool termination_type = 101;
    bool start_date = 102;
    bool end_date = 103;
    bool delivery_type = 104;
    bool margin_ratio = 105;
    bool side = 106;
    bool order_qty = 107;
    bool cash_order_qty = 108;
    bool order_percent = 109;
    bool rounding_direction = 110;
    bool rounding_modulus = 111;
    bool min_qty = 112;
    bool settl_type = 113;
    bool settl_date = 114;
    bool settl_date2 = 115;
    bool order_qty2 = 116;
    bool currency = 117;
    bool account = 118;
    bool acct_id_source = 119;
    bool account_type = 120;
    bool bid_px = 121;
    bool offer_px = 122;
    bool mkt_bid_px = 123;
    bool mkt_offer_px = 124;
    bool min_bid_size = 125;
    bool bid_size = 126;
    bool min_offer_size = 127;
    bool offer_size = 128;
    bool valid_until_time = 129;
    bool bid_spot_rate = 130;
    bool offer_spot_rate = 131;
    bool bid_forward_points = 132;
    bool offer_forward_points = 133;
    bool mid_px = 134;
    bool bid_yield = 135;
    bool mid_yield = 136;
    bool offer_yield = 137;
    bool transact_time = 138;
    bool ord_type = 139;
    bool bid_forward_points2 = 140;
    bool offer_forward_points2 = 141;
    bool settl_curr_bid_fx_rate = 142;
    bool settl_curr_offer_fx_rate = 143;
    bool settl_curr_fx_rate_calc = 144;
    bool commission = 145;
    bool comm_type = 146;
    bool cust_order_capacity = 147;
    bool ex_destination = 148;
    bool ex_destination_id_source = 149;
    bool text = 150;
    bool encoded_text_len = 151;
    bool encoded_text = 152;
    bool price = 153;
    bool price_type = 154;
    bool spread = 155;
    bool benchmark_curve_currency = 156;
    bool benchmark_curve_name = 157;
    bool benchmark_curve_point = 158;
    bool benchmark_price = 159;
    bool benchmark_price_type = 160;
    bool benchmark_security_id = 161;
    bool benchmark_security_id_source = 162;
    bool yield_type = 163;
    bool yield = 164;
    bool yield_calc_date = 165;
    bool yield_redemption_date = 166;
    bool yield_redemption_price = 167;
    bool yield_redemption_price_type = 168;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string quote_resp_id = 5;  // tag 693, name QuoteRespID, type STRING
  string quote_id = 6;  // tag 117, name QuoteID, type STRING
  string quote_msg_id = 7;  // tag 1166, name QuoteMsgID, type STRING
  int32 quote_resp_type = 8;  // tag 694, name QuoteRespType, type INT
  string cl_ord_id = 9;  // tag 11, name ClOrdID, type STRING
  int32 order_capacity = 10;  // tag 528, name OrderCapacity, type CHAR
  string order_restrictions = 11;  // tag 529, name OrderRestrictions, type MULTIPLECHARVALUE
  string ioi_id = 12;  // tag 23, name IOIID, type STRING
  int32 quote_type = 13;  // tag 537, name QuoteType, type INT
  bool pre_trade_anonymity = 14;  // tag 1091, name PreTradeAnonymity, type BOOLEAN
  string trading_session_id = 15;  // tag 336, name TradingSessionID, type STRING
  string trading_session_sub_id = 16;  // tag 625, name TradingSessionSubID, type STRING
  string symbol = 17;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 18;  // tag 65, name SymbolSfx, type STRING
  string security_id = 19;  // tag 48, name SecurityID, type STRING
  string security_id_source = 20;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 21;  // tag 460, name Product, type INT
  string product_complex = 22;  // tag 1227, name ProductComplex, type STRING
  string security_group = 23;  // tag 1151, name SecurityGroup, type STRING
  string cfi_code = 24;  // tag 461, name CFICode, type STRING
  string security_type = 25;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 26;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 27;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 28;  // tag 541, name MaturityDate, type LOCALMKTDATE
  string maturity_time = 29;  // tag 1079, name MaturityTime, type TZTIMEONLY
  string settle_on_open_flag = 30;  // tag 966, name SettleOnOpenFlag, type STRING
  int32 instrmt_assignment_method = 31;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
  string security_status = 32;  // tag 965, name SecurityStatus, type STRING
  string coupon_payment_date = 33;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string restructuring_type = 34;  // tag 1449, name RestructuringType, type STRING
  string seniority = 35;  // tag 1450, name Seniority, type STRING
  double notional_percentage_outstanding = 36;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
  double original_notional_percentage_outstanding = 37;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
  double attachment_point = 38;  // tag 1457, name AttachmentPoint, type PERCENTAGE
  double detachment_point = 39;  // tag 1458, name DetachmentPoint, type PERCENTAGE
  string issue_date = 40;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 41;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 42;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 43;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 44;  // tag 228, name Factor, type FLOAT
  string credit_rating = 45;  // tag 255, name CreditRating, type STRING
  string instr_registry = 46;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 47;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 48;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 49;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 50;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 51;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 52;  // tag 947, name StrikeCurrency, type CURRENCY
  double strike_multiplier = 53;  // tag 967, name StrikeMultiplier, type FLOAT
  double strike_value = 54;  // tag 968, name StrikeValue, type FLOAT
  int32 strike_price_determination_method = 55;  // tag 1478, name StrikePriceDeterminationMethod, type INT
  int32 strike_price_boundary_method = 56;  // tag 1479, name StrikePriceBoundaryMethod, type INT
  double strike_price_boundary_precision = 57;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
  int32 underlying_price_determination_method = 58;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
  int32 opt_attribute = 59;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 60;  // tag 231, name ContractMultiplier, type FLOAT
  int32 contract_multiplier_unit = 61;  // tag 1435, name ContractMultiplierUnit, type INT
  int32 flow_schedule_type = 62;  // tag 1439, name FlowScheduleType, type INT
  double min_price_increment = 63;  // tag 969, name MinPriceIncrement, type FLOAT
  double min_price_increment_amount = 64;  // tag 1146, name MinPriceIncrementAmount, type AMT
  string unit_of_measure = 65;  // tag 996, name UnitOfMeasure, type STRING
  double unit_of_measure_qty = 66;  // tag 1147, name UnitOfMeasureQty, type QTY
  string price_unit_of_measure = 67;  // tag 1191, name PriceUnitOfMeasure, type STRING
  double price_unit_of_measure_qty = 68;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
  int32 settl_method = 69;  // tag 1193, name SettlMethod, type CHAR
  int32 exercise_style = 70;  // tag 1194, name ExerciseStyle, type INT
  int32 opt_payout_type = 71;  // tag 1482, name OptPayoutType, type INT
  double opt_payout_amount = 72;  // tag 1195, name OptPayoutAmount, type AMT
  string price_quote_method = 73;  // tag 1196, name PriceQuoteMethod, type STRING
  string valuation_method = 74;  // tag 1197, name ValuationMethod, type STRING
  int32 list_method = 75;  // tag 1198, name ListMethod, type INT
  double cap_price = 76;  // tag 1199, name CapPrice, type PRICE
  double floor_price = 77;  // tag 1200, name FloorPrice, type PRICE
  int32 put_or_call = 78;  // tag 201, name PutOrCall, type INT
  bool flexible_indicator = 79;  // tag 1244, name FlexibleIndicator, type BOOLEAN
  bool flex_product_eligibility_indicator = 80;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
  string time_unit = 81;  // tag 997, name TimeUnit, type STRING
  double coupon_rate = 82;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 83;  // tag 207, name SecurityExchange, type EXCHANGE
  int32 position_limit = 84;  // tag 970, name PositionLimit, type INT
  int32 nt_position_limit = 85;  // tag 971, name NTPositionLimit, type INT
  string issuer = 86;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 87;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 88;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 89;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 90;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 91;  // tag 351, name EncodedSecurityDesc, type DATA
  int32 security_xml_len = 92;  // tag 1184, name SecurityXMLLen, type LENGTH
  string security_xml_data = 93;  // tag 1185, name SecurityXMLData, type XMLDATA
  string security_xml_schema = 94;  // tag 1186, name SecurityXMLSchema, type STRING
  string pool = 95;  // tag 691, name Pool, type STRING
  string contract_settl_month = 96;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 97;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 98;  // tag 876, name CPRegType, type STRING
  string dated_date = 99;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 100;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 101;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 102;  // tag 914, name AgreementID, type STRING
  string agreement_date = 103;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 104;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 105;  // tag 788, name TerminationType, type INT
  string start_date = 106;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 107;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 108;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 109;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 110;  // tag 54, name Side, type CHAR
  double order_qty = 111;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 112;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 113;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 114;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 115;  // tag 469, name RoundingModulus, type FLOAT
  double min_qty = 116;  // tag 110, name MinQty, type QTY
  string settl_type = 117;  // tag 63, name SettlType, type STRING
  string settl_date = 118;  // tag 64, name SettlDate, type LOCALMKTDATE
  string settl_date2 = 119;  // tag 193, name SettlDate2, type LOCALMKTDATE
  double order_qty2 = 120;  // tag 192, name OrderQty2, type QTY
  string currency = 121;  // tag 15, name Currency, type CURRENCY
  string account = 122;  // tag 1, name Account, type STRING
  int32 acct_id_source = 123;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 124;  // tag 581, name AccountType, type INT
  double bid_px = 125;  // tag 132, name BidPx, type PRICE
  double offer_px = 126;  // tag 133, name OfferPx, type PRICE
  double mkt_bid_px = 127;  // tag 645, name MktBidPx, type PRICE
  double mkt_offer_px = 128;  // tag 646, name MktOfferPx, type PRICE
  double min_bid_size = 129;  // tag 647, name MinBidSize, type QTY
  double bid_size = 130;  // tag 134, name BidSize, type QTY
  double min_offer_size = 131;  // tag 648, name MinOfferSize, type QTY
  double offer_size = 132;  // tag 135, name OfferSize, type QTY
  uint64 valid_until_time = 133;  // tag 62, name ValidUntilTime, type UTCTIMESTAMP
  double bid_spot_rate = 134;  // tag 188, name BidSpotRate, type PRICE
  double offer_spot_rate = 135;  // tag 190, name OfferSpotRate, type PRICE
  double bid_forward_points = 136;  // tag 189, name BidForwardPoints, type PRICEOFFSET
  double offer_forward_points = 137;  // tag 191, name OfferForwardPoints, type PRICEOFFSET
  double mid_px = 138;  // tag 631, name MidPx, type PRICE
  double bid_yield = 139;  // tag 632, name BidYield, type PERCENTAGE
  double mid_yield = 140;  // tag 633, name MidYield, type PERCENTAGE
  double offer_yield = 141;  // tag 634, name OfferYield, type PERCENTAGE
  uint64 transact_time = 142;  // tag 60, name TransactTime, type UTCTIMESTAMP
  int32 ord_type = 143;  // tag 40, name OrdType, type CHAR
  double bid_forward_points2 = 144;  // tag 642, name BidForwardPoints2, type PRICEOFFSET
  double offer_forward_points2 = 145;  // tag 643, name OfferForwardPoints2, type PRICEOFFSET
  double settl_curr_bid_fx_rate = 146;  // tag 656, name SettlCurrBidFxRate, type FLOAT
  double settl_curr_offer_fx_rate = 147;  // tag 657, name SettlCurrOfferFxRate, type FLOAT
  int32 settl_curr_fx_rate_calc = 148;  // tag 156, name SettlCurrFxRateCalc, type CHAR
  double commission = 149;  // tag 12, name Commission, type AMT
  int32 comm_type = 150;  // tag 13, name CommType, type CHAR
  int32 cust_order_capacity = 151;  // tag 582, name CustOrderCapacity, type INT
  string ex_destination = 152;  // tag 100, name ExDestination, type EXCHANGE
  int32 ex_destination_id_source = 153;  // tag 1133, name ExDestinationIDSource, type CHAR
  string text = 154;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 155;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 156;  // tag 355, name EncodedText, type DATA
  double price = 157;  // tag 44, name Price, type PRICE
  int32 price_type = 158;  // tag 423, name PriceType, type INT
  double spread = 159;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 160;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 161;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 162;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 163;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 164;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 165;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 166;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 167;  // tag 235, name YieldType, type STRING
  double yield = 168;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 169;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 170;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 171;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 172;  // tag 698, name YieldRedemptionPriceType, type INT

  // GROUPS
  repeated NoQuoteQualifiers no_quote_qualifiers = 173;
  repeated NoPartyIds no_party_ids = 174;
  repeated NoSecurityAltId no_security_alt_id = 175;
  repeated NoEvents no_events = 176;
  repeated NoInstrumentParties no_instrument_parties = 177;
  repeated NoComplexEvents no_complex_events = 178;
  repeated NoUnderlyings no_underlyings = 179;
  repeated NoStipulations no_stipulations = 180;
  repeated NoLegs no_legs = 181;
}

message MarketDataIncrementalRefresh {
  message NoMdEntries {
    message NoSecurityAltId {
      message FieldPresence {
        bool security_alt_id = 1;
        bool security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
      string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
    }

    message NoEvents {
      message FieldPresence {
        bool event_type = 1;
        bool event_date = 2;
        bool event_time = 3;
        bool event_px = 4;
        bool event_text = 5;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 event_type = 2;  // tag 865, name EventType, type INT
      string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
      uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
      double event_px = 5;  // tag 867, name EventPx, type PRICE
      string event_text = 6;  // tag 868, name EventText, type STRING
    }

    message NoInstrumentParties {
      message NoInstrumentPartySubIds {
        message FieldPresence {
          bool instrument_party_sub_id = 1;
          bool instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
        int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool instrument_party_id = 1;
        bool instrument_party_id_source = 2;
        bool instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
      int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
      int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
    }

    message NoComplexEvents {
      message NoComplexEventDates {
        message NoComplexEventTimes {
          message FieldPresence {
            bool complex_event_start_time = 1;
            bool complex_event_end_time = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
          uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
        }

        message FieldPresence {
          bool complex_event_start_date = 1;
          bool complex_event_end_date = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
        uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
      
  // GROUPS
        repeated NoComplexEventTimes no_complex_event_times = 4;
      }

      message FieldPresence {
        bool complex_event_type = 1;
        bool complex_opt_payout_amount = 2;
        bool complex_event_price = 3;
        bool complex_event_price_boundary_method = 4;
        bool complex_event_price_boundary_precision = 5;
        bool complex_event_price_time_type = 6;
        bool complex_event_condition = 7;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
      double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
      double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
      int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
      double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
      int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
      int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
    
  // GROUPS
      repeated NoComplexEventDates no_complex_event_dates = 9;
    }

    message NoUnderlyings {
      message NoUnderlyingSecurityAltId {
        message FieldPresence {
          bool underlying_security_alt_id = 1;
          bool underlying_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
        string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
      }

      message NoUnderlyingStips {
        message FieldPresence {
          bool underlying_stip_type = 1;
          bool underlying_stip_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
        string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
      }

      message NoUndlyInstrumentParties {
        message NoUndlyInstrumentPartySubIds {
          message FieldPresence {
            bool underlying_instrument_party_sub_id = 1;
            bool underlying_instrument_party_sub_id_type = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
          int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
        }

        message FieldPresence {
          bool underlying_instrument_party_id = 1;
          bool underlying_instrument_party_id_source = 2;
          bool underlying_instrument_party_role = 3;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
        int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
        int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
      
  // GROUPS
        repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
      }

      message FieldPresence {
        bool underlying_symbol = 1;
        bool underlying_symbol_sfx = 2;
        bool underlying_security_id = 3;
        bool underlying_security_id_source = 4;
        bool underlying_product = 5;
        bool underlying_cfi_code = 6;
        bool underlying_security_type = 7;
        bool underlying_security_sub_type = 8;
        bool underlying_maturity_month_year = 9;
        bool underlying_maturity_date = 10;
        bool underlying_maturity_time = 11;
        bool underlying_coupon_payment_date = 12;
        bool underlying_restructuring_type = 13;
        bool underlying_seniority = 14;
        bool underlying_notional_percentage_outstanding = 15;
        bool underlying_original_notional_percentage_outstanding = 16;
        bool underlying_attachment_point = 17;
        bool underlying_detachment_point = 18;
        bool underlying_issue_date = 19;
        bool underlying_repo_collateral_security_type = 20;
        bool underlying_repurchase_term = 21;
        bool underlying_repurchase_rate = 22;
        bool underlying_factor = 23;
        bool underlying_credit_rating = 24;
        bool underlying_instr_registry = 25;
        bool underlying_country_of_issue = 26;
        bool underlying_state_or_province_of_issue = 27;
        bool underlying_locale_of_issue = 28;
        bool underlying_redemption_date = 29;
        bool underlying_strike_price = 30;
        bool underlying_strike_currency = 31;
        bool underlying_opt_attribute = 32;
        bool underlying_contract_multiplier = 33;
        bool underlying_contract_multiplier_unit = 34;
        bool underlying_flow_schedule_type = 35;
        bool underlying_unit_of_measure = 36;
        bool underlying_unit_of_measure_qty = 37;
        bool underlying_price_unit_of_measure = 38;
        bool underlying_price_unit_of_measure_qty = 39;
        bool underlying_time_unit = 40;
        bool underlying_exercise_style = 41;
        bool underlying_coupon_rate = 42;
        bool underlying_security_exchange = 43;
        bool underlying_issuer = 44;
        bool encoded_underlying_issuer_len = 45;
        bool encoded_underlying_issuer = 46;
        bool underlying_security_desc = 47;
        bool encoded_underlying_security_desc_len = 48;
        bool encoded_underlying_security_desc = 49;
        bool underlying_cp_program = 50;
        bool underlying_cp_reg_type = 51;
        bool underlying_allocation_percent = 52;
        bool underlying_currency = 53;
        bool underlying_qty = 54;
        bool underlying_settlement_type = 55;
        bool underlying_cash_amount = 56;
        bool underlying_cash_type = 57;
        bool underlying_px = 58;
        bool underlying_dirty_price = 59;
        bool underlying_end_price = 60;
        bool underlying_start_value = 61;
        bool underlying_current_value = 62;
        bool underlying_end_value = 63;
        bool underlying_adjusted_quantity = 64;
        bool underlying_fx_rate = 65;
        bool underlying_fx_rate_calc = 66;
        bool underlying_cap_value = 67;
        bool underlying_settl_method = 68;
        bool underlying_put_or_call = 69;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
      string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
      string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
      string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
      int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
      string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
      string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
      string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
      string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
      string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
      string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
      string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
      string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
      string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
      double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
      double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
      double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
      double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
      string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
      string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
      int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
      double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
      double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
      string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
      string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
      string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
      string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
      string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
      string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
      double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
      string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
      int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
      double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
      int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
      int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
      string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
      double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
      string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
      double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
      string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
      int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
      double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
      string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
      string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
      int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
      string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
      string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
      int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
      string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
      string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
      string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
      double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
      string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
      double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
      int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
      double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
      string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
      double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
      double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
      double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
      double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
      double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
      double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
      double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
      double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
      int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
      double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
      string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
      int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
    
  // GROUPS
      repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
      repeated NoUnderlyingStips no_underlying_stips = 72;
      repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
    }

    message NoLegs {
      message NoLegSecurityAltId {
        message FieldPresence {
          bool leg_security_alt_id = 1;
          bool leg_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
        string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
      }

      message FieldPresence {
        bool leg_symbol = 1;
        bool leg_symbol_sfx = 2;
        bool leg_security_id = 3;
        bool leg_security_id_source = 4;
        bool leg_product = 5;
        bool leg_cfi_code = 6;
        bool leg_security_type = 7;
        bool leg_security_sub_type = 8;
        bool leg_maturity_month_year = 9;
        bool leg_maturity_date = 10;
        bool leg_maturity_time = 11;
        bool leg_coupon_payment_date = 12;
        bool leg_issue_date = 13;
        bool leg_repo_collateral_security_type = 14;
        bool leg_repurchase_term = 15;
        bool leg_repurchase_rate = 16;
        bool leg_factor = 17;
        bool leg_credit_rating = 18;
        bool leg_instr_registry = 19;
        bool leg_country_of_issue = 20;
        bool leg_state_or_province_of_issue = 21;
        bool leg_locale_of_issue = 22;
        bool leg_redemption_date = 23;
        bool leg_strike_price = 24;
        bool leg_strike_currency = 25;
        bool leg_opt_attribute = 26;
        bool leg_contract_multiplier = 27;
        bool leg_contract_multiplier_unit = 28;
        bool leg_flow_schedule_type = 29;
        bool leg_unit_of_measure = 30;
        bool leg_unit_of_measure_qty = 31;
        bool leg_price_unit_of_measure = 32;
        bool leg_price_unit_of_measure_qty = 33;
        bool leg_time_unit = 34;
        bool leg_exercise_style = 35;
        bool leg_coupon_rate = 36;
        bool leg_security_exchange = 37;
        bool leg_issuer = 38;
        bool encoded_leg_issuer_len = 39;
        bool encoded_leg_issuer = 40;
        bool leg_security_desc = 41;
        bool encoded_leg_security_desc_len = 42;
        bool encoded_leg_security_desc = 43;
        bool leg_ratio_qty = 44;
        bool leg_side = 45;
        bool leg_currency = 46;
        bool leg_pool = 47;
        bool leg_dated_date = 48;
        bool leg_contract_settl_month = 49;
        bool leg_interest_accrual_date = 50;
        bool leg_put_or_call = 51;
        bool leg_option_ratio = 52;
        bool leg_price = 53;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
      string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
      string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
      string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
      int32 leg_product = 6;  // tag 607, name LegProduct, type INT
      string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
      string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
      string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
      string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
      string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
      string leg_maturity_time = 12;  // tag 1212, name LegMaturityTime, type TZTIMEONLY
      string leg_coupon_payment_date = 13;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
      string leg_issue_date = 14;  // tag 249, name LegIssueDate, type LOCALMKTDATE
      string leg_repo_collateral_security_type = 15;  // tag 250, name LegRepoCollateralSecurityType, type STRING
      int32 leg_repurchase_term = 16;  // tag 251, name LegRepurchaseTerm, type INT
      double leg_repurchase_rate = 17;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
      double leg_factor = 18;  // tag 253, name LegFactor, type FLOAT
      string leg_credit_rating = 19;  // tag 257, name LegCreditRating, type STRING
      string leg_instr_registry = 20;  // tag 599, name LegInstrRegistry, type STRING
      string leg_country_of_issue = 21;  // tag 596, name LegCountryOfIssue, type COUNTRY
      string leg_state_or_province_of_issue = 22;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
      string leg_locale_of_issue = 23;  // tag 598, name LegLocaleOfIssue, type STRING
      string leg_redemption_date = 24;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
      double leg_strike_price = 25;  // tag 612, name LegStrikePrice, type PRICE
      string leg_strike_currency = 26;  // tag 942, name LegStrikeCurrency, type CURRENCY
      int32 leg_opt_attribute = 27;  // tag 613, name LegOptAttribute, type CHAR
      double leg_contract_multiplier = 28;  // tag 614, name LegContractMultiplier, type FLOAT
      int32 leg_contract_multiplier_unit = 29;  // tag 1436, name LegContractMultiplierUnit, type INT
      int32 leg_flow_schedule_type = 30;  // tag 1440, name LegFlowScheduleType, type INT
      string leg_unit_of_measure = 31;  // tag 999, name LegUnitOfMeasure, type STRING
      double leg_unit_of_measure_qty = 32;  // tag 1224, name LegUnitOfMeasureQty, type QTY
      string leg_price_unit_of_measure = 33;  // tag 1421, name LegPriceUnitOfMeasure, type STRING
      double leg_price_unit_of_measure_qty = 34;  // tag 1422, name LegPriceUnitOfMeasureQty, type QTY
      string leg_time_unit = 35;  // tag 1001, name LegTimeUnit, type STRING
      int32 leg_exercise_style = 36;  // tag 1420, name LegExerciseStyle, type INT
      double leg_coupon_rate = 37;  // tag 615, name LegCouponRate, type PERCENTAGE
      string leg_security_exchange = 38;  // tag 616, name LegSecurityExchange, type EXCHANGE
      string leg_issuer = 39;  // tag 617, name LegIssuer, type STRING
      int32 encoded_leg_issuer_len = 40;  // tag 618, name EncodedLegIssuerLen, type LENGTH
      string encoded_leg_issuer = 41;  // tag 619, name EncodedLegIssuer, type DATA
      string leg_security_desc = 42;  // tag 620, name LegSecurityDesc, type STRING
      int32 encoded_leg_security_desc_len = 43;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
      string encoded_leg_security_desc = 44;  // tag 622, name EncodedLegSecurityDesc, type DATA
      double leg_ratio_qty = 45;  // tag 623, name LegRatioQty, type FLOAT
      int32 leg_side = 46;  // tag 624, name LegSide, type CHAR
      string leg_currency = 47;  // tag 556, name LegCurrency, type CURRENCY
      string leg_pool = 48;  // tag 740, name LegPool, type STRING
      string leg_dated_date = 49;  // tag 739, name LegDatedDate, type LOCALMKTDATE
      string leg_contract_settl_month = 50;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
      string leg_interest_accrual_date = 51;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
      int32 leg_put_or_call = 52;  // tag 1358, name LegPutOrCall, type INT
      double leg_option_ratio = 53;  // tag 1017, name LegOptionRatio, type FLOAT
      double leg_price = 54;  // tag 566, name LegPrice, type PRICE
    
  // GROUPS
      repeated NoLegSecurityAltId no_leg_security_alt_id = 55;
    }

    message NoRateSources {
      message FieldPresence {
        bool rate_source = 1;
        bool rate_source_type = 2;
        bool reference_page = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 rate_source = 2;  // tag 1446, name RateSource, type INT
      int32 rate_source_type = 3;  // tag 1447, name RateSourceType, type INT
      string reference_page = 4;  // tag 1448, name ReferencePage, type STRING
    }

    message NoOfSecSizes {
      message FieldPresence {
        bool md_sec_size_type = 1;
        bool md_sec_size = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 md_sec_size_type = 2;  // tag 1178, name MDSecSizeType, type INT
      double md_sec_size = 3;  // tag 1179, name MDSecSize, type QTY
    }

    message NoStatsIndicators {
      message FieldPresence {
        bool stats_type = 1;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 stats_type = 2;  // tag 1176, name StatsType, type INT
    }

    message NoPartyIds {
      message NoPartySubIds {
        message FieldPresence {
          bool party_sub_id = 1;
          bool party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
        int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
      }

      message FieldPresence {
        bool party_id = 1;
        bool party_id_source = 2;
        bool party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_id = 2;  // tag 448, name PartyID, type STRING
      int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
      int32 party_role = 4;  // tag 452, name PartyRole, type INT
    
  // GROUPS
      repeated NoPartySubIds no_party_sub_ids = 5;
    }

    message FieldPresence {
      bool md_update_action = 1;
      bool delete_reason = 2;
      bool md_sub_book_type = 3;
      bool market_depth = 4;
      bool md_entry_type = 5;
      bool md_entry_id = 6;
      bool md_entry_ref_id = 7;
      bool md_stream_id = 8;
      bool symbol = 9;
      bool symbol_sfx = 10;
      bool security_id = 11;
      bool security_id_source = 12;
      bool product = 13;
      bool product_complex = 14;
      bool security_group = 15;
      bool cfi_code = 16;
      bool security_type = 17;
      bool security_sub_type = 18;
      bool maturity_month_year = 19;
      bool maturity_date = 20;
      bool maturity_time = 21;
      bool settle_on_open_flag = 22;
      bool instrmt_assignment_method = 23;
      bool security_status = 24;
      bool coupon_payment_date = 25;
      bool restructuring_type = 26;
      bool seniority = 27;
      bool notional_percentage_outstanding = 28;
      bool original_notional_percentage_outstanding = 29;
      bool attachment_point = 30;
      bool detachment_point = 31;
      bool issue_date = 32;
      bool repo_collateral_security_type = 33;
      bool repurchase_term = 34;
      bool repurchase_rate = 35;
      bool factor = 36;
      bool credit_rating = 37;
      bool instr_registry = 38;
      bool country_of_issue = 39;
      bool state_or_province_of_issue = 40;
      bool locale_of_issue = 41;
      bool redemption_date = 42;
      bool strike_price = 43;
      bool strike_currency = 44;
      bool strike_multiplier = 45;
      bool strike_value = 46;
      bool strike_price_determination_method = 47;
      bool strike_price_boundary_method = 48;
      bool strike_price_boundary_precision = 49;
      bool underlying_price_determination_method = 50;
      bool opt_attribute = 51;
      bool contract_multiplier = 52;
      bool contract_multiplier_unit = 53;
      bool flow_schedule_type = 54;
      bool min_price_increment = 55;
      bool min_price_increment_amount = 56;
      bool unit_of_measure = 57;
      bool unit_of_measure_qty = 58;
      bool price_unit_of_measure = 59;
      bool price_unit_of_measure_qty = 60;
      bool settl_method = 61;
      bool exercise_style = 62;
      bool opt_payout_type = 63;
      bool opt_payout_amount = 64;
      bool price_quote_method = 65;
      bool valuation_method = 66;
      bool list_method = 67;
      bool cap_price = 68;
      bool floor_price = 69;
      bool put_or_call = 70;
      bool flexible_indicator = 71;
      bool flex_product_eligibility_indicator = 72;
      bool time_unit = 73;
      bool coupon_rate = 74;
      bool security_exchange = 75;
      bool position_limit = 76;
      bool nt_position_limit = 77;
      bool issuer = 78;
      bool encoded_issuer_len = 79;
      bool encoded_issuer = 80;
      bool security_desc = 81;
      bool encoded_security_desc_len = 82;
      bool encoded_security_desc = 83;
      bool security_xml_len = 84;
      bool security_xml_data = 85;
      bool security_xml_schema = 86;
      bool pool = 87;
      bool contract_settl_month = 88;
      bool cp_program = 89;
      bool cp_reg_type = 90;
      bool dated_date = 91;
      bool interest_accrual_date = 92;
      bool financial_status = 93;
      bool corporate_action = 94;
      bool md_entry_px = 95;
      bool price_type = 96;
      bool yield_type = 97;
      bool yield = 98;
      bool yield_calc_date = 99;
      bool yield_redemption_date = 100;
      bool yield_redemption_price = 101;
      bool yield_redemption_price_type = 102;
      bool spread = 103;
      bool benchmark_curve_currency = 104;
      bool benchmark_curve_name = 105;
      bool benchmark_curve_point = 106;
      bool benchmark_price = 107;
      bool benchmark_price_type = 108;
      bool benchmark_security_id = 109;
      bool benchmark_security_id_source = 110;
      bool ord_type = 111;
      bool currency = 112;
      bool settl_currency = 113;
      bool md_entry_size = 114;
      bool lot_type = 115;
      bool md_entry_date = 116;
      bool md_entry_time = 117;
      bool tick_direction = 118;
      bool md_mkt = 119;
      bool trading_session_id = 120;
      bool trading_session_sub_id = 121;
      bool security_trading_status = 122;
      bool halt_reason = 123;
      bool quote_condition = 124;
      bool trade_condition = 125;
      bool trd_type = 126;
      bool match_type = 127;
      bool md_entry_originator = 128;
      bool location_id = 129;
      bool desk_id = 130;
      bool open_close_settl_flag = 131;
      bool time_in_force = 132;
      bool expire_date = 133;
      bool expire_time = 134;
      bool min_qty = 135;
      bool exec_inst = 136;
      bool seller_days = 137;
      bool order_id = 138;
      bool secondary_order_id = 139;
      bool quote_entry_id = 140;
      bool trade_id = 141;
      bool md_entry_buyer = 142;
      bool md_entry_seller = 143;
      bool number_of_orders = 144;
      bool md_entry_position_no = 145;
      bool scope = 146;
      bool price_delta = 147;
      bool net_chg_prev_day = 148;
      bool text = 149;
      bool encoded_text_len = 150;
      bool encoded_text = 151;
      bool md_price_level = 152;
      bool order_capacity = 153;
      bool md_origin_type = 154;
      bool high_px = 155;
      bool low_px = 156;
      bool first_px = 157;
      bool last_px = 158;
      bool trade_volume = 159;
      bool settl_type = 160;
      bool settl_date = 161;
      bool trans_bkd_time = 162;
      bool transact_time = 163;
      bool md_quote_type = 164;
      bool rpt_seq = 165;
      bool dealing_capacity = 166;
      bool md_entry_spot_rate = 167;
      bool md_entry_forward_points = 168;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 md_update_action = 2;  // tag 279, name MDUpdateAction, type CHAR
    int32 delete_reason = 3;  // tag 285, name DeleteReason, type CHAR
    int32 md_sub_book_type = 4;  // tag 1173, name MDSubBookType, type INT
    int32 market_depth = 5;  // tag 264, name MarketDepth, type INT
    int32 md_entry_type = 6;  // tag 269, name MDEntryType, type CHAR
    string md_entry_id = 7;  // tag 278, name MDEntryID, type STRING
    string md_entry_ref_id = 8;  // tag 280, name MDEntryRefID, type STRING
    string md_stream_id = 9;  // tag 1500, name MDStreamID, type STRING
    string symbol = 10;  // tag 55, name Symbol, type STRING
    string symbol_sfx = 11;  // tag 65, name SymbolSfx, type STRING
    string security_id = 12;  // tag 48, name SecurityID, type STRING
    string security_id_source = 13;  // tag 22, name SecurityIDSource, type STRING
    int32 product = 14;  // tag 460, name Product, type INT
    string product_complex = 15;  // tag 1227, name ProductComplex, type STRING
    string security_group = 16;  // tag 1151, name SecurityGroup, type STRING
    string cfi_code = 17;  // tag 461, name CFICode, type STRING
    string security_type = 18;  // tag 167, name SecurityType, type STRING
    string security_sub_type = 19;  // tag 762, name SecuritySubType, type STRING
    string maturity_month_year = 20;  // tag 200, name MaturityMonthYear, type MONTHYEAR
    string maturity_date = 21;  // tag 541, name MaturityDate, type LOCALMKTDATE
    string maturity_time = 22;  // tag 1079, name MaturityTime, type TZTIMEONLY
    string settle_on_open_flag = 23;  // tag 966, name SettleOnOpenFlag, type STRING
    int32 instrmt_assignment_method = 24;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
    string security_status = 25;  // tag 965, name SecurityStatus, type STRING
    string coupon_payment_date = 26;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
    string restructuring_type = 27;  // tag 1449, name RestructuringType, type STRING
    string seniority = 28;  // tag 1450, name Seniority, type STRING
    double notional_percentage_outstanding = 29;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
    double original_notional_percentage_outstanding = 30;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
    double attachment_point = 31;  // tag 1457, name AttachmentPoint, type PERCENTAGE
    double detachment_point = 32;  // tag 1458, name DetachmentPoint, type PERCENTAGE
    string issue_date = 33;  // tag 225, name IssueDate, type LOCALMKTDATE
    string repo_collateral_security_type = 34;  // tag 239, name RepoCollateralSecurityType, type STRING
    int32 repurchase_term = 35;  // tag 226, name RepurchaseTerm, type INT
    double repurchase_rate = 36;  // tag 227, name RepurchaseRate, type PERCENTAGE
    double factor = 37;  // tag 228, name Factor, type FLOAT
    string credit_rating = 38;  // tag 255, name CreditRating, type STRING
    string instr_registry = 39;  // tag 543, name InstrRegistry, type STRING
    string country_of_issue = 40;  // tag 470, name CountryOfIssue, type COUNTRY
    string state_or_province_of_issue = 41;  // tag 471, name StateOrProvinceOfIssue, type STRING
    string locale_of_issue = 42;  // tag 472, name LocaleOfIssue, type STRING
    string redemption_date = 43;  // tag 240, name RedemptionDate, type LOCALMKTDATE
    double strike_price = 44;  // tag 202, name StrikePrice, type PRICE
    string strike_currency = 45;  // tag 947, name StrikeCurrency, type CURRENCY
    double strike_multiplier = 46;  // tag 967, name StrikeMultiplier, type FLOAT
    double strike_value = 47;  // tag 968, name StrikeValue, type FLOAT
    int32 strike_price_determination_method = 48;  // tag 1478, name StrikePriceDeterminationMethod, type INT
    int32 strike_price_boundary_method = 49;  // tag 1479, name StrikePriceBoundaryMethod, type INT
    double strike_price_boundary_precision = 50;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
    int32 underlying_price_determination_method = 51;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
    int32 opt_attribute = 52;  // tag 206, name OptAttribute, type CHAR
    double contract_multiplier = 53;  // tag 231, name ContractMultiplier, type FLOAT
    int32 contract_multiplier_unit = 54;  // tag 1435, name ContractMultiplierUnit, type INT
    int32 flow_schedule_type = 55;  // tag 1439, name FlowScheduleType, type INT
    double min_price_increment = 56;  // tag 969, name MinPriceIncrement, type FLOAT
    double min_price_increment_amount = 57;  // tag 1146, name MinPriceIncrementAmount, type AMT
    string unit_of_measure = 58;  // tag 996, name UnitOfMeasure, type STRING
    double unit_of_measure_qty = 59;  // tag 1147, name UnitOfMeasureQty, type QTY
    string price_unit_of_measure = 60;  // tag 1191, name PriceUnitOfMeasure, type STRING
    double price_unit_of_measure_qty = 61;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
    int32 settl_method = 62;  // tag 1193, name SettlMethod, type CHAR
    int32 exercise_style = 63;  // tag 1194, name ExerciseStyle, type INT
    int32 opt_payout_type = 64;  // tag 1482, name OptPayoutType, type INT
    double opt_payout_amount = 65;  // tag 1195, name OptPayoutAmount, type AMT
    string price_quote_method = 66;  // tag 1196, name PriceQuoteMethod, type STRING
    string valuation_method = 67;  // tag 1197, name ValuationMethod, type STRING
    int32 list_method = 68;  // tag 1198, name ListMethod, type INT
    double cap_price = 69;  // tag 1199, name CapPrice, type PRICE
    double floor_price = 70;  // tag 1200, name FloorPrice, type PRICE
    int32 put_or_call = 71;  // tag 201, name PutOrCall, type INT
    bool flexible_indicator = 72;  // tag 1244, name FlexibleIndicator, type BOOLEAN
    bool flex_product_eligibility_indicator = 73;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
    string time_unit = 74;  // tag 997, name TimeUnit, type STRING
    double coupon_rate = 75;  // tag 223, name CouponRate, type PERCENTAGE
    string security_exchange = 76;  // tag 207, name SecurityExchange, type EXCHANGE
    int32 position_limit = 77;  // tag 970, name PositionLimit, type INT
    int32 nt_position_limit = 78;  // tag 971, name NTPositionLimit, type INT
    string issuer = 79;  // tag 106, name Issuer, type STRING
    int32 encoded_issuer_len = 80;  // tag 348, name EncodedIssuerLen, type LENGTH
    string encoded_issuer = 81;  // tag 349, name EncodedIssuer, type DATA
    string security_desc = 82;  // tag 107, name SecurityDesc, type STRING
    int32 encoded_security_desc_len = 83;  // tag 350, name EncodedSecurityDescLen, type LENGTH
    string encoded_security_desc = 84;  // tag 351, name EncodedSecurityDesc, type DATA
    int32 security_xml_len = 85;  // tag 1184, name SecurityXMLLen, type LENGTH
    string security_xml_data = 86;  // tag 1185, name SecurityXMLData, type XMLDATA
    string security_xml_schema = 87;  // tag 1186, name SecurityXMLSchema, type STRING
    string pool = 88;  // tag 691, name Pool, type STRING
    string contract_settl_month = 89;  // tag 667, name ContractSettlMonth, type MONTHYEAR
    int32 cp_program = 90;  // tag 875, name CPProgram, type INT
    string cp_reg_type = 91;  // tag 876, name CPRegType, type STRING
    string dated_date = 92;  // tag 873, name DatedDate, type LOCALMKTDATE
    string interest_accrual_date = 93;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
    string financial_status = 94;  // tag 291, name FinancialStatus, type MULTIPLECHARVALUE
    string corporate_action = 95;  // tag 292, name CorporateAction, type MULTIPLECHARVALUE
    double md_entry_px = 96;  // tag 270, name MDEntryPx, type PRICE
    int32 price_type = 97;  // tag 423, name PriceType, type INT
    string yield_type = 98;  // tag 235, name YieldType, type STRING
    double yield = 99;  // tag 236, name Yield, type PERCENTAGE
    string yield_calc_date = 100;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
    string yield_redemption_date = 101;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
    double yield_redemption_price = 102;  // tag 697, name YieldRedemptionPrice, type PRICE
    int32 yield_redemption_price_type = 103;  // tag 698, name YieldRedemptionPriceType, type INT
    double spread = 104;  // tag 218, name Spread, type PRICEOFFSET
    string benchmark_curve_currency = 105;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
    string benchmark_curve_name = 106;  // tag 221, name BenchmarkCurveName, type STRING
    string benchmark_curve_point = 107;  // tag 222, name BenchmarkCurvePoint, type STRING
    double benchmark_price = 108;  // tag 662, name BenchmarkPrice, type PRICE
    int32 benchmark_price_type = 109;  // tag 663, name BenchmarkPriceType, type INT
    string benchmark_security_id = 110;  // tag 699, name BenchmarkSecurityID, type STRING
    string benchmark_security_id_source = 111;  // tag 761, name BenchmarkSecurityIDSource, type STRING
    int32 ord_type = 112;  // tag 40, name OrdType, type CHAR
    string currency = 113;  // tag 15, name Currency, type CURRENCY
    string settl_currency = 114;  // tag 120, name SettlCurrency, type CURRENCY
    double md_entry_size = 115;  // tag 271, name MDEntrySize, type QTY
    int32 lot_type = 116;  // tag 1093, name LotType, type CHAR
    uint64 md_entry_date = 117;  // tag 272, name MDEntryDate, type UTCDATEONLY
    uint64 md_entry_time = 118;  // tag 273, name MDEntryTime, type UTCTIMEONLY
    int32 tick_direction = 119;  // tag 274, name TickDirection, type CHAR
    string md_mkt = 120;  // tag 275, name MDMkt, type EXCHANGE
    string trading_session_id = 121;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 122;  // tag 625, name TradingSessionSubID, type STRING
    int32 security_trading_status = 123;  // tag 326, name SecurityTradingStatus, type INT
    int32 halt_reason = 124;  // tag 327, name HaltReason, type INT
    string quote_condition = 125;  // tag 276, name QuoteCondition, type MULTIPLESTRINGVALUE
    string trade_condition = 126;  // tag 277, name TradeCondition, type MULTIPLESTRINGVALUE
    int32 trd_type = 127;  // tag 828, name TrdType, type INT
    string match_type = 128;  // tag 574, name MatchType, type STRING
    string md_entry_originator = 129;  // tag 282, name MDEntryOriginator, type STRING
    string location_id = 130;  // tag 283, name LocationID, type STRING
    string desk_id = 131;  // tag 284, name DeskID, type STRING
    string open_close_settl_flag = 132;  // tag 286, name OpenCloseSettlFlag, type MULTIPLECHARVALUE
    int32 time_in_force = 133;  // tag 59, name TimeInForce, type CHAR
    string expire_date = 134;  // tag 432, name ExpireDate, type LOCALMKTDATE
    uint64 expire_time = 135;  // tag 126, name ExpireTime, type UTCTIMESTAMP
    double min_qty = 136;  // tag 110, name MinQty, type QTY
    string exec_inst = 137;  // tag 18, name ExecInst, type MULTIPLECHARVALUE
    int32 seller_days = 138;  // tag 287, name SellerDays, type INT
    string order_id = 139;  // tag 37, name OrderID, type STRING
    string secondary_order_id = 140;  // tag 198, name SecondaryOrderID, type STRING
    string quote_entry_id = 141;  // tag 299, name QuoteEntryID, type STRING
    string trade_id = 142;  // tag 1003, name TradeID, type STRING
    string md_entry_buyer = 143;  // tag 288, name MDEntryBuyer, type STRING
    string md_entry_seller = 144;  // tag 289, name MDEntrySeller, type STRING
    int32 number_of_orders = 145;  // tag 346, name NumberOfOrders, type INT
    int32 md_entry_position_no = 146;  // tag 290, name MDEntryPositionNo, type INT
    string scope = 147;  // tag 546, name Scope, type MULTIPLECHARVALUE
    double price_delta = 148;  // tag 811, name PriceDelta, type FLOAT
    double net_chg_prev_day = 149;  // tag 451, name NetChgPrevDay, type PRICEOFFSET
    string text = 150;  // tag 58, name Text, type STRING
    int32 encoded_text_len = 151;  // tag 354, name EncodedTextLen, type LENGTH
    string encoded_text = 152;  // tag 355, name EncodedText, type DATA
    int32 md_price_level = 153;  // tag 1023, name MDPriceLevel, type INT
    int32 order_capacity = 154;  // tag 528, name OrderCapacity, type CHAR
    int32 md_origin_type = 155;  // tag 1024, name MDOriginType, type INT
    double high_px = 156;  // tag 332, name HighPx, type PRICE
    double low_px = 157;  // tag 333, name LowPx, type PRICE
    double first_px = 158;  // tag 1025, name FirstPx, type PRICE
    double last_px = 159;  // tag 31, name LastPx, type PRICE
    double trade_volume = 160;  // tag 1020, name TradeVolume, type QTY
    string settl_type = 161;  // tag 63, name SettlType, type STRING
    string settl_date = 162;  // tag 64, name SettlDate, type LOCALMKTDATE
    uint64 trans_bkd_time = 163;  // tag 483, name TransBkdTime, type UTCTIMESTAMP
    uint64 transact_time = 164;  // tag 60, name TransactTime, type UTCTIMESTAMP
    int32 md_quote_type = 165;  // tag 1070, name MDQuoteType, type INT
    int32 rpt_seq = 166;  // tag 83, name RptSeq, type INT
    int32 dealing_capacity = 167;  // tag 1048, name DealingCapacity, type CHAR
    double md_entry_spot_rate = 168;  // tag 1026, name MDEntrySpotRate, type FLOAT
    double md_entry_forward_points = 169;  // tag 1027, name MDEntryForwardPoints, type PRICEOFFSET
  
  // GROUPS
    repeated NoSecurityAltId no_security_alt_id = 170;
    repeated NoEvents no_events = 171;
    repeated NoInstrumentParties no_instrument_parties = 172;
    repeated NoComplexEvents no_complex_events = 173;
    repeated NoUnderlyings no_underlyings = 174;
    repeated NoLegs no_legs = 175;
    repeated NoRateSources no_rate_sources = 176;
    repeated NoOfSecSizes no_of_sec_sizes = 177;
    repeated NoStatsIndicators no_stats_indicators = 178;
    repeated NoPartyIds no_party_ids = 179;
  }

  message NoRoutingIds {
    message FieldPresence {
      bool routing_type = 1;
      bool routing_id = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 routing_type = 2;  // tag 216, name RoutingType, type INT
    string routing_id = 3;  // tag 217, name RoutingID, type STRING
  }

  message FieldPresence {
    bool appl_id = 1;
    bool appl_seq_num = 2;
    bool appl_last_seq_num = 3;
    bool appl_resend_flag = 4;
    bool md_book_type = 5;
    bool md_feed_type = 6;
    bool trade_date = 7;
    bool md_req_id = 8;
    bool appl_queue_depth = 9;
    bool appl_queue_resolution = 10;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string appl_id = 5;  // tag 1180, name ApplID, type STRING
  int32 appl_seq_num = 6;  // tag 1181, name ApplSeqNum, type SEQNUM
  int32 appl_last_seq_num = 7;  // tag 1350, name ApplLastSeqNum, type SEQNUM
  bool appl_resend_flag = 8;  // tag 1352, name ApplResendFlag, type BOOLEAN
  int32 md_book_type = 9;  // tag 1021, name MDBookType, type INT
  string md_feed_type = 10;  // tag 1022, name MDFeedType, type STRING
  string trade_date = 11;  // tag 75, name TradeDate, type LOCALMKTDATE
  string md_req_id = 12;  // tag 262, name MDReqID, type STRING
  int32 appl_queue_depth = 13;  // tag 813, name ApplQueueDepth, type INT
  int32 appl_queue_resolution = 14;  // tag 814, name ApplQueueResolution, type INT

  // GROUPS
  repeated NoMdEntries no_md_entries = 15;
  repeated NoRoutingIds no_routing_ids = 16;
}

message NewOrderSingle {
  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoAllocs {
    message NoNestedPartyIds {
      message NoNestedPartySubIds {
        message FieldPresence {
          bool nested_party_sub_id = 1;
          bool nested_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
        int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
      }

      message FieldPresence {
        bool nested_party_id = 1;
        bool nested_party_id_source = 2;
        bool nested_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
      int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
      int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
    
  // GROUPS
      repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
    }

    message FieldPresence {
      bool alloc_account = 1;
      bool alloc_acct_id_source = 2;
      bool alloc_settl_currency = 3;
      bool individual_alloc_id = 4;
      bool alloc_qty = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string alloc_account = 2;  // tag 79, name AllocAccount, type STRING
    int32 alloc_acct_id_source = 3;  // tag 661, name AllocAcctIDSource, type INT
    string alloc_settl_currency = 4;  // tag 736, name AllocSettlCurrency, type CURRENCY
    string individual_alloc_id = 5;  // tag 467, name IndividualAllocID, type STRING
    double alloc_qty = 6;  // tag 80, name AllocQty, type QTY
  
  // GROUPS
    repeated NoNestedPartyIds no_nested_party_ids = 7;
  }

  message NoTradingSessions {
    message FieldPresence {
      bool trading_session_id = 1;
      bool trading_session_sub_id = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string trading_session_id = 2;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 3;  // tag 625, name TradingSessionSubID, type STRING
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_time = 3;
      bool event_px = 4;
      bool event_text = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
    double event_px = 5;  // tag 867, name EventPx, type PRICE
    string event_text = 6;  // tag 868, name EventText, type STRING
  }

  message NoInstrumentParties {
    message NoInstrumentPartySubIds {
      message FieldPresence {
        bool instrument_party_sub_id = 1;
        bool instrument_party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
      int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
    }

    message FieldPresence {
      bool instrument_party_id = 1;
      bool instrument_party_id_source = 2;
      bool instrument_party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
    int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
    int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
  
  // GROUPS
    repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
  }

  message NoComplexEvents {
    message NoComplexEventDates {
      message NoComplexEventTimes {
        message FieldPresence {
          bool complex_event_start_time = 1;
          bool complex_event_end_time = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
        uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
      }

      message FieldPresence {
        bool complex_event_start_date = 1;
        bool complex_event_end_date = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
      uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
    
  // GROUPS
      repeated NoComplexEventTimes no_complex_event_times = 4;
    }

    message FieldPresence {
      bool complex_event_type = 1;
      bool complex_opt_payout_amount = 2;
      bool complex_event_price = 3;
      bool complex_event_price_boundary_method = 4;
      bool complex_event_price_boundary_precision = 5;
      bool complex_event_price_time_type = 6;
      bool complex_event_condition = 7;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
    double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
    double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
    int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
    double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
    int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
    int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
  
  // GROUPS
    repeated NoComplexEventDates no_complex_event_dates = 9;
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message NoUndlyInstrumentParties {
      message NoUndlyInstrumentPartySubIds {
        message FieldPresence {
          bool underlying_instrument_party_sub_id = 1;
          bool underlying_instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
        int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool underlying_instrument_party_id = 1;
        bool underlying_instrument_party_id_source = 2;
        bool underlying_instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
      int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
      int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_maturity_time = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_restructuring_type = 13;
      bool underlying_seniority = 14;
      bool underlying_notional_percentage_outstanding = 15;
      bool underlying_original_notional_percentage_outstanding = 16;
      bool underlying_attachment_point = 17;
      bool underlying_detachment_point = 18;
      bool underlying_issue_date = 19;
      bool underlying_repo_collateral_security_type = 20;
      bool underlying_repurchase_term = 21;
      bool underlying_repurchase_rate = 22;
      bool underlying_factor = 23;
      bool underlying_credit_rating = 24;
      bool underlying_instr_registry = 25;
      bool underlying_country_of_issue = 26;
      bool underlying_state_or_province_of_issue = 27;
      bool underlying_locale_of_issue = 28;
      bool underlying_redemption_date = 29;
      bool underlying_strike_price = 30;
      bool underlying_strike_currency = 31;
      bool underlying_opt_attribute = 32;
      bool underlying_contract_multiplier = 33;
      bool underlying_contract_multiplier_unit = 34;
      bool underlying_flow_schedule_type = 35;
      bool underlying_unit_of_measure = 36;
      bool underlying_unit_of_measure_qty = 37;
      bool underlying_price_unit_of_measure = 38;
      bool underlying_price_unit_of_measure_qty = 39;
      bool underlying_time_unit = 40;
      bool underlying_exercise_style = 41;
      bool underlying_coupon_rate = 42;
      bool underlying_security_exchange = 43;
      bool underlying_issuer = 44;
      bool encoded_underlying_issuer_len = 45;
      bool encoded_underlying_issuer = 46;
      bool underlying_security_desc = 47;
      bool encoded_underlying_security_desc_len = 48;
      bool encoded_underlying_security_desc = 49;
      bool underlying_cp_program = 50;
      bool underlying_cp_reg_type = 51;
      bool underlying_allocation_percent = 52;
      bool underlying_currency = 53;
      bool underlying_qty = 54;
      bool underlying_settlement_type = 55;
      bool underlying_cash_amount = 56;
      bool underlying_cash_type = 57;
      bool underlying_px = 58;
      bool underlying_dirty_price = 59;
      bool underlying_end_price = 60;
      bool underlying_start_value = 61;
      bool underlying_current_value = 62;
      bool underlying_end_value = 63;
      bool underlying_adjusted_quantity = 64;
      bool underlying_fx_rate = 65;
      bool underlying_fx_rate_calc = 66;
      bool underlying_cap_value = 67;
      bool underlying_settl_method = 68;
      bool underlying_put_or_call = 69;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
    string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
    double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
    double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
    string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
    int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
    string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
    double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
    string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
    double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
    string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
    int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
    double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
    double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
    string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
    int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
    double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
    string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
    double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
    double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
    double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
    int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
    double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
    string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
    int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
    repeated NoUnderlyingStips no_underlying_stips = 72;
    repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
  }

  message NoStipulations {
    message FieldPresence {
      bool stipulation_type = 1;
      bool stipulation_value = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
    string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
  }

  message NoStrategyParameters {
    message FieldPresence {
      bool strategy_parameter_name = 1;
      bool strategy_parameter_type = 2;
      bool strategy_parameter_value = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string strategy_parameter_name = 2;  // tag 958, name StrategyParameterName, type STRING
    int32 strategy_parameter_type = 3;  // tag 959, name StrategyParameterType, type INT
    string strategy_parameter_value = 4;  // tag 960, name StrategyParameterValue, type STRING
  }

  message NoTrdRegTimestamps {
    message FieldPresence {
      bool trd_reg_timestamp = 1;
      bool trd_reg_timestamp_type = 2;
      bool trd_reg_timestamp_origin = 3;
      bool desk_type = 4;
      bool desk_type_source = 5;
      bool desk_order_handling_inst = 6;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    uint64 trd_reg_timestamp = 2;  // tag 769, name TrdRegTimestamp, type UTCTIMESTAMP
    int32 trd_reg_timestamp_type = 3;  // tag 770, name TrdRegTimestampType, type INT
    string trd_reg_timestamp_origin = 4;  // tag 771, name TrdRegTimestampOrigin, type STRING
    string desk_type = 5;  // tag 1033, name DeskType, type STRING
    int32 desk_type_source = 6;  // tag 1034, name DeskTypeSource, type INT
    string desk_order_handling_inst = 7;  // tag 1035, name DeskOrderHandlingInst, type MULTIPLESTRINGVALUE
  }

  message FieldPresence {
    bool cl_ord_id = 1;
    bool secondary_cl_ord_id = 2;
    bool cl_ord_link_id = 3;
    bool trade_origination_date = 4;
    bool trade_date = 5;
    bool account = 6;
    bool acct_id_source = 7;
    bool account_type = 8;
    bool day_booking_inst = 9;
    bool booking_unit = 10;
    bool prealloc_method = 11;
    bool alloc_id = 12;
    bool settl_type = 13;
    bool settl_date = 14;
    bool cash_margin = 15;
    bool clearing_fee_indicator = 16;
    bool handl_inst = 17;
    bool exec_inst = 18;
    bool min_qty = 19;
    bool match_increment = 20;
    bool max_price_levels = 21;
    bool display_qty = 22;
    bool secondary_display_qty = 23;
    bool display_when = 24;
    bool display_method = 25;
    bool display_low_qty = 26;
    bool display_high_qty = 27;
    bool display_min_incr = 28;
    bool refresh_qty = 29;
    bool max_floor = 30;
    bool ex_destination = 31;
    bool ex_destination_id_source = 32;
    bool process_code = 33;
    bool symbol = 34;
    bool symbol_sfx = 35;
    bool security_id = 36;
    bool security_id_source = 37;
    bool product = 38;
    bool product_complex = 39;
    bool security_group = 40;
    bool cfi_code = 41;
    bool security_type = 42;
    bool security_sub_type = 43;
    bool maturity_month_year = 44;
    bool maturity_date = 45;
    bool maturity_time = 46;
    bool settle_on_open_flag = 47;
    bool instrmt_assignment_method = 48;
    bool security_status = 49;
    bool coupon_payment_date = 50;
    bool restructuring_type = 51;
    bool seniority = 52;
    bool notional_percentage_outstanding = 53;
    bool original_notional_percentage_outstanding = 54;
    bool attachment_point = 55;
    bool detachment_point = 56;
    bool issue_date = 57;
    bool repo_collateral_security_type = 58;
    bool repurchase_term = 59;
    bool repurchase_rate = 60;
    bool factor = 61;
    bool credit_rating = 62;
    bool instr_registry = 63;
    bool country_of_issue = 64;
    bool state_or_province_of_issue = 65;
    bool locale_of_issue = 66;
    bool redemption_date = 67;
    bool strike_price = 68;
    bool strike_currency = 69;
    bool strike_multiplier = 70;
    bool strike_value = 71;
    bool strike_price_determination_method = 72;
    bool strike_price_boundary_method = 73;
    bool strike_price_boundary_precision = 74;
    bool underlying_price_determination_method = 75;
    bool opt_attribute = 76;
    bool contract_multiplier = 77;
    bool contract_multiplier_unit = 78;
    bool flow_schedule_type = 79;
    bool min_price_increment = 80;
    bool min_price_increment_amount = 81;
    bool unit_of_measure = 82;
    bool unit_of_measure_qty = 83;
    bool price_unit_of_measure = 84;
    bool price_unit_of_measure_qty = 85;
    bool settl_method = 86;
    bool exercise_style = 87;
    bool opt_payout_type = 88;
    bool opt_payout_amount = 89;
    bool price_quote_method = 90;
    bool valuation_method = 91;
    bool list_method = 92;
    bool cap_price = 93;
    bool floor_price = 94;
    bool put_or_call = 95;
    bool flexible_indicator = 96;
    bool flex_product_eligibility_indicator = 97;
    bool time_unit = 98;
    bool coupon_rate = 99;
    bool security_exchange = 100;
    bool position_limit = 101;
    bool nt_position_limit = 102;
    bool issuer = 103;
    bool encoded_issuer_len = 104;
    bool encoded_issuer = 105;
    bool security_desc = 106;
    bool encoded_security_desc_len = 107;
    bool encoded_security_desc = 108;
    bool security_xml_len = 109;
    bool security_xml_data = 110;
    bool security_xml_schema = 111;
    bool pool = 112;
    bool contract_settl_month = 113;
    bool cp_program = 114;
    bool cp_reg_type = 115;
    bool dated_date = 116;
    bool interest_accrual_date = 117;
    bool agreement_desc = 118;
    bool agreement_id = 119;
    bool agreement_date = 120;
    bool agreement_currency = 121;
    bool termination_type = 122;
    bool start_date = 123;
    bool end_date = 124;
    bool delivery_type = 125;
    bool margin_ratio = 126;
    bool prev_close_px = 127;
    bool side = 128;
    bool locate_reqd = 129;
    bool transact_time = 130;
    bool qty_type = 131;
    bool order_qty = 132;
    bool cash_order_qty = 133;
    bool order_percent = 134;
    bool rounding_direction = 135;
    bool rounding_modulus = 136;
    bool ord_type = 137;
    bool price_type = 138;
    bool price = 139;
    bool price_protection_scope = 140;
    bool stop_px = 141;
    bool trigger_type = 142;
    bool trigger_action = 143;
    bool trigger_price = 144;
    bool trigger_symbol = 145;
    bool trigger_security_id = 146;
    bool trigger_security_id_source = 147;
    bool trigger_security_desc = 148;
    bool trigger_price_type = 149;
    bool trigger_price_type_scope = 150;
    bool trigger_price_direction = 151;
    bool trigger_new_price = 152;
    bool trigger_order_type = 153;
    bool trigger_new_qty = 154;
    bool trigger_trading_session_id = 155;
    bool trigger_trading_session_sub_id = 156;
    bool spread = 157;
    bool benchmark_curve_currency = 158;
    bool benchmark_curve_name = 159;
    bool benchmark_curve_point = 160;
    bool benchmark_price = 161;
    bool benchmark_price_type = 162;
    bool benchmark_security_id = 163;
    bool benchmark_security_id_source = 164;
    bool yield_type = 165;
    bool yield = 166;
    bool yield_calc_date = 167;
    bool yield_redemption_date = 168;
    bool yield_redemption_price = 169;
    bool yield_redemption_price_type = 170;
    bool currency = 171;
    bool compliance_id = 172;
    bool solicited_flag = 173;
    bool ioi_id = 174;
    bool quote_id = 175;
    bool time_in_force = 176;
    bool effective_time = 177;
    bool expire_date = 178;
    bool expire_time = 179;
    bool gt_booking_inst = 180;
    bool commission = 181;
    bool comm_type = 182;
    bool comm_currency = 183;
    bool fund_renew_waiv = 184;
    bool order_capacity = 185;
    bool order_restrictions = 186;
    bool pre_trade_anonymity = 187;
    bool cust_order_capacity = 188;
    bool forex_req = 189;
    bool settl_currency = 190;
    bool booking_type = 191;
    bool text = 192;
    bool encoded_text_len = 193;
    bool encoded_text = 194;
    bool settl_date2 = 195;
    bool order_qty2 = 196;
    bool price2 = 197;
    bool position_effect = 198;
    bool covered_or_uncovered = 199;
    bool max_show = 200;
    bool peg_offset_value = 201;
    bool peg_price_type = 202;
    bool peg_move_type = 203;
    bool peg_offset_type = 204;
    bool peg_limit_type = 205;
    bool peg_round_direction = 206;
    bool peg_scope = 207;
    bool peg_security_id_source = 208;
    bool peg_security_id = 209;
    bool peg_symbol = 210;
    bool peg_security_desc = 211;
    bool discretion_inst = 212;
    bool discretion_offset_value = 213;
    bool discretion_move_type = 214;
    bool discretion_offset_type = 215;
    bool discretion_limit_type = 216;
    bool discretion_round_direction = 217;
    bool discretion_scope = 218;
    bool target_strategy = 219;
    bool target_strategy_parameters = 220;
    bool participation_rate = 221;
    bool cancellation_rights = 222;
    bool money_laundering_status = 223;
    bool regist_id = 224;
    bool designation = 225;
    bool manual_order_indicator = 226;
    bool cust_directed_order = 227;
    bool received_dept_id = 228;
    bool cust_order_handling_inst = 229;
    bool order_handling_inst_source = 230;
    bool ref_order_id = 231;
    bool ref_order_id_source = 232;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string cl_ord_id = 5;  // tag 11, name ClOrdID, type STRING
  string secondary_cl_ord_id = 6;  // tag 526, name SecondaryClOrdID, type STRING
  string cl_ord_link_id = 7;  // tag 583, name ClOrdLinkID, type STRING
  string trade_origination_date = 8;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
  string trade_date = 9;  // tag 75, name TradeDate, type LOCALMKTDATE
  string account = 10;  // tag 1, name Account, type STRING
  int32 acct_id_source = 11;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 12;  // tag 581, name AccountType, type INT
  int32 day_booking_inst = 13;  // tag 589, name DayBookingInst, type CHAR
  int32 booking_unit = 14;  // tag 590, name BookingUnit, type CHAR
  int32 prealloc_method = 15;  // tag 591, name PreallocMethod, type CHAR
  string alloc_id = 16;  // tag 70, name AllocID, type STRING
  string settl_type = 17;  // tag 63, name SettlType, type STRING
  string settl_date = 18;  // tag 64, name SettlDate, type LOCALMKTDATE
  int32 cash_margin = 19;  // tag 544, name CashMargin, type CHAR
  string clearing_fee_indicator = 20;  // tag 635, name ClearingFeeIndicator, type STRING
  int32 handl_inst = 21;  // tag 21, name HandlInst, type CHAR
  string exec_inst = 22;  // tag 18, name ExecInst, type MULTIPLECHARVALUE
  double min_qty = 23;  // tag 110, name MinQty, type QTY
  double match_increment = 24;  // tag 1089, name MatchIncrement, type QTY
  int32 max_price_levels = 25;  // tag 1090, name MaxPriceLevels, type INT
  double display_qty = 26;  // tag 1138, name DisplayQty, type QTY
  double secondary_display_qty = 27;  // tag 1082, name SecondaryDisplayQty, type QTY
  int32 display_when = 28;  // tag 1083, name DisplayWhen, type CHAR
  int32 display_method = 29;  // tag 1084, name DisplayMethod, type CHAR
  double display_low_qty = 30;  // tag 1085, name DisplayLowQty, type QTY
  double display_high_qty = 31;  // tag 1086, name DisplayHighQty, type QTY
  double display_min_incr = 32;  // tag 1087, name DisplayMinIncr, type QTY
  double refresh_qty = 33;  // tag 1088, name RefreshQty, type QTY
  double max_floor = 34;  // tag 111, name MaxFloor, type QTY
  string ex_destination = 35;  // tag 100, name ExDestination, type EXCHANGE
  int32 ex_destination_id_source = 36;  // tag 1133, name ExDestinationIDSource, type CHAR
  int32 process_code = 37;  // tag 81, name ProcessCode, type CHAR
  string symbol = 38;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 39;  // tag 65, name SymbolSfx, type STRING
  string security_id = 40;  // tag 48, name SecurityID, type STRING
  string security_id_source = 41;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 42;  // tag 460, name Product, type INT
  string product_complex = 43;  // tag 1227, name ProductComplex, type STRING
  string security_group = 44;  // tag 1151, name SecurityGroup, type STRING
  string cfi_code = 45;  // tag 461, name CFICode, type STRING
  string security_type = 46;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 47;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 48;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 49;  // tag 541, name MaturityDate, type LOCALMKTDATE
  string maturity_time = 50;  // tag 1079, name MaturityTime, type TZTIMEONLY
  string settle_on_open_flag = 51;  // tag 966, name SettleOnOpenFlag, type STRING
  int32 instrmt_assignment_method = 52;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
  string security_status = 53;  // tag 965, name SecurityStatus, type STRING
  string coupon_payment_date = 54;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string restructuring_type = 55;  // tag 1449, name RestructuringType, type STRING
  string seniority = 56;  // tag 1450, name Seniority, type STRING
  double notional_percentage_outstanding = 57;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
  double original_notional_percentage_outstanding = 58;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
  double attachment_point = 59;  // tag 1457, name AttachmentPoint, type PERCENTAGE
  double detachment_point = 60;  // tag 1458, name DetachmentPoint, type PERCENTAGE
  string issue_date = 61;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 62;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 63;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 64;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 65;  // tag 228, name Factor, type FLOAT
  string credit_rating = 66;  // tag 255, name CreditRating, type STRING
  string instr_registry = 67;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 68;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 69;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 70;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 71;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 72;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 73;  // tag 947, name StrikeCurrency, type CURRENCY
  double strike_multiplier = 74;  // tag 967, name StrikeMultiplier, type FLOAT
  double strike_value = 75;  // tag 968, name StrikeValue, type FLOAT
  int32 strike_price_determination_method = 76;  // tag 1478, name StrikePriceDeterminationMethod, type INT
  int32 strike_price_boundary_method = 77;  // tag 1479, name StrikePriceBoundaryMethod, type INT
  double strike_price_boundary_precision = 78;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
  int32 underlying_price_determination_method = 79;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
  int32 opt_attribute = 80;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 81;  // tag 231, name ContractMultiplier, type FLOAT
  int32 contract_multiplier_unit = 82;  // tag 1435, name ContractMultiplierUnit, type INT
  int32 flow_schedule_type = 83;  // tag 1439, name FlowScheduleType, type INT
  double min_price_increment = 84;  // tag 969, name MinPriceIncrement, type FLOAT
  double min_price_increment_amount = 85;  // tag 1146, name MinPriceIncrementAmount, type AMT
  string unit_of_measure = 86;  // tag 996, name UnitOfMeasure, type STRING
  double unit_of_measure_qty = 87;  // tag 1147, name UnitOfMeasureQty, type QTY
  string price_unit_of_measure = 88;  // tag 1191, name PriceUnitOfMeasure, type STRING
  double price_unit_of_measure_qty = 89;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
  int32 settl_method = 90;  // tag 1193, name SettlMethod, type CHAR
  int32 exercise_style = 91;  // tag 1194, name ExerciseStyle, type INT
  int32 opt_payout_type = 92;  // tag 1482, name OptPayoutType, type INT
  double opt_payout_amount = 93;  // tag 1195, name OptPayoutAmount, type AMT
  string price_quote_method = 94;  // tag 1196, name PriceQuoteMethod, type STRING
  string valuation_method = 95;  // tag 1197, name ValuationMethod, type STRING
  int32 list_method = 96;  // tag 1198, name ListMethod, type INT
  double cap_price = 97;  // tag 1199, name CapPrice, type PRICE
  double floor_price = 98;  // tag 1200, name FloorPrice, type PRICE
  int32 put_or_call = 99;  // tag 201, name PutOrCall, type INT
  bool flexible_indicator = 100;  // tag 1244, name FlexibleIndicator, type BOOLEAN
  bool flex_product_eligibility_indicator = 101;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
  string time_unit = 102;  // tag 997, name TimeUnit, type STRING
  double coupon_rate = 103;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 104;  // tag 207, name SecurityExchange, type EXCHANGE
  int32 position_limit = 105;  // tag 970, name PositionLimit, type INT
  int32 nt_position_limit = 106;  // tag 971, name NTPositionLimit, type INT
  string issuer = 107;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 108;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 109;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 110;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 111;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 112;  // tag 351, name EncodedSecurityDesc, type DATA
  int32 security_xml_len = 113;  // tag 1184, name SecurityXMLLen, type LENGTH
  string security_xml_data = 114;  // tag 1185, name SecurityXMLData, type XMLDATA
  string security_xml_schema = 115;  // tag 1186, name SecurityXMLSchema, type STRING
  string pool = 116;  // tag 691, name Pool, type STRING
  string contract_settl_month = 117;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 118;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 119;  // tag 876, name CPRegType, type STRING
  string dated_date = 120;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 121;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 122;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 123;  // tag 914, name AgreementID, type STRING
  string agreement_date = 124;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 125;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 126;  // tag 788, name TerminationType, type INT
  string start_date = 127;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 128;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 129;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 130;  // tag 898, name MarginRatio, type PERCENTAGE
  double prev_close_px = 131;  // tag 140, name PrevClosePx, type PRICE
  int32 side = 132;  // tag 54, name Side, type CHAR
  bool locate_reqd = 133;  // tag 114, name LocateReqd, type BOOLEAN
  uint64 transact_time = 134;  // tag 60, name TransactTime, type UTCTIMESTAMP
  int32 qty_type = 135;  // tag 854, name QtyType, type INT
  double order_qty = 136;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 137;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 138;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 139;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 140;  // tag 469, name RoundingModulus, type FLOAT
  int32 ord_type = 141;  // tag 40, name OrdType, type CHAR
  int32 price_type = 142;  // tag 423, name PriceType, type INT
  double price = 143;  // tag 44, name Price, type PRICE
  int32 price_protection_scope = 144;  // tag 1092, name PriceProtectionScope, type CHAR
  double stop_px = 145;  // tag 99, name StopPx, type PRICE
  int32 trigger_type = 146;  // tag 1100, name TriggerType, type CHAR
  int32 trigger_action = 147;  // tag 1101, name TriggerAction, type CHAR
  double trigger_price = 148;  // tag 1102, name TriggerPrice, type PRICE
  string trigger_symbol = 149;  // tag 1103, name TriggerSymbol, type STRING
  string trigger_security_id = 150;  // tag 1104, name TriggerSecurityID, type STRING
  string trigger_security_id_source = 151;  // tag 1105, name TriggerSecurityIDSource, type STRING
  string trigger_security_desc = 152;  // tag 1106, name TriggerSecurityDesc, type STRING
  int32 trigger_price_type = 153;  // tag 1107, name TriggerPriceType, type CHAR
  int32 trigger_price_type_scope = 154;  // tag 1108, name TriggerPriceTypeScope, type CHAR
  int32 trigger_price_direction = 155;  // tag 1109, name TriggerPriceDirection, type CHAR
  double trigger_new_price = 156;  // tag 1110, name TriggerNewPrice, type PRICE
  int32 trigger_order_type = 157;  // tag 1111, name TriggerOrderType, type CHAR
  double trigger_new_qty = 158;  // tag 1112, name TriggerNewQty, type QTY
  string trigger_trading_session_id = 159;  // tag 1113, name TriggerTradingSessionID, type STRING
  string trigger_trading_session_sub_id = 160;  // tag 1114, name TriggerTradingSessionSubID, type STRING
  double spread = 161;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 162;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 163;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 164;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 165;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 166;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 167;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 168;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 169;  // tag 235, name YieldType, type STRING
  double yield = 170;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 171;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 172;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 173;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 174;  // tag 698, name YieldRedemptionPriceType, type INT
  string currency = 175;  // tag 15, name Currency, type CURRENCY
  string compliance_id = 176;  // tag 376, name ComplianceID, type STRING
  bool solicited_flag = 177;  // tag 377, name SolicitedFlag, type BOOLEAN
  string ioi_id = 178;  // tag 23, name IOIID, type STRING
  string quote_id = 179;  // tag 117, name QuoteID, type STRING
  int32 time_in_force = 180;  // tag 59, name TimeInForce, type CHAR
  uint64 effective_time = 181;  // tag 168, name EffectiveTime, type UTCTIMESTAMP
  string expire_date = 182;  // tag 432, name ExpireDate, type LOCALMKTDATE
  uint64 expire_time = 183;  // tag 126, name ExpireTime, type UTCTIMESTAMP
  int32 gt_booking_inst = 184;  // tag 427, name GTBookingInst, type INT
  double commission = 185;  // tag 12, name Commission, type AMT
  int32 comm_type = 186;  // tag 13, name CommType, type CHAR
  string comm_currency = 187;  // tag 479, name CommCurrency, type CURRENCY
  int32 fund_renew_waiv = 188;  // tag 497, name FundRenewWaiv, type CHAR
  int32 order_capacity = 189;  // tag 528, name OrderCapacity, type CHAR
  string order_restrictions = 190;  // tag 529, name OrderRestrictions, type MULTIPLECHARVALUE
  bool pre_trade_anonymity = 191;  // tag 1091, name PreTradeAnonymity, type BOOLEAN
  int32 cust_order_capacity = 192;  // tag 582, name CustOrderCapacity, type INT
  bool forex_req = 193;  // tag 121, name ForexReq, type BOOLEAN
  string settl_currency = 194;  // tag 120, name SettlCurrency, type CURRENCY
  int32 booking_type = 195;  // tag 775, name BookingType, type INT
  string text = 196;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 197;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 198;  // tag 355, name EncodedText, type DATA
  string settl_date2 = 199;  // tag 193, name SettlDate2, type LOCALMKTDATE
  double order_qty2 = 200;  // tag 192, name OrderQty2, type QTY
  double price2 = 201;  // tag 640, name Price2, type PRICE
  int32 position_effect = 202;  // tag 77, name PositionEffect, type CHAR
  int32 covered_or_uncovered = 203;  // tag 203, name CoveredOrUncovered, type INT
  double max_show = 204;  // tag 210, name MaxShow, type QTY
  double peg_offset_value = 205;  // tag 211, name PegOffsetValue, type FLOAT
  int32 peg_price_type = 206;  // tag 1094, name PegPriceType, type INT
  int32 peg_move_type = 207;  // tag 835, name PegMoveType, type INT
  int32 peg_offset_type = 208;  // tag 836, name PegOffsetType, type INT
  int32 peg_limit_type = 209;  // tag 837, name PegLimitType, type INT
  int32 peg_round_direction = 210;  // tag 838, name PegRoundDirection, type INT
  int32 peg_scope = 211;  // tag 840, name PegScope, type INT
  string peg_security_id_source = 212;  // tag 1096, name PegSecurityIDSource, type STRING
  string peg_security_id = 213;  // tag 1097, name PegSecurityID, type STRING
  string peg_symbol = 214;  // tag 1098, name PegSymbol, type STRING
  string peg_security_desc = 215;  // tag 1099, name PegSecurityDesc, type STRING
  int32 discretion_inst = 216;  // tag 388, name DiscretionInst, type CHAR
  double discretion_offset_value = 217;  // tag 389, name DiscretionOffsetValue, type FLOAT
  int32 discretion_move_type = 218;  // tag 841, name DiscretionMoveType, type INT
  int32 discretion_offset_type = 219;  // tag 842, name DiscretionOffsetType, type INT
  int32 discretion_limit_type = 220;  // tag 843, name DiscretionLimitType, type INT
  int32 discretion_round_direction = 221;  // tag 844, name DiscretionRoundDirection, type INT
  int32 discretion_scope = 222;  // tag 846, name DiscretionScope, type INT
  int32 target_strategy = 223;  // tag 847, name TargetStrategy, type INT
  string target_strategy_parameters = 224;  // tag 848, name TargetStrategyParameters, type STRING
  double participation_rate = 225;  // tag 849, name ParticipationRate, type PERCENTAGE
  int32 cancellation_rights = 226;  // tag 480, name CancellationRights, type CHAR
  int32 money_laundering_status = 227;  // tag 481, name MoneyLaunderingStatus, type CHAR
  string regist_id = 228;  // tag 513, name RegistID, type STRING
  string designation = 229;  // tag 494, name Designation, type STRING
  bool manual_order_indicator = 230;  // tag 1028, name ManualOrderIndicator, type BOOLEAN
  bool cust_directed_order = 231;  // tag 1029, name CustDirectedOrder, type BOOLEAN
  string received_dept_id = 232;  // tag 1030, name ReceivedDeptID, type STRING
  string cust_order_handling_inst = 233;  // tag 1031, name CustOrderHandlingInst, type MULTIPLESTRINGVALUE
  int32 order_handling_inst_source = 234;  // tag 1032, name OrderHandlingInstSource, type INT
  string ref_order_id = 235;  // tag 1080, name RefOrderID, type STRING
  int32 ref_order_id_source = 236;  // tag 1081, name RefOrderIDSource, type CHAR

  // GROUPS
  repeated NoPartyIds no_party_ids = 237;
  repeated NoAllocs no_allocs = 238;
  repeated NoTradingSessions no_trading_sessions = 239;
  repeated NoSecurityAltId no_security_alt_id = 240;
  repeated NoEvents no_events = 241;
  repeated NoInstrumentParties no_instrument_parties = 242;
  repeated NoComplexEvents no_complex_events = 243;
  repeated NoUnderlyings no_underlyings = 244;
  repeated NoStipulations no_stipulations = 245;
  repeated NoStrategyParameters no_strategy_parameters = 246;
  repeated NoTrdRegTimestamps no_trd_reg_timestamps = 247;
}

message QuoteRequest {
  message NoRootPartyIds {
    message NoRootPartySubIds {
      message FieldPresence {
        bool root_party_sub_id = 1;
        bool root_party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string root_party_sub_id = 2;  // tag 1121, name RootPartySubID, type STRING
      int32 root_party_sub_id_type = 3;  // tag 1122, name RootPartySubIDType, type INT
    }

    message FieldPresence {
      bool root_party_id = 1;
      bool root_party_id_source = 2;
      bool root_party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string root_party_id = 2;  // tag 1117, name RootPartyID, type STRING
    int32 root_party_id_source = 3;  // tag 1118, name RootPartyIDSource, type CHAR
    int32 root_party_role = 4;  // tag 1119, name RootPartyRole, type INT
  
  // GROUPS
    repeated NoRootPartySubIds no_root_party_sub_ids = 5;
  }

  message NoRelatedSym {
    message NoSecurityAltId {
      message FieldPresence {
        bool security_alt_id = 1;
        bool security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
      string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
    }

    message NoEvents {
      message FieldPresence {
        bool event_type = 1;
        bool event_date = 2;
        bool event_time = 3;
        bool event_px = 4;
        bool event_text = 5;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 event_type = 2;  // tag 865, name EventType, type INT
      string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
      uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
      double event_px = 5;  // tag 867, name EventPx, type PRICE
      string event_text = 6;  // tag 868, name EventText, type STRING
    }

    message NoInstrumentParties {
      message NoInstrumentPartySubIds {
        message FieldPresence {
          bool instrument_party_sub_id = 1;
          bool instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
        int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool instrument_party_id = 1;
        bool instrument_party_id_source = 2;
        bool instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
      int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
      int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
    }

    message NoComplexEvents {
      message NoComplexEventDates {
        message NoComplexEventTimes {
          message FieldPresence {
            bool complex_event_start_time = 1;
            bool complex_event_end_time = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
          uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
        }

        message FieldPresence {
          bool complex_event_start_date = 1;
          bool complex_event_end_date = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
        uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
      
  // GROUPS
        repeated NoComplexEventTimes no_complex_event_times = 4;
      }

      message FieldPresence {
        bool complex_event_type = 1;
        bool complex_opt_payout_amount = 2;
        bool complex_event_price = 3;
        bool complex_event_price_boundary_method = 4;
        bool complex_event_price_boundary_precision = 5;
        bool complex_event_price_time_type = 6;
        bool complex_event_condition = 7;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
      double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
      double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
      int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
      double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
      int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
      int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
    
  // GROUPS
      repeated NoComplexEventDates no_complex_event_dates = 9;
    }

    message NoUnderlyings {
      message NoUnderlyingSecurityAltId {
        message FieldPresence {
          bool underlying_security_alt_id = 1;
          bool underlying_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
        string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
      }

      message NoUnderlyingStips {
        message FieldPresence {
          bool underlying_stip_type = 1;
          bool underlying_stip_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
        string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
      }

      message NoUndlyInstrumentParties {
        message NoUndlyInstrumentPartySubIds {
          message FieldPresence {
            bool underlying_instrument_party_sub_id = 1;
            bool underlying_instrument_party_sub_id_type = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
          int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
        }

        message FieldPresence {
          bool underlying_instrument_party_id = 1;
          bool underlying_instrument_party_id_source = 2;
          bool underlying_instrument_party_role = 3;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
        int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
        int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
      
  // GROUPS
        repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
      }

      message FieldPresence {
        bool underlying_symbol = 1;
        bool underlying_symbol_sfx = 2;
        bool underlying_security_id = 3;
        bool underlying_security_id_source = 4;
        bool underlying_product = 5;
        bool underlying_cfi_code = 6;
        bool underlying_security_type = 7;
        bool underlying_security_sub_type = 8;
        bool underlying_maturity_month_year = 9;
        bool underlying_maturity_date = 10;
        bool underlying_maturity_time = 11;
        bool underlying_coupon_payment_date = 12;
        bool underlying_restructuring_type = 13;
        bool underlying_seniority = 14;
        bool underlying_notional_percentage_outstanding = 15;
        bool underlying_original_notional_percentage_outstanding = 16;
        bool underlying_attachment_point = 17;
        bool underlying_detachment_point = 18;
        bool underlying_issue_date = 19;
        bool underlying_repo_collateral_security_type = 20;
        bool underlying_repurchase_term = 21;
        bool underlying_repurchase_rate = 22;
        bool underlying_factor = 23;
        bool underlying_credit_rating = 24;
        bool underlying_instr_registry = 25;
        bool underlying_country_of_issue = 26;
        bool underlying_state_or_province_of_issue = 27;
        bool underlying_locale_of_issue = 28;
        bool underlying_redemption_date = 29;
        bool underlying_strike_price = 30;
        bool underlying_strike_currency = 31;
        bool underlying_opt_attribute = 32;
        bool underlying_contract_multiplier = 33;
        bool underlying_contract_multiplier_unit = 34;
        bool underlying_flow_schedule_type = 35;
        bool underlying_unit_of_measure = 36;
        bool underlying_unit_of_measure_qty = 37;
        bool underlying_price_unit_of_measure = 38;
        bool underlying_price_unit_of_measure_qty = 39;
        bool underlying_time_unit = 40;
        bool underlying_exercise_style = 41;
        bool underlying_coupon_rate = 42;
        bool underlying_security_exchange = 43;
        bool underlying_issuer = 44;
        bool encoded_underlying_issuer_len = 45;
        bool encoded_underlying_issuer = 46;
        bool underlying_security_desc = 47;
        bool encoded_underlying_security_desc_len = 48;
        bool encoded_underlying_security_desc = 49;
        bool underlying_cp_program = 50;
        bool underlying_cp_reg_type = 51;
        bool underlying_allocation_percent = 52;
        bool underlying_currency = 53;
        bool underlying_qty = 54;
        bool underlying_settlement_type = 55;
        bool underlying_cash_amount = 56;
        bool underlying_cash_type = 57;
        bool underlying_px = 58;
        bool underlying_dirty_price = 59;
        bool underlying_end_price = 60;
        bool underlying_start_value = 61;
        bool underlying_current_value = 62;
        bool underlying_end_value = 63;
        bool underlying_adjusted_quantity = 64;
        bool underlying_fx_rate = 65;
        bool underlying_fx_rate_calc = 66;
        bool underlying_cap_value = 67;
        bool underlying_settl_method = 68;
        bool underlying_put_or_call = 69;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
      string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
      string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
      string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
      int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
      string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
      string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
      string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
      string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
      string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
      string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
      string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
      string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
      string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
      double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
      double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
      double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
      double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
      string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
      string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
      int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
      double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
      double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
      string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
      string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
      string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
      string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
      string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
      string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
      double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
      string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
      int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
      double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
      int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
      int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
      string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
      double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
      string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
      double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
      string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
      int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
      double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
      string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
      string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
      int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
      string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
      string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
      int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
      string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
      string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
      string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
      double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
      string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
      double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
      int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
      double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
      string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
      double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
      double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
      double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
      double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
      double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
      double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
      double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
      double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
      int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
      double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
      string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
      int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
    
  // GROUPS
      repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
      repeated NoUnderlyingStips no_underlying_stips = 72;
      repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
    }

    message NoRateSources {
      message FieldPresence {
        bool rate_source = 1;
        bool rate_source_type = 2;
        bool reference_page = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 rate_source = 2;  // tag 1446, name RateSource, type INT
      int32 rate_source_type = 3;  // tag 1447, name RateSourceType, type INT
      string reference_page = 4;  // tag 1448, name ReferencePage, type STRING
    }

    message NoStipulations {
      message FieldPresence {
        bool stipulation_type = 1;
        bool stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
      string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
    }

    message NoLegs {
      message NoLegSecurityAltId {
        message FieldPresence {
          bool leg_security_alt_id = 1;
          bool leg_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
        string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
      }

      message NoLegStipulations {
        message FieldPresence {
          bool leg_stipulation_type = 1;
          bool leg_stipulation_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
        string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
      }

      message NoNestedPartyIds {
        message NoNestedPartySubIds {
          message FieldPresence {
            bool nested_party_sub_id = 1;
            bool nested_party_sub_id_type = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
          int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
        }

        message FieldPresence {
          bool nested_party_id = 1;
          bool nested_party_id_source = 2;
          bool nested_party_role = 3;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
        int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
        int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
      
  // GROUPS
        repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
      }

      message FieldPresence {
        bool leg_symbol = 1;
        bool leg_symbol_sfx = 2;
        bool leg_security_id = 3;
        bool leg_security_id_source = 4;
        bool leg_product = 5;
        bool leg_cfi_code = 6;
        bool leg_security_type = 7;
        bool leg_security_sub_type = 8;
        bool leg_maturity_month_year = 9;
        bool leg_maturity_date = 10;
        bool leg_maturity_time = 11;
        bool leg_coupon_payment_date = 12;
        bool leg_issue_date = 13;
        bool leg_repo_collateral_security_type = 14;
        bool leg_repurchase_term = 15;
        bool leg_repurchase_rate = 16;
        bool leg_factor = 17;
        bool leg_credit_rating = 18;
        bool leg_instr_registry = 19;
        bool leg_country_of_issue = 20;
        bool leg_state_or_province_of_issue = 21;
        bool leg_locale_of_issue = 22;
        bool leg_redemption_date = 23;
        bool leg_strike_price = 24;
        bool leg_strike_currency = 25;
        bool leg_opt_attribute = 26;
        bool leg_contract_multiplier = 27;
        bool leg_contract_multiplier_unit = 28;
        bool leg_flow_schedule_type = 29;
        bool leg_unit_of_measure = 30;
        bool leg_unit_of_measure_qty = 31;
        bool leg_price_unit_of_measure = 32;
        bool leg_price_unit_of_measure_qty = 33;
        bool leg_time_unit = 34;
        bool leg_exercise_style = 35;
        bool leg_coupon_rate = 36;
        bool leg_security_exchange = 37;
        bool leg_issuer = 38;
        bool encoded_leg_issuer_len = 39;
        bool encoded_leg_issuer = 40;
        bool leg_security_desc = 41;
        bool encoded_leg_security_desc_len = 42;
        bool encoded_leg_security_desc = 43;
        bool leg_ratio_qty = 44;
        bool leg_side = 45;
        bool leg_currency = 46;
        bool leg_pool = 47;
        bool leg_dated_date = 48;
        bool leg_contract_settl_month = 49;
        bool leg_interest_accrual_date = 50;
        bool leg_put_or_call = 51;
        bool leg_option_ratio = 52;
        bool leg_price = 53;
        bool leg_qty = 54;
        bool leg_order_qty = 55;
        bool leg_swap_type = 56;
        bool leg_settl_type = 57;
        bool leg_settl_date = 58;
        bool leg_benchmark_curve_currency = 59;
        bool leg_benchmark_curve_name = 60;
        bool leg_benchmark_curve_point = 61;
        bool leg_benchmark_price = 62;
        bool leg_benchmark_price_type = 63;
        bool leg_ref_id = 64;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
      string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
      string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
      string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
      int32 leg_product = 6;  // tag 607, name LegProduct, type INT
      string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
      string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
      string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
      string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
      string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
      string leg_maturity_time = 12;  // tag 1212, name LegMaturityTime, type TZTIMEONLY
      string leg_coupon_payment_date = 13;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
      string leg_issue_date = 14;  // tag 249, name LegIssueDate, type LOCALMKTDATE
      string leg_repo_collateral_security_type = 15;  // tag 250, name LegRepoCollateralSecurityType, type STRING
      int32 leg_repurchase_term = 16;  // tag 251, name LegRepurchaseTerm, type INT
      double leg_repurchase_rate = 17;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
      double leg_factor = 18;  // tag 253, name LegFactor, type FLOAT
      string leg_credit_rating = 19;  // tag 257, name LegCreditRating, type STRING
      string leg_instr_registry = 20;  // tag 599, name LegInstrRegistry, type STRING
      string leg_country_of_issue = 21;  // tag 596, name LegCountryOfIssue, type COUNTRY
      string leg_state_or_province_of_issue = 22;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
      string leg_locale_of_issue = 23;  // tag 598, name LegLocaleOfIssue, type STRING
      string leg_redemption_date = 24;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
      double leg_strike_price = 25;  // tag 612, name LegStrikePrice, type PRICE
      string leg_strike_currency = 26;  // tag 942, name LegStrikeCurrency, type CURRENCY
      int32 leg_opt_attribute = 27;  // tag 613, name LegOptAttribute, type CHAR
      double leg_contract_multiplier = 28;  // tag 614, name LegContractMultiplier, type FLOAT
      int32 leg_contract_multiplier_unit = 29;  // tag 1436, name LegContractMultiplierUnit, type INT
      int32 leg_flow_schedule_type = 30;  // tag 1440, name LegFlowScheduleType, type INT
      string leg_unit_of_measure = 31;  // tag 999, name LegUnitOfMeasure, type STRING
      double leg_unit_of_measure_qty = 32;  // tag 1224, name LegUnitOfMeasureQty, type QTY
      string leg_price_unit_of_measure = 33;  // tag 1421, name LegPriceUnitOfMeasure, type STRING
      double leg_price_unit_of_measure_qty = 34;  // tag 1422, name LegPriceUnitOfMeasureQty, type QTY
      string leg_time_unit = 35;  // tag 1001, name LegTimeUnit, type STRING
      int32 leg_exercise_style = 36;  // tag 1420, name LegExerciseStyle, type INT
      double leg_coupon_rate = 37;  // tag 615, name LegCouponRate, type PERCENTAGE
      string leg_security_exchange = 38;  // tag 616, name LegSecurityExchange, type EXCHANGE
      string leg_issuer = 39;  // tag 617, name LegIssuer, type STRING
      int32 encoded_leg_issuer_len = 40;  // tag 618, name EncodedLegIssuerLen, type LENGTH
      string encoded_leg_issuer = 41;  // tag 619, name EncodedLegIssuer, type DATA
      string leg_security_desc = 42;  // tag 620, name LegSecurityDesc, type STRING
      int32 encoded_leg_security_desc_len = 43;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
      string encoded_leg_security_desc = 44;  // tag 622, name EncodedLegSecurityDesc, type DATA
      double leg_ratio_qty = 45;  // tag 623, name LegRatioQty, type FLOAT
      int32 leg_side = 46;  // tag 624, name LegSide, type CHAR
      string leg_currency = 47;  // tag 556, name LegCurrency, type CURRENCY
      string leg_pool = 48;  // tag 740, name LegPool, type STRING
      string leg_dated_date = 49;  // tag 739, name LegDatedDate, type LOCALMKTDATE
      string leg_contract_settl_month = 50;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
      string leg_interest_accrual_date = 51;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
      int32 leg_put_or_call = 52;  // tag 1358, name LegPutOrCall, type INT
      double leg_option_ratio = 53;  // tag 1017, name LegOptionRatio, type FLOAT
      double leg_price = 54;  // tag 566, name LegPrice, type PRICE
      double leg_qty = 55;  // tag 687, name LegQty, type QTY
      double leg_order_qty = 56;  // tag 685, name LegOrderQty, type QTY
      int32 leg_swap_type = 57;  // tag 690, name LegSwapType, type INT
      int32 leg_settl_type = 58;  // tag 587, name LegSettlType, type CHAR
      string leg_settl_date = 59;  // tag 588, name LegSettlDate, type LOCALMKTDATE
      string leg_benchmark_curve_currency = 60;  // tag 676, name LegBenchmarkCurveCurrency, type CURRENCY
      string leg_benchmark_curve_name = 61;  // tag 677, name LegBenchmarkCurveName, type STRING
      string leg_benchmark_curve_point = 62;  // tag 678, name LegBenchmarkCurvePoint, type STRING
      double leg_benchmark_price = 63;  // tag 679, name LegBenchmarkPrice, type PRICE
      int32 leg_benchmark_price_type = 64;  // tag 680, name LegBenchmarkPriceType, type INT
      string leg_ref_id = 65;  // tag 654, name LegRefID, type STRING
    
  // GROUPS
      repeated NoLegSecurityAltId no_leg_security_alt_id = 66;
      repeated NoLegStipulations no_leg_stipulations = 67;
      repeated NoNestedPartyIds no_nested_party_ids = 68;
    }

    message NoQuoteQualifiers {
      message FieldPresence {
        bool quote_qualifier = 1;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 quote_qualifier = 2;  // tag 695, name QuoteQualifier, type CHAR
    }

    message NoPartyIds {
      message NoPartySubIds {
        message FieldPresence {
          bool party_sub_id = 1;
          bool party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
        int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
      }

      message FieldPresence {
        bool party_id = 1;
        bool party_id_source = 2;
        bool party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_id = 2;  // tag 448, name PartyID, type STRING
      int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
      int32 party_role = 4;  // tag 452, name PartyRole, type INT
    
  // GROUPS
      repeated NoPartySubIds no_party_sub_ids = 5;
    }

    message FieldPresence {
      bool symbol = 1;
      bool symbol_sfx = 2;
      bool security_id = 3;
      bool security_id_source = 4;
      bool product = 5;
      bool product_complex = 6;
      bool security_group = 7;
      bool cfi_code = 8;
      bool security_type = 9;
      bool security_sub_type = 10;
      bool maturity_month_year = 11;
      bool maturity_date = 12;
      bool maturity_time = 13;
      bool settle_on_open_flag = 14;
      bool instrmt_assignment_method = 15;
      bool security_status = 16;
      bool coupon_payment_date = 17;
      bool restructuring_type = 18;
      bool seniority = 19;
      bool notional_percentage_outstanding = 20;
      bool original_notional_percentage_outstanding = 21;
      bool attachment_point = 22;
      bool detachment_point = 23;
      bool issue_date = 24;
      bool repo_collateral_security_type = 25;
      bool repurchase_term = 26;
      bool repurchase_rate = 27;
      bool factor = 28;
      bool credit_rating = 29;
      bool instr_registry = 30;
      bool country_of_issue = 31;
      bool state_or_province_of_issue = 32;
      bool locale_of_issue = 33;
      bool redemption_date = 34;
      bool strike_price = 35;
      bool strike_currency = 36;
      bool strike_multiplier = 37;
      bool strike_value = 38;
      bool strike_price_determination_method = 39;
      bool strike_price_boundary_method = 40;
      bool strike_price_boundary_precision = 41;
      bool underlying_price_determination_method = 42;
      bool opt_attribute = 43;
      bool contract_multiplier = 44;
      bool contract_multiplier_unit = 45;
      bool flow_schedule_type = 46;
      bool min_price_increment = 47;
      bool min_price_increment_amount = 48;
      bool unit_of_measure = 49;
      bool unit_of_measure_qty = 50;
      bool price_unit_of_measure = 51;
      bool price_unit_of_measure_qty = 52;
      bool settl_method = 53;
      bool exercise_style = 54;
      bool opt_payout_type = 55;
      bool opt_payout_amount = 56;
      bool price_quote_method = 57;
      bool valuation_method = 58;
      bool list_method = 59;
      bool cap_price = 60;
      bool floor_price = 61;
      bool put_or_call = 62;
      bool flexible_indicator = 63;
      bool flex_product_eligibility_indicator = 64;
      bool time_unit = 65;
      bool coupon_rate = 66;
      bool security_exchange = 67;
      bool position_limit = 68;
      bool nt_position_limit = 69;
      bool issuer = 70;
      bool encoded_issuer_len = 71;
      bool encoded_issuer = 72;
      bool security_desc = 73;
      bool encoded_security_desc_len = 74;
      bool encoded_security_desc = 75;
      bool security_xml_len = 76;
      bool security_xml_data = 77;
      bool security_xml_schema = 78;
      bool pool = 79;
      bool contract_settl_month = 80;
      bool cp_program = 81;
      bool cp_reg_type = 82;
      bool dated_date = 83;
      bool interest_accrual_date = 84;
      bool agreement_desc = 85;
      bool agreement_id = 86;
      bool agreement_date = 87;
      bool agreement_currency = 88;
      bool termination_type = 89;
      bool start_date = 90;
      bool end_date = 91;
      bool delivery_type = 92;
      bool margin_ratio = 93;
      bool prev_close_px = 94;
      bool quote_request_type = 95;
      bool quote_type = 96;
      bool trading_session_id = 97;
      bool trading_session_sub_id = 98;
      bool trade_origination_date = 99;
      bool side = 100;
      bool qty_type = 101;
      bool order_qty = 102;
      bool cash_order_qty = 103;
      bool order_percent = 104;
      bool rounding_direction = 105;
      bool rounding_modulus = 106;
      bool min_qty = 107;
      bool settl_type = 108;
      bool settl_date = 109;
      bool settl_date2 = 110;
      bool order_qty2 = 111;
      bool currency = 112;
      bool settl_currency = 113;
      bool account = 114;
      bool acct_id_source = 115;
      bool account_type = 116;
      bool quote_price_type = 117;
      bool ord_type = 118;
      bool valid_until_time = 119;
      bool expire_time = 120;
      bool transact_time = 121;
      bool spread = 122;
      bool benchmark_curve_currency = 123;
      bool benchmark_curve_name = 124;
      bool benchmark_curve_point = 125;
      bool benchmark_price = 126;
      bool benchmark_price_type = 127;
      bool benchmark_security_id = 128;
      bool benchmark_security_id_source = 129;
      bool price_type = 130;
      bool price = 131;
      bool price2 = 132;
      bool yield_type = 133;
      bool yield = 134;
      bool yield_calc_date = 135;
      bool yield_redemption_date = 136;
      bool yield_redemption_price = 137;
      bool yield_redemption_price_type = 138;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string symbol = 2;  // tag 55, name Symbol, type STRING
    string symbol_sfx = 3;  // tag 65, name SymbolSfx, type STRING
    string security_id = 4;  // tag 48, name SecurityID, type STRING
    string security_id_source = 5;  // tag 22, name SecurityIDSource, type STRING
    int32 product = 6;  // tag 460, name Product, type INT
    string product_complex = 7;  // tag 1227, name ProductComplex, type STRING
    string security_group = 8;  // tag 1151, name SecurityGroup, type STRING
    string cfi_code = 9;  // tag 461, name CFICode, type STRING
    string security_type = 10;  // tag 167, name SecurityType, type STRING
    string security_sub_type = 11;  // tag 762, name SecuritySubType, type STRING
    string maturity_month_year = 12;  // tag 200, name MaturityMonthYear, type MONTHYEAR
    string maturity_date = 13;  // tag 541, name MaturityDate, type LOCALMKTDATE
    string maturity_time = 14;  // tag 1079, name MaturityTime, type TZTIMEONLY
    string settle_on_open_flag = 15;  // tag 966, name SettleOnOpenFlag, type STRING
    int32 instrmt_assignment_method = 16;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
    string security_status = 17;  // tag 965, name SecurityStatus, type STRING
    string coupon_payment_date = 18;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
    string restructuring_type = 19;  // tag 1449, name RestructuringType, type STRING
    string seniority = 20;  // tag 1450, name Seniority, type STRING
    double notional_percentage_outstanding = 21;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
    double original_notional_percentage_outstanding = 22;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
    double attachment_point = 23;  // tag 1457, name AttachmentPoint, type PERCENTAGE
    double detachment_point = 24;  // tag 1458, name DetachmentPoint, type PERCENTAGE
    string issue_date = 25;  // tag 225, name IssueDate, type LOCALMKTDATE
    string repo_collateral_security_type = 26;  // tag 239, name RepoCollateralSecurityType, type STRING
    int32 repurchase_term = 27;  // tag 226, name RepurchaseTerm, type INT
    double repurchase_rate = 28;  // tag 227, name RepurchaseRate, type PERCENTAGE
    double factor = 29;  // tag 228, name Factor, type FLOAT
    string credit_rating = 30;  // tag 255, name CreditRating, type STRING
    string instr_registry = 31;  // tag 543, name InstrRegistry, type STRING
    string country_of_issue = 32;  // tag 470, name CountryOfIssue, type COUNTRY
    string state_or_province_of_issue = 33;  // tag 471, name StateOrProvinceOfIssue, type STRING
    string locale_of_issue = 34;  // tag 472, name LocaleOfIssue, type STRING
    string redemption_date = 35;  // tag 240, name RedemptionDate, type LOCALMKTDATE
    double strike_price = 36;  // tag 202, name StrikePrice, type PRICE
    string strike_currency = 37;  // tag 947, name StrikeCurrency, type CURRENCY
    double strike_multiplier = 38;  // tag 967, name StrikeMultiplier, type FLOAT
    double strike_value = 39;  // tag 968, name StrikeValue, type FLOAT
    int32 strike_price_determination_method = 40;  // tag 1478, name StrikePriceDeterminationMethod, type INT
    int32 strike_price_boundary_method = 41;  // tag 1479, name StrikePriceBoundaryMethod, type INT
    double strike_price_boundary_precision = 42;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
    int32 underlying_price_determination_method = 43;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
    int32 opt_attribute = 44;  // tag 206, name OptAttribute, type CHAR
    double contract_multiplier = 45;  // tag 231, name ContractMultiplier, type FLOAT
    int32 contract_multiplier_unit = 46;  // tag 1435, name ContractMultiplierUnit, type INT
    int32 flow_schedule_type = 47;  // tag 1439, name FlowScheduleType, type INT
    double min_price_increment = 48;  // tag 969, name MinPriceIncrement, type FLOAT
    double min_price_increment_amount = 49;  // tag 1146, name MinPriceIncrementAmount, type AMT
    string unit_of_measure = 50;  // tag 996, name UnitOfMeasure, type STRING
    double unit_of_measure_qty = 51;  // tag 1147, name UnitOfMeasureQty, type QTY
    string price_unit_of_measure = 52;  // tag 1191, name PriceUnitOfMeasure, type STRING
    double price_unit_of_measure_qty = 53;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
    int32 settl_method = 54;  // tag 1193, name SettlMethod, type CHAR
    int32 exercise_style = 55;  // tag 1194, name ExerciseStyle, type INT
    int32 opt_payout_type = 56;  // tag 1482, name OptPayoutType, type INT
    double opt_payout_amount = 57;  // tag 1195, name OptPayoutAmount, type AMT
    string price_quote_method = 58;  // tag 1196, name PriceQuoteMethod, type STRING
    string valuation_method = 59;  // tag 1197, name ValuationMethod, type STRING
    int32 list_method = 60;  // tag 1198, name ListMethod, type INT
    double cap_price = 61;  // tag 1199, name CapPrice, type PRICE
    double floor_price = 62;  // tag 1200, name FloorPrice, type PRICE
    int32 put_or_call = 63;  // tag 201, name PutOrCall, type INT
    bool flexible_indicator = 64;  // tag 1244, name FlexibleIndicator, type BOOLEAN
    bool flex_product_eligibility_indicator = 65;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
    string time_unit = 66;  // tag 997, name TimeUnit, type STRING
    double coupon_rate = 67;  // tag 223, name CouponRate, type PERCENTAGE
    string security_exchange = 68;  // tag 207, name SecurityExchange, type EXCHANGE
    int32 position_limit = 69;  // tag 970, name PositionLimit, type INT
    int32 nt_position_limit = 70;  // tag 971, name NTPositionLimit, type INT
    string issuer = 71;  // tag 106, name Issuer, type STRING
    int32 encoded_issuer_len = 72;  // tag 348, name EncodedIssuerLen, type LENGTH
    string encoded_issuer = 73;  // tag 349, name EncodedIssuer, type DATA
    string security_desc = 74;  // tag 107, name SecurityDesc, type STRING
    int32 encoded_security_desc_len = 75;  // tag 350, name EncodedSecurityDescLen, type LENGTH
    string encoded_security_desc = 76;  // tag 351, name EncodedSecurityDesc, type DATA
    int32 security_xml_len = 77;  // tag 1184, name SecurityXMLLen, type LENGTH
    string security_xml_data = 78;  // tag 1185, name SecurityXMLData, type XMLDATA
    string security_xml_schema = 79;  // tag 1186, name SecurityXMLSchema, type STRING
    string pool = 80;  // tag 691, name Pool, type STRING
    string contract_settl_month = 81;  // tag 667, name ContractSettlMonth, type MONTHYEAR
    int32 cp_program = 82;  // tag 875, name CPProgram, type INT
    string cp_reg_type = 83;  // tag 876, name CPRegType, type STRING
    string dated_date = 84;  // tag 873, name DatedDate, type LOCALMKTDATE
    string interest_accrual_date = 85;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
    string agreement_desc = 86;  // tag 913, name AgreementDesc, type STRING
    string agreement_id = 87;  // tag 914, name AgreementID, type STRING
    string agreement_date = 88;  // tag 915, name AgreementDate, type LOCALMKTDATE
    string agreement_currency = 89;  // tag 918, name AgreementCurrency, type CURRENCY
    int32 termination_type = 90;  // tag 788, name TerminationType, type INT
    string start_date = 91;  // tag 916, name StartDate, type LOCALMKTDATE
    string end_date = 92;  // tag 917, name EndDate, type LOCALMKTDATE
    int32 delivery_type = 93;  // tag 919, name DeliveryType, type INT
    double margin_ratio = 94;  // tag 898, name MarginRatio, type PERCENTAGE
    double prev_close_px = 95;  // tag 140, name PrevClosePx, type PRICE
    int32 quote_request_type = 96;  // tag 303, name QuoteRequestType, type INT
    int32 quote_type = 97;  // tag 537, name QuoteType, type INT
    string trading_session_id = 98;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 99;  // tag 625, name TradingSessionSubID, type STRING
    string trade_origination_date = 100;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
    int32 side = 101;  // tag 54, name Side, type CHAR
    int32 qty_type = 102;  // tag 854, name QtyType, type INT
    double order_qty = 103;  // tag 38, name OrderQty, type QTY
    double cash_order_qty = 104;  // tag 152, name CashOrderQty, type QTY
    double order_percent = 105;  // tag 516, name OrderPercent, type PERCENTAGE
    int32 rounding_direction = 106;  // tag 468, name RoundingDirection, type CHAR
    double rounding_modulus = 107;  // tag 469, name RoundingModulus, type FLOAT
    double min_qty = 108;  // tag 110, name MinQty, type QTY
    string settl_type = 109;  // tag 63, name SettlType, type STRING
    string settl_date = 110;  // tag 64, name SettlDate, type LOCALMKTDATE
    string settl_date2 = 111;  // tag 193, name SettlDate2, type LOCALMKTDATE
    double order_qty2 = 112;  // tag 192, name OrderQty2, type QTY
    string currency = 113;  // tag 15, name Currency, type CURRENCY
    string settl_currency = 114;  // tag 120, name SettlCurrency, type CURRENCY
    string account = 115;  // tag 1, name Account, type STRING
    int32 acct_id_source = 116;  // tag 660, name AcctIDSource, type INT
    int32 account_type = 117;  // tag 581, name AccountType, type INT
    int32 quote_price_type = 118;  // tag 692, name QuotePriceType, type INT
    int32 ord_type = 119;  // tag 40, name OrdType, type CHAR
    uint64 valid_until_time = 120;  // tag 62, name ValidUntilTime, type UTCTIMESTAMP
    uint64 expire_time = 121;  // tag 126, name ExpireTime, type UTCTIMESTAMP
    uint64 transact_time = 122;  // tag 60, name TransactTime, type UTCTIMESTAMP
    double spread = 123;  // tag 218, name Spread, type PRICEOFFSET
    string benchmark_curve_currency = 124;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
    string benchmark_curve_name = 125;  // tag 221, name BenchmarkCurveName, type STRING
    string benchmark_curve_point = 126;  // tag 222, name BenchmarkCurvePoint, type STRING
    double benchmark_price = 127;  // tag 662, name BenchmarkPrice, type PRICE
    int32 benchmark_price_type = 128;  // tag 663, name BenchmarkPriceType, type INT
    string benchmark_security_id = 129;  // tag 699, name BenchmarkSecurityID, type STRING
    string benchmark_security_id_source = 130;  // tag 761, name BenchmarkSecurityIDSource, type STRING
    int32 price_type = 131;  // tag 423, name PriceType, type INT
    double price = 132;  // tag 44, name Price, type PRICE
    double price2 = 133;  // tag 640, name Price2, type PRICE
    string yield_type = 134;  // tag 235, name YieldType, type STRING
    double yield = 135;  // tag 236, name Yield, type PERCENTAGE
    string yield_calc_date = 136;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
    string yield_redemption_date = 137;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
    double yield_redemption_price = 138;  // tag 697, name YieldRedemptionPrice, type PRICE
    int32 yield_redemption_price_type = 139;  // tag 698, name YieldRedemptionPriceType, type INT
  
  // GROUPS
    repeated NoSecurityAltId no_security_alt_id = 140;
    repeated NoEvents no_events = 141;
    repeated NoInstrumentParties no_instrument_parties = 142;
    repeated NoComplexEvents no_complex_events = 143;
    repeated NoUnderlyings no_underlyings = 144;
    repeated NoRateSources no_rate_sources = 145;
    repeated NoStipulations no_stipulations = 146;
    repeated NoLegs no_legs = 147;
    repeated NoQuoteQualifiers no_quote_qualifiers = 148;
    repeated NoPartyIds no_party_ids = 149;
  }

  message FieldPresence {
    bool quote_req_id = 1;
    bool rfq_req_id = 2;
    bool cl_ord_id = 3;
    bool booking_type = 4;
    bool order_capacity = 5;
    bool order_restrictions = 6;
    bool private_quote = 7;
    bool respondent_type = 8;
    bool pre_trade_anonymity = 9;
    bool text = 10;
    bool encoded_text_len = 11;
    bool encoded_text = 12;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string quote_req_id = 5;  // tag 131, name QuoteReqID, type STRING
  string rfq_req_id = 6;  // tag 644, name RFQReqID, type STRING
  string cl_ord_id = 7;  // tag 11, name ClOrdID, type STRING
  int32 booking_type = 8;  // tag 775, name BookingType, type INT
  int32 order_capacity = 9;  // tag 528, name OrderCapacity, type CHAR
  string order_restrictions = 10;  // tag 529, name OrderRestrictions, type MULTIPLECHARVALUE
  bool private_quote = 11;  // tag 1171, name PrivateQuote, type BOOLEAN
  int32 respondent_type = 12;  // tag 1172, name RespondentType, type INT
  bool pre_trade_anonymity = 13;  // tag 1091, name PreTradeAnonymity, type BOOLEAN
  string text = 14;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 15;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 16;  // tag 355, name EncodedText, type DATA

  // GROUPS
  repeated NoRootPartyIds no_root_party_ids = 17;
  repeated NoRelatedSym no_related_sym = 18;
}

message OrderCancelReplaceRequest {
  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoAllocs {
    message NoNestedPartyIds {
      message NoNestedPartySubIds {
        message FieldPresence {
          bool nested_party_sub_id = 1;
          bool nested_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
        int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
      }

      message FieldPresence {
        bool nested_party_id = 1;
        bool nested_party_id_source = 2;
        bool nested_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
      int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
      int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
    
  // GROUPS
      repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
    }

    message FieldPresence {
      bool alloc_account = 1;
      bool alloc_acct_id_source = 2;
      bool alloc_settl_currency = 3;
      bool individual_alloc_id = 4;
      bool alloc_qty = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string alloc_account = 2;  // tag 79, name AllocAccount, type STRING
    int32 alloc_acct_id_source = 3;  // tag 661, name AllocAcctIDSource, type INT
    string alloc_settl_currency = 4;  // tag 736, name AllocSettlCurrency, type CURRENCY
    string individual_alloc_id = 5;  // tag 467, name IndividualAllocID, type STRING
    double alloc_qty = 6;  // tag 80, name AllocQty, type QTY
  
  // GROUPS
    repeated NoNestedPartyIds no_nested_party_ids = 7;
  }

  message NoTradingSessions {
    message FieldPresence {
      bool trading_session_id = 1;
      bool trading_session_sub_id = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string trading_session_id = 2;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 3;  // tag 625, name TradingSessionSubID, type STRING
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_time = 3;
      bool event_px = 4;
      bool event_text = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
    double event_px = 5;  // tag 867, name EventPx, type PRICE
    string event_text = 6;  // tag 868, name EventText, type STRING
  }

  message NoInstrumentParties {
    message NoInstrumentPartySubIds {
      message FieldPresence {
        bool instrument_party_sub_id = 1;
        bool instrument_party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
      int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
    }

    message FieldPresence {
      bool instrument_party_id = 1;
      bool instrument_party_id_source = 2;
      bool instrument_party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
    int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
    int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
  
  // GROUPS
    repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
  }

  message NoComplexEvents {
    message NoComplexEventDates {
      message NoComplexEventTimes {
        message FieldPresence {
          bool complex_event_start_time = 1;
          bool complex_event_end_time = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
        uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
      }

      message FieldPresence {
        bool complex_event_start_date = 1;
        bool complex_event_end_date = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
      uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
    
  // GROUPS
      repeated NoComplexEventTimes no_complex_event_times = 4;
    }

    message FieldPresence {
      bool complex_event_type = 1;
      bool complex_opt_payout_amount = 2;
      bool complex_event_price = 3;
      bool complex_event_price_boundary_method = 4;
      bool complex_event_price_boundary_precision = 5;
      bool complex_event_price_time_type = 6;
      bool complex_event_condition = 7;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
    double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
    double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
    int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
    double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
    int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
    int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
  
  // GROUPS
    repeated NoComplexEventDates no_complex_event_dates = 9;
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message NoUndlyInstrumentParties {
      message NoUndlyInstrumentPartySubIds {
        message FieldPresence {
          bool underlying_instrument_party_sub_id = 1;
          bool underlying_instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
        int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool underlying_instrument_party_id = 1;
        bool underlying_instrument_party_id_source = 2;
        bool underlying_instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
      int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
      int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_maturity_time = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_restructuring_type = 13;
      bool underlying_seniority = 14;
      bool underlying_notional_percentage_outstanding = 15;
      bool underlying_original_notional_percentage_outstanding = 16;
      bool underlying_attachment_point = 17;
      bool underlying_detachment_point = 18;
      bool underlying_issue_date = 19;
      bool underlying_repo_collateral_security_type = 20;
      bool underlying_repurchase_term = 21;
      bool underlying_repurchase_rate = 22;
      bool underlying_factor = 23;
      bool underlying_credit_rating = 24;
      bool underlying_instr_registry = 25;
      bool underlying_country_of_issue = 26;
      bool underlying_state_or_province_of_issue = 27;
      bool underlying_locale_of_issue = 28;
      bool underlying_redemption_date = 29;
      bool underlying_strike_price = 30;
      bool underlying_strike_currency = 31;
      bool underlying_opt_attribute = 32;
      bool underlying_contract_multiplier = 33;
      bool underlying_contract_multiplier_unit = 34;
      bool underlying_flow_schedule_type = 35;
      bool underlying_unit_of_measure = 36;
      bool underlying_unit_of_measure_qty = 37;
      bool underlying_price_unit_of_measure = 38;
      bool underlying_price_unit_of_measure_qty = 39;
      bool underlying_time_unit = 40;
      bool underlying_exercise_style = 41;
      bool underlying_coupon_rate = 42;
      bool underlying_security_exchange = 43;
      bool underlying_issuer = 44;
      bool encoded_underlying_issuer_len = 45;
      bool encoded_underlying_issuer = 46;
      bool underlying_security_desc = 47;
      bool encoded_underlying_security_desc_len = 48;
      bool encoded_underlying_security_desc = 49;
      bool underlying_cp_program = 50;
      bool underlying_cp_reg_type = 51;
      bool underlying_allocation_percent = 52;
      bool underlying_currency = 53;
      bool underlying_qty = 54;
      bool underlying_settlement_type = 55;
      bool underlying_cash_amount = 56;
      bool underlying_cash_type = 57;
      bool underlying_px = 58;
      bool underlying_dirty_price = 59;
      bool underlying_end_price = 60;
      bool underlying_start_value = 61;
      bool underlying_current_value = 62;
      bool underlying_end_value = 63;
      bool underlying_adjusted_quantity = 64;
      bool underlying_fx_rate = 65;
      bool underlying_fx_rate_calc = 66;
      bool underlying_cap_value = 67;
      bool underlying_settl_method = 68;
      bool underlying_put_or_call = 69;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
    string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
    double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
    double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
    string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
    int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
    string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
    double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
    string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
    double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
    string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
    int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
    double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
    double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
    string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
    int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
    double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
    string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
    double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
    double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
    double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
    int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
    double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
    string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
    int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
    repeated NoUnderlyingStips no_underlying_stips = 72;
    repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
  }

  message NoStrategyParameters {
    message FieldPresence {
      bool strategy_parameter_name = 1;
      bool strategy_parameter_type = 2;
      bool strategy_parameter_value = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string strategy_parameter_name = 2;  // tag 958, name StrategyParameterName, type STRING
    int32 strategy_parameter_type = 3;  // tag 959, name StrategyParameterType, type INT
    string strategy_parameter_value = 4;  // tag 960, name StrategyParameterValue, type STRING
  }

  message NoTrdRegTimestamps {
    message FieldPresence {
      bool trd_reg_timestamp = 1;
      bool trd_reg_timestamp_type = 2;
      bool trd_reg_timestamp_origin = 3;
      bool desk_type = 4;
      bool desk_type_source = 5;
      bool desk_order_handling_inst = 6;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    uint64 trd_reg_timestamp = 2;  // tag 769, name TrdRegTimestamp, type UTCTIMESTAMP
    int32 trd_reg_timestamp_type = 3;  // tag 770, name TrdRegTimestampType, type INT
    string trd_reg_timestamp_origin = 4;  // tag 771, name TrdRegTimestampOrigin, type STRING
    string desk_type = 5;  // tag 1033, name DeskType, type STRING
    int32 desk_type_source = 6;  // tag 1034, name DeskTypeSource, type INT
    string desk_order_handling_inst = 7;  // tag 1035, name DeskOrderHandlingInst, type MULTIPLESTRINGVALUE
  }

  message FieldPresence {
    bool order_id = 1;
    bool trade_origination_date = 2;
    bool trade_date = 3;
    bool orig_cl_ord_id = 4;
    bool cl_ord_id = 5;
    bool secondary_cl_ord_id = 6;
    bool cl_ord_link_id = 7;
    bool list_id = 8;
    bool orig_ord_mod_time = 9;
    bool account = 10;
    bool acct_id_source = 11;
    bool account_type = 12;
    bool day_booking_inst = 13;
    bool booking_unit = 14;
    bool prealloc_method = 15;
    bool alloc_id = 16;
    bool settl_type = 17;
    bool settl_date = 18;
    bool cash_margin = 19;
    bool clearing_fee_indicator = 20;
    bool handl_inst = 21;
    bool exec_inst = 22;
    bool min_qty = 23;
    bool match_increment = 24;
    bool max_price_levels = 25;
    bool display_qty = 26;
    bool secondary_display_qty = 27;
    bool display_when = 28;
    bool display_method = 29;
    bool display_low_qty = 30;
    bool display_high_qty = 31;
    bool display_min_incr = 32;
    bool refresh_qty = 33;
    bool max_floor = 34;
    bool ex_destination = 35;
    bool ex_destination_id_source = 36;
    bool symbol = 37;
    bool symbol_sfx = 38;
    bool security_id = 39;
    bool security_id_source = 40;
    bool product = 41;
    bool product_complex = 42;
    bool security_group = 43;
    bool cfi_code = 44;
    bool security_type = 45;
    bool security_sub_type = 46;
    bool maturity_month_year = 47;
    bool maturity_date = 48;
    bool maturity_time = 49;
    bool settle_on_open_flag = 50;
    bool instrmt_assignment_method = 51;
    bool security_status = 52;
    bool coupon_payment_date = 53;
    bool restructuring_type = 54;
    bool seniority = 55;
    bool notional_percentage_outstanding = 56;
    bool original_notional_percentage_outstanding = 57;
    bool attachment_point = 58;
    bool detachment_point = 59;
    bool issue_date = 60;
    bool repo_collateral_security_type = 61;
    bool repurchase_term = 62;
    bool repurchase_rate = 63;
    bool factor = 64;
    bool credit_rating = 65;
    bool instr_registry = 66;
    bool country_of_issue = 67;
    bool state_or_province_of_issue = 68;
    bool locale_of_issue = 69;
    bool redemption_date = 70;
    bool strike_price = 71;
    bool strike_currency = 72;
    bool strike_multiplier = 73;
    bool strike_value = 74;
    bool strike_price_determination_method = 75;
    bool strike_price_boundary_method = 76;
    bool strike_price_boundary_precision = 77;
    bool underlying_price_determination_method = 78;
    bool opt_attribute = 79;
    bool contract_multiplier = 80;
    bool contract_multiplier_unit = 81;
    bool flow_schedule_type = 82;
    bool min_price_increment = 83;
    bool min_price_increment_amount = 84;
    bool unit_of_measure = 85;
    bool unit_of_measure_qty = 86;
    bool price_unit_of_measure = 87;
    bool price_unit_of_measure_qty = 88;
    bool settl_method = 89;
    bool exercise_style = 90;
    bool opt_payout_type = 91;
    bool opt_payout_amount = 92;
    bool price_quote_method = 93;
    bool valuation_method = 94;
    bool list_method = 95;
    bool cap_price = 96;
    bool floor_price = 97;
    bool put_or_call = 98;
    bool flexible_indicator = 99;
    bool flex_product_eligibility_indicator = 100;
    bool time_unit = 101;
    bool coupon_rate = 102;
    bool security_exchange = 103;
    bool position_limit = 104;
    bool nt_position_limit = 105;
    bool issuer = 106;
    bool encoded_issuer_len = 107;
    bool encoded_issuer = 108;
    bool security_desc = 109;
    bool encoded_security_desc_len = 110;
    bool encoded_security_desc = 111;
    bool security_xml_len = 112;
    bool security_xml_data = 113;
    bool security_xml_schema = 114;
    bool pool = 115;
    bool contract_settl_month = 116;
    bool cp_program = 117;
    bool cp_reg_type = 118;
    bool dated_date = 119;
    bool interest_accrual_date = 120;
    bool agreement_desc = 121;
    bool agreement_id = 122;
    bool agreement_date = 123;
    bool agreement_currency = 124;
    bool termination_type = 125;
    bool start_date = 126;
    bool end_date = 127;
    bool delivery_type = 128;
    bool margin_ratio = 129;
    bool side = 130;
    bool transact_time = 131;
    bool qty_type = 132;
    bool order_qty = 133;
    bool cash_order_qty = 134;
    bool order_percent = 135;
    bool rounding_direction = 136;
    bool rounding_modulus = 137;
    bool ord_type = 138;
    bool price_type = 139;
    bool price = 140;
    bool price_protection_scope = 141;
    bool stop_px = 142;
    bool trigger_type = 143;
    bool trigger_action = 144;
    bool trigger_price = 145;
    bool trigger_symbol = 146;
    bool trigger_security_id = 147;
    bool trigger_security_id_source = 148;
    bool trigger_security_desc = 149;
    bool trigger_price_type = 150;
    bool trigger_price_type_scope = 151;
    bool trigger_price_direction = 152;
    bool trigger_new_price = 153;
    bool trigger_order_type = 154;
    bool trigger_new_qty = 155;
    bool trigger_trading_session_id = 156;
    bool trigger_trading_session_sub_id = 157;
    bool spread = 158;
    bool benchmark_curve_currency = 159;
    bool benchmark_curve_name = 160;
    bool benchmark_curve_point = 161;
    bool benchmark_price = 162;
    bool benchmark_price_type = 163;
    bool benchmark_security_id = 164;
    bool benchmark_security_id_source = 165;
    bool yield_type = 166;
    bool yield = 167;
    bool yield_calc_date = 168;
    bool yield_redemption_date = 169;
    bool yield_redemption_price = 170;
    bool yield_redemption_price_type = 171;
    bool peg_offset_value = 172;
    bool peg_price_type = 173;
    bool peg_move_type = 174;
    bool peg_offset_type = 175;
    bool peg_limit_type = 176;
    bool peg_round_direction = 177;
    bool peg_scope = 178;
    bool peg_security_id_source = 179;
    bool peg_security_id = 180;
    bool peg_symbol = 181;
    bool peg_security_desc = 182;
    bool discretion_inst = 183;
    bool discretion_offset_value = 184;
    bool discretion_move_type = 185;
    bool discretion_offset_type = 186;
    bool discretion_limit_type = 187;
    bool discretion_round_direction = 188;
    bool discretion_scope = 189;
    bool target_strategy = 190;
    bool target_strategy_parameters = 191;
    bool participation_rate = 192;
    bool compliance_id = 193;
    bool solicited_flag = 194;
    bool currency = 195;
    bool time_in_force = 196;
    bool effective_time = 197;
    bool expire_date = 198;
    bool expire_time = 199;
    bool gt_booking_inst = 200;
    bool commission = 201;
    bool comm_type = 202;
    bool comm_currency = 203;
    bool fund_renew_waiv = 204;
    bool order_capacity = 205;
    bool order_restrictions = 206;
    bool pre_trade_anonymity = 207;
    bool cust_order_capacity = 208;
    bool forex_req = 209;
    bool settl_currency = 210;
    bool booking_type = 211;
    bool text = 212;
    bool encoded_text_len = 213;
    bool encoded_text = 214;
    bool settl_date2 = 215;
    bool order_qty2 = 216;
    bool price2 = 217;
    bool position_effect = 218;
    bool covered_or_uncovered = 219;
    bool max_show = 220;
    bool locate_reqd = 221;
    bool cancellation_rights = 222;
    bool money_laundering_status = 223;
    bool regist_id = 224;
    bool designation = 225;
    bool manual_order_indicator = 226;
    bool cust_directed_order = 227;
    bool received_dept_id = 228;
    bool cust_order_handling_inst = 229;
    bool order_handling_inst_source = 230;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string order_id = 5;  // tag 37, name OrderID, type STRING
  string trade_origination_date = 6;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
  string trade_date = 7;  // tag 75, name TradeDate, type LOCALMKTDATE
  string orig_cl_ord_id = 8;  // tag 41, name OrigClOrdID, type STRING
  string cl_ord_id = 9;  // tag 11, name ClOrdID, type STRING
  string secondary_cl_ord_id = 10;  // tag 526, name SecondaryClOrdID, type STRING
  string cl_ord_link_id = 11;  // tag 583, name ClOrdLinkID, type STRING
  string list_id = 12;  // tag 66, name ListID, type STRING
  uint64 orig_ord_mod_time = 13;  // tag 586, name OrigOrdModTime, type UTCTIMESTAMP
  string account = 14;  // tag 1, name Account, type STRING
  int32 acct_id_source = 15;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 16;  // tag 581, name AccountType, type INT
  int32 day_booking_inst = 17;  // tag 589, name DayBookingInst, type CHAR
  int32 booking_unit = 18;  // tag 590, name BookingUnit, type CHAR
  int32 prealloc_method = 19;  // tag 591, name PreallocMethod, type CHAR
  string alloc_id = 20;  // tag 70, name AllocID, type STRING
  string settl_type = 21;  // tag 63, name SettlType, type STRING
  string settl_date = 22;  // tag 64, name SettlDate, type LOCALMKTDATE
  int32 cash_margin = 23;  // tag 544, name CashMargin, type CHAR
  string clearing_fee_indicator = 24;  // tag 635, name ClearingFeeIndicator, type STRING
  int32 handl_inst = 25;  // tag 21, name HandlInst, type CHAR
  string exec_inst = 26;  // tag 18, name ExecInst, type MULTIPLECHARVALUE
  double min_qty = 27;  // tag 110, name MinQty, type QTY
  double match_increment = 28;  // tag 1089, name MatchIncrement, type QTY
  int32 max_price_levels = 29;  // tag 1090, name MaxPriceLevels, type INT
  double display_qty = 30;  // tag 1138, name DisplayQty, type QTY
  double secondary_display_qty = 31;  // tag 1082, name SecondaryDisplayQty, type QTY
  int32 display_when = 32;  // tag 1083, name DisplayWhen, type CHAR
  int32 display_method = 33;  // tag 1084, name DisplayMethod, type CHAR
  double display_low_qty = 34;  // tag 1085, name DisplayLowQty, type QTY
  double display_high_qty = 35;  // tag 1086, name DisplayHighQty, type QTY
  double display_min_incr = 36;  // tag 1087, name DisplayMinIncr, type QTY
  double refresh_qty = 37;  // tag 1088, name RefreshQty, type QTY
  double max_floor = 38;  // tag 111, name MaxFloor, type QTY
  string ex_destination = 39;  // tag 100, name ExDestination, type EXCHANGE
  int32 ex_destination_id_source = 40;  // tag 1133, name ExDestinationIDSource, type CHAR
  string symbol = 41;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 42;  // tag 65, name SymbolSfx, type STRING
  string security_id = 43;  // tag 48, name SecurityID, type STRING
  string security_id_source = 44;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 45;  // tag 460, name Product, type INT
  string product_complex = 46;  // tag 1227, name ProductComplex, type STRING
  string security_group = 47;  // tag 1151, name SecurityGroup, type STRING
  string cfi_code = 48;  // tag 461, name CFICode, type STRING
  string security_type = 49;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 50;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 51;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 52;  // tag 541, name MaturityDate, type LOCALMKTDATE
  string maturity_time = 53;  // tag 1079, name MaturityTime, type TZTIMEONLY
  string settle_on_open_flag = 54;  // tag 966, name SettleOnOpenFlag, type STRING
  int32 instrmt_assignment_method = 55;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
  string security_status = 56;  // tag 965, name SecurityStatus, type STRING
  string coupon_payment_date = 57;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string restructuring_type = 58;  // tag 1449, name RestructuringType, type STRING
  string seniority = 59;  // tag 1450, name Seniority, type STRING
  double notional_percentage_outstanding = 60;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
  double original_notional_percentage_outstanding = 61;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
  double attachment_point = 62;  // tag 1457, name AttachmentPoint, type PERCENTAGE
  double detachment_point = 63;  // tag 1458, name DetachmentPoint, type PERCENTAGE
  string issue_date = 64;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 65;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 66;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 67;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 68;  // tag 228, name Factor, type FLOAT
  string credit_rating = 69;  // tag 255, name CreditRating, type STRING
  string instr_registry = 70;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 71;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 72;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 73;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 74;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 75;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 76;  // tag 947, name StrikeCurrency, type CURRENCY
  double strike_multiplier = 77;  // tag 967, name StrikeMultiplier, type FLOAT
  double strike_value = 78;  // tag 968, name StrikeValue, type FLOAT
  int32 strike_price_determination_method = 79;  // tag 1478, name StrikePriceDeterminationMethod, type INT
  int32 strike_price_boundary_method = 80;  // tag 1479, name StrikePriceBoundaryMethod, type INT
  double strike_price_boundary_precision = 81;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
  int32 underlying_price_determination_method = 82;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
  int32 opt_attribute = 83;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 84;  // tag 231, name ContractMultiplier, type FLOAT
  int32 contract_multiplier_unit = 85;  // tag 1435, name ContractMultiplierUnit, type INT
  int32 flow_schedule_type = 86;  // tag 1439, name FlowScheduleType, type INT
  double min_price_increment = 87;  // tag 969, name MinPriceIncrement, type FLOAT
  double min_price_increment_amount = 88;  // tag 1146, name MinPriceIncrementAmount, type AMT
  string unit_of_measure = 89;  // tag 996, name UnitOfMeasure, type STRING
  double unit_of_measure_qty = 90;  // tag 1147, name UnitOfMeasureQty, type QTY
  string price_unit_of_measure = 91;  // tag 1191, name PriceUnitOfMeasure, type STRING
  double price_unit_of_measure_qty = 92;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
  int32 settl_method = 93;  // tag 1193, name SettlMethod, type CHAR
  int32 exercise_style = 94;  // tag 1194, name ExerciseStyle, type INT
  int32 opt_payout_type = 95;  // tag 1482, name OptPayoutType, type INT
  double opt_payout_amount = 96;  // tag 1195, name OptPayoutAmount, type AMT
  string price_quote_method = 97;  // tag 1196, name PriceQuoteMethod, type STRING
  string valuation_method = 98;  // tag 1197, name ValuationMethod, type STRING
  int32 list_method = 99;  // tag 1198, name ListMethod, type INT
  double cap_price = 100;  // tag 1199, name CapPrice, type PRICE
  double floor_price = 101;  // tag 1200, name FloorPrice, type PRICE
  int32 put_or_call = 102;  // tag 201, name PutOrCall, type INT
  bool flexible_indicator = 103;  // tag 1244, name FlexibleIndicator, type BOOLEAN
  bool flex_product_eligibility_indicator = 104;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
  string time_unit = 105;  // tag 997, name TimeUnit, type STRING
  double coupon_rate = 106;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 107;  // tag 207, name SecurityExchange, type EXCHANGE
  int32 position_limit = 108;  // tag 970, name PositionLimit, type INT
  int32 nt_position_limit = 109;  // tag 971, name NTPositionLimit, type INT
  string issuer = 110;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 111;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 112;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 113;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 114;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 115;  // tag 351, name EncodedSecurityDesc, type DATA
  int32 security_xml_len = 116;  // tag 1184, name SecurityXMLLen, type LENGTH
  string security_xml_data = 117;  // tag 1185, name SecurityXMLData, type XMLDATA
  string security_xml_schema = 118;  // tag 1186, name SecurityXMLSchema, type STRING
  string pool = 119;  // tag 691, name Pool, type STRING
  string contract_settl_month = 120;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 121;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 122;  // tag 876, name CPRegType, type STRING
  string dated_date = 123;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 124;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 125;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 126;  // tag 914, name AgreementID, type STRING
  string agreement_date = 127;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 128;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 129;  // tag 788, name TerminationType, type INT
  string start_date = 130;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 131;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 132;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 133;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 134;  // tag 54, name Side, type CHAR
  uint64 transact_time = 135;  // tag 60, name TransactTime, type UTCTIMESTAMP
  int32 qty_type = 136;  // tag 854, name QtyType, type INT
  double order_qty = 137;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 138;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 139;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 140;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 141;  // tag 469, name RoundingModulus, type FLOAT
  int32 ord_type = 142;  // tag 40, name OrdType, type CHAR
  int32 price_type = 143;  // tag 423, name PriceType, type INT
  double price = 144;  // tag 44, name Price, type PRICE
  int32 price_protection_scope = 145;  // tag 1092, name PriceProtectionScope, type CHAR
  double stop_px = 146;  // tag 99, name StopPx, type PRICE
  int32 trigger_type = 147;  // tag 1100, name TriggerType, type CHAR
  int32 trigger_action = 148;  // tag 1101, name TriggerAction, type CHAR
  double trigger_price = 149;  // tag 1102, name TriggerPrice, type PRICE
  string trigger_symbol = 150;  // tag 1103, name TriggerSymbol, type STRING
  string trigger_security_id = 151;  // tag 1104, name TriggerSecurityID, type STRING
  string trigger_security_id_source = 152;  // tag 1105, name TriggerSecurityIDSource, type STRING
  string trigger_security_desc = 153;  // tag 1106, name TriggerSecurityDesc, type STRING
  int32 trigger_price_type = 154;  // tag 1107, name TriggerPriceType, type CHAR
  int32 trigger_price_type_scope = 155;  // tag 1108, name TriggerPriceTypeScope, type CHAR
  int32 trigger_price_direction = 156;  // tag 1109, name TriggerPriceDirection, type CHAR
  double trigger_new_price = 157;  // tag 1110, name TriggerNewPrice, type PRICE
  int32 trigger_order_type = 158;  // tag 1111, name TriggerOrderType, type CHAR
  double trigger_new_qty = 159;  // tag 1112, name TriggerNewQty, type QTY
  string trigger_trading_session_id = 160;  // tag 1113, name TriggerTradingSessionID, type STRING
  string trigger_trading_session_sub_id = 161;  // tag 1114, name TriggerTradingSessionSubID, type STRING
  double spread = 162;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 163;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 164;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 165;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 166;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 167;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 168;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 169;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 170;  // tag 235, name YieldType, type STRING
  double yield = 171;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 172;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 173;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 174;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 175;  // tag 698, name YieldRedemptionPriceType, type INT
  double peg_offset_value = 176;  // tag 211, name PegOffsetValue, type FLOAT
  int32 peg_price_type = 177;  // tag 1094, name PegPriceType, type INT
  int32 peg_move_type = 178;  // tag 835, name PegMoveType, type INT
  int32 peg_offset_type = 179;  // tag 836, name PegOffsetType, type INT
  int32 peg_limit_type = 180;  // tag 837, name PegLimitType, type INT
  int32 peg_round_direction = 181;  // tag 838, name PegRoundDirection, type INT
  int32 peg_scope = 182;  // tag 840, name PegScope, type INT
  string peg_security_id_source = 183;  // tag 1096, name PegSecurityIDSource, type STRING
  string peg_security_id = 184;  // tag 1097, name PegSecurityID, type STRING
  string peg_symbol = 185;  // tag 1098, name PegSymbol, type STRING
  string peg_security_desc = 186;  // tag 1099, name PegSecurityDesc, type STRING
  int32 discretion_inst = 187;  // tag 388, name DiscretionInst, type CHAR
  double discretion_offset_value = 188;  // tag 389, name DiscretionOffsetValue, type FLOAT
  int32 discretion_move_type = 189;  // tag 841, name DiscretionMoveType, type INT
  int32 discretion_offset_type = 190;  // tag 842, name DiscretionOffsetType, type INT
  int32 discretion_limit_type = 191;  // tag 843, name DiscretionLimitType, type INT
  int32 discretion_round_direction = 192;  // tag 844, name DiscretionRoundDirection, type INT
  int32 discretion_scope = 193;  // tag 846, name DiscretionScope, type INT
  int32 target_strategy = 194;  // tag 847, name TargetStrategy, type INT
  string target_strategy_parameters = 195;  // tag 848, name TargetStrategyParameters, type STRING
  double participation_rate = 196;  // tag 849, name ParticipationRate, type PERCENTAGE
  string compliance_id = 197;  // tag 376, name ComplianceID, type STRING
  bool solicited_flag = 198;  // tag 377, name SolicitedFlag, type BOOLEAN
  string currency = 199;  // tag 15, name Currency, type CURRENCY
  int32 time_in_force = 200;  // tag 59, name TimeInForce, type CHAR
  uint64 effective_time = 201;  // tag 168, name EffectiveTime, type UTCTIMESTAMP
  string expire_date = 202;  // tag 432, name ExpireDate, type LOCALMKTDATE
  uint64 expire_time = 203;  // tag 126, name ExpireTime, type UTCTIMESTAMP
  int32 gt_booking_inst = 204;  // tag 427, name GTBookingInst, type INT
  double commission = 205;  // tag 12, name Commission, type AMT
  int32 comm_type = 206;  // tag 13, name CommType, type CHAR
  string comm_currency = 207;  // tag 479, name CommCurrency, type CURRENCY
  int32 fund_renew_waiv = 208;  // tag 497, name FundRenewWaiv, type CHAR
  int32 order_capacity = 209;  // tag 528, name OrderCapacity, type CHAR
  string order_restrictions = 210;  // tag 529, name OrderRestrictions, type MULTIPLECHARVALUE
  bool pre_trade_anonymity = 211;  // tag 1091, name PreTradeAnonymity, type BOOLEAN
  int32 cust_order_capacity = 212;  // tag 582, name CustOrderCapacity, type INT
  bool forex_req = 213;  // tag 121, name ForexReq, type BOOLEAN
  string settl_currency = 214;  // tag 120, name SettlCurrency, type CURRENCY
  int32 booking_type = 215;  // tag 775, name BookingType, type INT
  string text = 216;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 217;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 218;  // tag 355, name EncodedText, type DATA
  string settl_date2 = 219;  // tag 193, name SettlDate2, type LOCALMKTDATE
  double order_qty2 = 220;  // tag 192, name OrderQty2, type QTY
  double price2 = 221;  // tag 640, name Price2, type PRICE
  int32 position_effect = 222;  // tag 77, name PositionEffect, type CHAR
  int32 covered_or_uncovered = 223;  // tag 203, name CoveredOrUncovered, type INT
  double max_show = 224;  // tag 210, name MaxShow, type QTY
  bool locate_reqd = 225;  // tag 114, name LocateReqd, type BOOLEAN
  int32 cancellation_rights = 226;  // tag 480, name CancellationRights, type CHAR
  int32 money_laundering_status = 227;  // tag 481, name MoneyLaunderingStatus, type CHAR
  string regist_id = 228;  // tag 513, name RegistID, type STRING
  string designation = 229;  // tag 494, name Designation, type STRING
  bool manual_order_indicator = 230;  // tag 1028, name ManualOrderIndicator, type BOOLEAN
  bool cust_directed_order = 231;  // tag 1029, name CustDirectedOrder, type BOOLEAN
  string received_dept_id = 232;  // tag 1030, name ReceivedDeptID, type STRING
  string cust_order_handling_inst = 233;  // tag 1031, name CustOrderHandlingInst, type MULTIPLESTRINGVALUE
  int32 order_handling_inst_source = 234;  // tag 1032, name OrderHandlingInstSource, type INT

  // GROUPS
  repeated NoPartyIds no_party_ids = 235;
  repeated NoAllocs no_allocs = 236;
  repeated NoTradingSessions no_trading_sessions = 237;
  repeated NoSecurityAltId no_security_alt_id = 238;
  repeated NoEvents no_events = 239;
  repeated NoInstrumentParties no_instrument_parties = 240;
  repeated NoComplexEvents no_complex_events = 241;
  repeated NoUnderlyings no_underlyings = 242;
  repeated NoStrategyParameters no_strategy_parameters = 243;
  repeated NoTrdRegTimestamps no_trd_reg_timestamps = 244;
}

message QuoteCancel {
  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoTargetPartyIds {
    message FieldPresence {
      bool target_party_id = 1;
      bool target_party_id_source = 2;
      bool target_party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string target_party_id = 2;  // tag 1462, name TargetPartyID, type STRING
    int32 target_party_id_source = 3;  // tag 1463, name TargetPartyIDSource, type CHAR
    int32 target_party_role = 4;  // tag 1464, name TargetPartyRole, type INT
  }

  message NoQuoteEntries {
    message NoSecurityAltId {
      message FieldPresence {
        bool security_alt_id = 1;
        bool security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
      string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
    }

    message NoEvents {
      message FieldPresence {
        bool event_type = 1;
        bool event_date = 2;
        bool event_time = 3;
        bool event_px = 4;
        bool event_text = 5;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 event_type = 2;  // tag 865, name EventType, type INT
      string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
      uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
      double event_px = 5;  // tag 867, name EventPx, type PRICE
      string event_text = 6;  // tag 868, name EventText, type STRING
    }

    message NoInstrumentParties {
      message NoInstrumentPartySubIds {
        message FieldPresence {
          bool instrument_party_sub_id = 1;
          bool instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
        int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool instrument_party_id = 1;
        bool instrument_party_id_source = 2;
        bool instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
      int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
      int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
    }

    message NoComplexEvents {
      message NoComplexEventDates {
        message NoComplexEventTimes {
          message FieldPresence {
            bool complex_event_start_time = 1;
            bool complex_event_end_time = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
          uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
        }

        message FieldPresence {
          bool complex_event_start_date = 1;
          bool complex_event_end_date = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
        uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
      
  // GROUPS
        repeated NoComplexEventTimes no_complex_event_times = 4;
      }

      message FieldPresence {
        bool complex_event_type = 1;
        bool complex_opt_payout_amount = 2;
        bool complex_event_price = 3;
        bool complex_event_price_boundary_method = 4;
        bool complex_event_price_boundary_precision = 5;
        bool complex_event_price_time_type = 6;
        bool complex_event_condition = 7;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
      double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
      double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
      int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
      double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
      int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
      int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
    
  // GROUPS
      repeated NoComplexEventDates no_complex_event_dates = 9;
    }

    message NoUnderlyings {
      message NoUnderlyingSecurityAltId {
        message FieldPresence {
          bool underlying_security_alt_id = 1;
          bool underlying_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
        string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
      }

      message NoUnderlyingStips {
        message FieldPresence {
          bool underlying_stip_type = 1;
          bool underlying_stip_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
        string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
      }

      message NoUndlyInstrumentParties {
        message NoUndlyInstrumentPartySubIds {
          message FieldPresence {
            bool underlying_instrument_party_sub_id = 1;
            bool underlying_instrument_party_sub_id_type = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
          int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
        }

        message FieldPresence {
          bool underlying_instrument_party_id = 1;
          bool underlying_instrument_party_id_source = 2;
          bool underlying_instrument_party_role = 3;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
        int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
        int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
      
  // GROUPS
        repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
      }

      message FieldPresence {
        bool underlying_symbol = 1;
        bool underlying_symbol_sfx = 2;
        bool underlying_security_id = 3;
        bool underlying_security_id_source = 4;
        bool underlying_product = 5;
        bool underlying_cfi_code = 6;
        bool underlying_security_type = 7;
        bool underlying_security_sub_type = 8;
        bool underlying_maturity_month_year = 9;
        bool underlying_maturity_date = 10;
        bool underlying_maturity_time = 11;
        bool underlying_coupon_payment_date = 12;
        bool underlying_restructuring_type = 13;
        bool underlying_seniority = 14;
        bool underlying_notional_percentage_outstanding = 15;
        bool underlying_original_notional_percentage_outstanding = 16;
        bool underlying_attachment_point = 17;
        bool underlying_detachment_point = 18;
        bool underlying_issue_date = 19;
        bool underlying_repo_collateral_security_type = 20;
        bool underlying_repurchase_term = 21;
        bool underlying_repurchase_rate = 22;
        bool underlying_factor = 23;
        bool underlying_credit_rating = 24;
        bool underlying_instr_registry = 25;
        bool underlying_country_of_issue = 26;
        bool underlying_state_or_province_of_issue = 27;
        bool underlying_locale_of_issue = 28;
        bool underlying_redemption_date = 29;
        bool underlying_strike_price = 30;
        bool underlying_strike_currency = 31;
        bool underlying_opt_attribute = 32;
        bool underlying_contract_multiplier = 33;
        bool underlying_contract_multiplier_unit = 34;
        bool underlying_flow_schedule_type = 35;
        bool underlying_unit_of_measure = 36;
        bool underlying_unit_of_measure_qty = 37;
        bool underlying_price_unit_of_measure = 38;
        bool underlying_price_unit_of_measure_qty = 39;
        bool underlying_time_unit = 40;
        bool underlying_exercise_style = 41;
        bool underlying_coupon_rate = 42;
        bool underlying_security_exchange = 43;
        bool underlying_issuer = 44;
        bool encoded_underlying_issuer_len = 45;
        bool encoded_underlying_issuer = 46;
        bool underlying_security_desc = 47;
        bool encoded_underlying_security_desc_len = 48;
        bool encoded_underlying_security_desc = 49;
        bool underlying_cp_program = 50;
        bool underlying_cp_reg_type = 51;
        bool underlying_allocation_percent = 52;
        bool underlying_currency = 53;
        bool underlying_qty = 54;
        bool underlying_settlement_type = 55;
        bool underlying_cash_amount = 56;
        bool underlying_cash_type = 57;
        bool underlying_px = 58;
        bool underlying_dirty_price = 59;
        bool underlying_end_price = 60;
        bool underlying_start_value = 61;
        bool underlying_current_value = 62;
        bool underlying_end_value = 63;
        bool underlying_adjusted_quantity = 64;
        bool underlying_fx_rate = 65;
        bool underlying_fx_rate_calc = 66;
        bool underlying_cap_value = 67;
        bool underlying_settl_method = 68;
        bool underlying_put_or_call = 69;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
      string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
      string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
      string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
      int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
      string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
      string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
      string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
      string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
      string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
      string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
      string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
      string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
      string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
      double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
      double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
      double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
      double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
      string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
      string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
      int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
      double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
      double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
      string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
      string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
      string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
      string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
      string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
      string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
      double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
      string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
      int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
      double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
      int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
      int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
      string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
      double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
      string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
      double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
      string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
      int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
      double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
      string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
      string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
      int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
      string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
      string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
      int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
      string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
      string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
      string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
      double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
      string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
      double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
      int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
      double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
      string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
      double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
      double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
      double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
      double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
      double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
      double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
      double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
      double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
      int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
      double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
      string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
      int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
    
  // GROUPS
      repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
      repeated NoUnderlyingStips no_underlying_stips = 72;
      repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
    }

    message NoLegs {
      message NoLegSecurityAltId {
        message FieldPresence {
          bool leg_security_alt_id = 1;
          bool leg_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
        string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
      }

      message FieldPresence {
        bool leg_symbol = 1;
        bool leg_symbol_sfx = 2;
        bool leg_security_id = 3;
        bool leg_security_id_source = 4;
        bool leg_product = 5;
        bool leg_cfi_code = 6;
        bool leg_security_type = 7;
        bool leg_security_sub_type = 8;
        bool leg_maturity_month_year = 9;
        bool leg_maturity_date = 10;
        bool leg_maturity_time = 11;
        bool leg_coupon_payment_date = 12;
        bool leg_issue_date = 13;
        bool leg_repo_collateral_security_type = 14;
        bool leg_repurchase_term = 15;
        bool leg_repurchase_rate = 16;
        bool leg_factor = 17;
        bool leg_credit_rating = 18;
        bool leg_instr_registry = 19;
        bool leg_country_of_issue = 20;
        bool leg_state_or_province_of_issue = 21;
        bool leg_locale_of_issue = 22;
        bool leg_redemption_date = 23;
        bool leg_strike_price = 24;
        bool leg_strike_currency = 25;
        bool leg_opt_attribute = 26;
        bool leg_contract_multiplier = 27;
        bool leg_contract_multiplier_unit = 28;
        bool leg_flow_schedule_type = 29;
        bool leg_unit_of_measure = 30;
        bool leg_unit_of_measure_qty = 31;
        bool leg_price_unit_of_measure = 32;
        bool leg_price_unit_of_measure_qty = 33;
        bool leg_time_unit = 34;
        bool leg_exercise_style = 35;
        bool leg_coupon_rate = 36;
        bool leg_security_exchange = 37;
        bool leg_issuer = 38;
        bool encoded_leg_issuer_len = 39;
        bool encoded_leg_issuer = 40;
        bool leg_security_desc = 41;
        bool encoded_leg_security_desc_len = 42;
        bool encoded_leg_security_desc = 43;
        bool leg_ratio_qty = 44;
        bool leg_side = 45;
        bool leg_currency = 46;
        bool leg_pool = 47;
        bool leg_dated_date = 48;
        bool leg_contract_settl_month = 49;
        bool leg_interest_accrual_date = 50;
        bool leg_put_or_call = 51;
        bool leg_option_ratio = 52;
        bool leg_price = 53;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
      string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
      string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
      string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
      int32 leg_product = 6;  // tag 607, name LegProduct, type INT
      string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
      string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
      string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
      string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
      string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
      string leg_maturity_time = 12;  // tag 1212, name LegMaturityTime, type TZTIMEONLY
      string leg_coupon_payment_date = 13;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
      string leg_issue_date = 14;  // tag 249, name LegIssueDate, type LOCALMKTDATE
      string leg_repo_collateral_security_type = 15;  // tag 250, name LegRepoCollateralSecurityType, type STRING
      int32 leg_repurchase_term = 16;  // tag 251, name LegRepurchaseTerm, type INT
      double leg_repurchase_rate = 17;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
      double leg_factor = 18;  // tag 253, name LegFactor, type FLOAT
      string leg_credit_rating = 19;  // tag 257, name LegCreditRating, type STRING
      string leg_instr_registry = 20;  // tag 599, name LegInstrRegistry, type STRING
      string leg_country_of_issue = 21;  // tag 596, name LegCountryOfIssue, type COUNTRY
      string leg_state_or_province_of_issue = 22;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
      string leg_locale_of_issue = 23;  // tag 598, name LegLocaleOfIssue, type STRING
      string leg_redemption_date = 24;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
      double leg_strike_price = 25;  // tag 612, name LegStrikePrice, type PRICE
      string leg_strike_currency = 26;  // tag 942, name LegStrikeCurrency, type CURRENCY
      int32 leg_opt_attribute = 27;  // tag 613, name LegOptAttribute, type CHAR
      double leg_contract_multiplier = 28;  // tag 614, name LegContractMultiplier, type FLOAT
      int32 leg_contract_multiplier_unit = 29;  // tag 1436, name LegContractMultiplierUnit, type INT
      int32 leg_flow_schedule_type = 30;  // tag 1440, name LegFlowScheduleType, type INT
      string leg_unit_of_measure = 31;  // tag 999, name LegUnitOfMeasure, type STRING
      double leg_unit_of_measure_qty = 32;  // tag 1224, name LegUnitOfMeasureQty, type QTY
      string leg_price_unit_of_measure = 33;  // tag 1421, name LegPriceUnitOfMeasure, type STRING
      double leg_price_unit_of_measure_qty = 34;  // tag 1422, name LegPriceUnitOfMeasureQty, type QTY
      string leg_time_unit = 35;  // tag 1001, name LegTimeUnit, type STRING
      int32 leg_exercise_style = 36;  // tag 1420, name LegExerciseStyle, type INT
      double leg_coupon_rate = 37;  // tag 615, name LegCouponRate, type PERCENTAGE
      string leg_security_exchange = 38;  // tag 616, name LegSecurityExchange, type EXCHANGE
      string leg_issuer = 39;  // tag 617, name LegIssuer, type STRING
      int32 encoded_leg_issuer_len = 40;  // tag 618, name EncodedLegIssuerLen, type LENGTH
      string encoded_leg_issuer = 41;  // tag 619, name EncodedLegIssuer, type DATA
      string leg_security_desc = 42;  // tag 620, name LegSecurityDesc, type STRING
      int32 encoded_leg_security_desc_len = 43;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
      string encoded_leg_security_desc = 44;  // tag 622, name EncodedLegSecurityDesc, type DATA
      double leg_ratio_qty = 45;  // tag 623, name LegRatioQty, type FLOAT
      int32 leg_side = 46;  // tag 624, name LegSide, type CHAR
      string leg_currency = 47;  // tag 556, name LegCurrency, type CURRENCY
      string leg_pool = 48;  // tag 740, name LegPool, type STRING
      string leg_dated_date = 49;  // tag 739, name LegDatedDate, type LOCALMKTDATE
      string leg_contract_settl_month = 50;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
      string leg_interest_accrual_date = 51;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
      int32 leg_put_or_call = 52;  // tag 1358, name LegPutOrCall, type INT
      double leg_option_ratio = 53;  // tag 1017, name LegOptionRatio, type FLOAT
      double leg_price = 54;  // tag 566, name LegPrice, type PRICE
    
  // GROUPS
      repeated NoLegSecurityAltId no_leg_security_alt_id = 55;
    }

    message FieldPresence {
      bool symbol = 1;
      bool symbol_sfx = 2;
      bool security_id = 3;
      bool security_id_source = 4;
      bool product = 5;
      bool product_complex = 6;
      bool security_group = 7;
      bool cfi_code = 8;
      bool security_type = 9;
      bool security_sub_type = 10;
      bool maturity_month_year = 11;
      bool maturity_date = 12;
      bool maturity_time = 13;
      bool settle_on_open_flag = 14;
      bool instrmt_assignment_method = 15;
      bool security_status = 16;
      bool coupon_payment_date = 17;
      bool restructuring_type = 18;
      bool seniority = 19;
      bool notional_percentage_outstanding = 20;
      bool original_notional_percentage_outstanding = 21;
      bool attachment_point = 22;
      bool detachment_point = 23;
      bool issue_date = 24;
      bool repo_collateral_security_type = 25;
      bool repurchase_term = 26;
      bool repurchase_rate = 27;
      bool factor = 28;
      bool credit_rating = 29;
      bool instr_registry = 30;
      bool country_of_issue = 31;
      bool state_or_province_of_issue = 32;
      bool locale_of_issue = 33;
      bool redemption_date = 34;
      bool strike_price = 35;
      bool strike_currency = 36;
      bool strike_multiplier = 37;
      bool strike_value = 38;
      bool strike_price_determination_method = 39;
      bool strike_price_boundary_method = 40;
      bool strike_price_boundary_precision = 41;
      bool underlying_price_determination_method = 42;
      bool opt_attribute = 43;
      bool contract_multiplier = 44;
      bool contract_multiplier_unit = 45;
      bool flow_schedule_type = 46;
      bool min_price_increment = 47;
      bool min_price_increment_amount = 48;
      bool unit_of_measure = 49;
      bool unit_of_measure_qty = 50;
      bool price_unit_of_measure = 51;
      bool price_unit_of_measure_qty = 52;
      bool settl_method = 53;
      bool exercise_style = 54;
      bool opt_payout_type = 55;
      bool opt_payout_amount = 56;
      bool price_quote_method = 57;
      bool valuation_method = 58;
      bool list_method = 59;
      bool cap_price = 60;
      bool floor_price = 61;
      bool put_or_call = 62;
      bool flexible_indicator = 63;
      bool flex_product_eligibility_indicator = 64;
      bool time_unit = 65;
      bool coupon_rate = 66;
      bool security_exchange = 67;
      bool position_limit = 68;
      bool nt_position_limit = 69;
      bool issuer = 70;
      bool encoded_issuer_len = 71;
      bool encoded_issuer = 72;
      bool security_desc = 73;
      bool encoded_security_desc_len = 74;
      bool encoded_security_desc = 75;
      bool security_xml_len = 76;
      bool security_xml_data = 77;
      bool security_xml_schema = 78;
      bool pool = 79;
      bool contract_settl_month = 80;
      bool cp_program = 81;
      bool cp_reg_type = 82;
      bool dated_date = 83;
      bool interest_accrual_date = 84;
      bool agreement_desc = 85;
      bool agreement_id = 86;
      bool agreement_date = 87;
      bool agreement_currency = 88;
      bool termination_type = 89;
      bool start_date = 90;
      bool end_date = 91;
      bool delivery_type = 92;
      bool margin_ratio = 93;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string symbol = 2;  // tag 55, name Symbol, type STRING
    string symbol_sfx = 3;  // tag 65, name SymbolSfx, type STRING
    string security_id = 4;  // tag 48, name SecurityID, type STRING
    string security_id_source = 5;  // tag 22, name SecurityIDSource, type STRING
    int32 product = 6;  // tag 460, name Product, type INT
    string product_complex = 7;  // tag 1227, name ProductComplex, type STRING
    string security_group = 8;  // tag 1151, name SecurityGroup, type STRING
    string cfi_code = 9;  // tag 461, name CFICode, type STRING
    string security_type = 10;  // tag 167, name SecurityType, type STRING
    string security_sub_type = 11;  // tag 762, name SecuritySubType, type STRING
    string maturity_month_year = 12;  // tag 200, name MaturityMonthYear, type MONTHYEAR
    string maturity_date = 13;  // tag 541, name MaturityDate, type LOCALMKTDATE
    string maturity_time = 14;  // tag 1079, name MaturityTime, type TZTIMEONLY
    string settle_on_open_flag = 15;  // tag 966, name SettleOnOpenFlag, type STRING
    int32 instrmt_assignment_method = 16;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
    string security_status = 17;  // tag 965, name SecurityStatus, type STRING
    string coupon_payment_date = 18;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
    string restructuring_type = 19;  // tag 1449, name RestructuringType, type STRING
    string seniority = 20;  // tag 1450, name Seniority, type STRING
    double notional_percentage_outstanding = 21;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
    double original_notional_percentage_outstanding = 22;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
    double attachment_point = 23;  // tag 1457, name AttachmentPoint, type PERCENTAGE
    double detachment_point = 24;  // tag 1458, name DetachmentPoint, type PERCENTAGE
    string issue_date = 25;  // tag 225, name IssueDate, type LOCALMKTDATE
    string repo_collateral_security_type = 26;  // tag 239, name RepoCollateralSecurityType, type STRING
    int32 repurchase_term = 27;  // tag 226, name RepurchaseTerm, type INT
    double repurchase_rate = 28;  // tag 227, name RepurchaseRate, type PERCENTAGE
    double factor = 29;  // tag 228, name Factor, type FLOAT
    string credit_rating = 30;  // tag 255, name CreditRating, type STRING
    string instr_registry = 31;  // tag 543, name InstrRegistry, type STRING
    string country_of_issue = 32;  // tag 470, name CountryOfIssue, type COUNTRY
    string state_or_province_of_issue = 33;  // tag 471, name StateOrProvinceOfIssue, type STRING
    string locale_of_issue = 34;  // tag 472, name LocaleOfIssue, type STRING
    string redemption_date = 35;  // tag 240, name RedemptionDate, type LOCALMKTDATE
    double strike_price = 36;  // tag 202, name StrikePrice, type PRICE
    string strike_currency = 37;  // tag 947, name StrikeCurrency, type CURRENCY
    double strike_multiplier = 38;  // tag 967, name StrikeMultiplier, type FLOAT
    double strike_value = 39;  // tag 968, name StrikeValue, type FLOAT
    int32 strike_price_determination_method = 40;  // tag 1478, name StrikePriceDeterminationMethod, type INT
    int32 strike_price_boundary_method = 41;  // tag 1479, name StrikePriceBoundaryMethod, type INT
    double strike_price_boundary_precision = 42;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
    int32 underlying_price_determination_method = 43;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
    int32 opt_attribute = 44;  // tag 206, name OptAttribute, type CHAR
    double contract_multiplier = 45;  // tag 231, name ContractMultiplier, type FLOAT
    int32 contract_multiplier_unit = 46;  // tag 1435, name ContractMultiplierUnit, type INT
    int32 flow_schedule_type = 47;  // tag 1439, name FlowScheduleType, type INT
    double min_price_increment = 48;  // tag 969, name MinPriceIncrement, type FLOAT
    double min_price_increment_amount = 49;  // tag 1146, name MinPriceIncrementAmount, type AMT
    string unit_of_measure = 50;  // tag 996, name UnitOfMeasure, type STRING
    double unit_of_measure_qty = 51;  // tag 1147, name UnitOfMeasureQty, type QTY
    string price_unit_of_measure = 52;  // tag 1191, name PriceUnitOfMeasure, type STRING
    double price_unit_of_measure_qty = 53;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
    int32 settl_method = 54;  // tag 1193, name SettlMethod, type CHAR
    int32 exercise_style = 55;  // tag 1194, name ExerciseStyle, type INT
    int32 opt_payout_type = 56;  // tag 1482, name OptPayoutType, type INT
    double opt_payout_amount = 57;  // tag 1195, name OptPayoutAmount, type AMT
    string price_quote_method = 58;  // tag 1196, name PriceQuoteMethod, type STRING
    string valuation_method = 59;  // tag 1197, name ValuationMethod, type STRING
    int32 list_method = 60;  // tag 1198, name ListMethod, type INT
    double cap_price = 61;  // tag 1199, name CapPrice, type PRICE
    double floor_price = 62;  // tag 1200, name FloorPrice, type PRICE
    int32 put_or_call = 63;  // tag 201, name PutOrCall, type INT
    bool flexible_indicator = 64;  // tag 1244, name FlexibleIndicator, type BOOLEAN
    bool flex_product_eligibility_indicator = 65;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
    string time_unit = 66;  // tag 997, name TimeUnit, type STRING
    double coupon_rate = 67;  // tag 223, name CouponRate, type PERCENTAGE
    string security_exchange = 68;  // tag 207, name SecurityExchange, type EXCHANGE
    int32 position_limit = 69;  // tag 970, name PositionLimit, type INT
    int32 nt_position_limit = 70;  // tag 971, name NTPositionLimit, type INT
    string issuer = 71;  // tag 106, name Issuer, type STRING
    int32 encoded_issuer_len = 72;  // tag 348, name EncodedIssuerLen, type LENGTH
    string encoded_issuer = 73;  // tag 349, name EncodedIssuer, type DATA
    string security_desc = 74;  // tag 107, name SecurityDesc, type STRING
    int32 encoded_security_desc_len = 75;  // tag 350, name EncodedSecurityDescLen, type LENGTH
    string encoded_security_desc = 76;  // tag 351, name EncodedSecurityDesc, type DATA
    int32 security_xml_len = 77;  // tag 1184, name SecurityXMLLen, type LENGTH
    string security_xml_data = 78;  // tag 1185, name SecurityXMLData, type XMLDATA
    string security_xml_schema = 79;  // tag 1186, name SecurityXMLSchema, type STRING
    string pool = 80;  // tag 691, name Pool, type STRING
    string contract_settl_month = 81;  // tag 667, name ContractSettlMonth, type MONTHYEAR
    int32 cp_program = 82;  // tag 875, name CPProgram, type INT
    string cp_reg_type = 83;  // tag 876, name CPRegType, type STRING
    string dated_date = 84;  // tag 873, name DatedDate, type LOCALMKTDATE
    string interest_accrual_date = 85;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
    string agreement_desc = 86;  // tag 913, name AgreementDesc, type STRING
    string agreement_id = 87;  // tag 914, name AgreementID, type STRING
    string agreement_date = 88;  // tag 915, name AgreementDate, type LOCALMKTDATE
    string agreement_currency = 89;  // tag 918, name AgreementCurrency, type CURRENCY
    int32 termination_type = 90;  // tag 788, name TerminationType, type INT
    string start_date = 91;  // tag 916, name StartDate, type LOCALMKTDATE
    string end_date = 92;  // tag 917, name EndDate, type LOCALMKTDATE
    int32 delivery_type = 93;  // tag 919, name DeliveryType, type INT
    double margin_ratio = 94;  // tag 898, name MarginRatio, type PERCENTAGE
  
  // GROUPS
    repeated NoSecurityAltId no_security_alt_id = 95;
    repeated NoEvents no_events = 96;
    repeated NoInstrumentParties no_instrument_parties = 97;
    repeated NoComplexEvents no_complex_events = 98;
    repeated NoUnderlyings no_underlyings = 99;
    repeated NoLegs no_legs = 100;
  }

  message FieldPresence {
    bool quote_req_id = 1;
    bool quote_id = 2;
    bool quote_msg_id = 3;
    bool quote_cancel_type = 4;
    bool quote_type = 5;
    bool quote_response_level = 6;
    bool account = 7;
    bool acct_id_source = 8;
    bool account_type = 9;
    bool trading_session_id = 10;
    bool trading_session_sub_id = 11;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string quote_req_id = 5;  // tag 131, name QuoteReqID, type STRING
  string quote_id = 6;  // tag 117, name QuoteID, type STRING
  string quote_msg_id = 7;  // tag 1166, name QuoteMsgID, type STRING
  int32 quote_cancel_type = 8;  // tag 298, name QuoteCancelType, type INT
  int32 quote_type = 9;  // tag 537, name QuoteType, type INT
  int32 quote_response_level = 10;  // tag 301, name QuoteResponseLevel, type INT
  string account = 11;  // tag 1, name Account, type STRING
  int32 acct_id_source = 12;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 13;  // tag 581, name AccountType, type INT
  string trading_session_id = 14;  // tag 336, name TradingSessionID, type STRING
  string trading_session_sub_id = 15;  // tag 625, name TradingSessionSubID, type STRING

  // GROUPS
  repeated NoPartyIds no_party_ids = 16;
  repeated NoTargetPartyIds no_target_party_ids = 17;
  repeated NoQuoteEntries no_quote_entries = 18;
}

message QuoteRequestReject {
  message NoRootPartyIds {
    message NoRootPartySubIds {
      message FieldPresence {
        bool root_party_sub_id = 1;
        bool root_party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string root_party_sub_id = 2;  // tag 1121, name RootPartySubID, type STRING
      int32 root_party_sub_id_type = 3;  // tag 1122, name RootPartySubIDType, type INT
    }

    message FieldPresence {
      bool root_party_id = 1;
      bool root_party_id_source = 2;
      bool root_party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string root_party_id = 2;  // tag 1117, name RootPartyID, type STRING
    int32 root_party_id_source = 3;  // tag 1118, name RootPartyIDSource, type CHAR
    int32 root_party_role = 4;  // tag 1119, name RootPartyRole, type INT
  
  // GROUPS
    repeated NoRootPartySubIds no_root_party_sub_ids = 5;
  }

  message NoRelatedSym {
    message NoSecurityAltId {
      message FieldPresence {
        bool security_alt_id = 1;
        bool security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
      string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
    }

    message NoEvents {
      message FieldPresence {
        bool event_type = 1;
        bool event_date = 2;
        bool event_time = 3;
        bool event_px = 4;
        bool event_text = 5;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 event_type = 2;  // tag 865, name EventType, type INT
      string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
      uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
      double event_px = 5;  // tag 867, name EventPx, type PRICE
      string event_text = 6;  // tag 868, name EventText, type STRING
    }

    message NoInstrumentParties {
      message NoInstrumentPartySubIds {
        message FieldPresence {
          bool instrument_party_sub_id = 1;
          bool instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
        int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool instrument_party_id = 1;
        bool instrument_party_id_source = 2;
        bool instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
      int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
      int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
    }

    message NoComplexEvents {
      message NoComplexEventDates {
        message NoComplexEventTimes {
          message FieldPresence {
            bool complex_event_start_time = 1;
            bool complex_event_end_time = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
          uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
        }

        message FieldPresence {
          bool complex_event_start_date = 1;
          bool complex_event_end_date = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
        uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
      
  // GROUPS
        repeated NoComplexEventTimes no_complex_event_times = 4;
      }

      message FieldPresence {
        bool complex_event_type = 1;
        bool complex_opt_payout_amount = 2;
        bool complex_event_price = 3;
        bool complex_event_price_boundary_method = 4;
        bool complex_event_price_boundary_precision = 5;
        bool complex_event_price_time_type = 6;
        bool complex_event_condition = 7;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
      double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
      double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
      int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
      double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
      int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
      int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
    
  // GROUPS
      repeated NoComplexEventDates no_complex_event_dates = 9;
    }

    message NoUnderlyings {
      message NoUnderlyingSecurityAltId {
        message FieldPresence {
          bool underlying_security_alt_id = 1;
          bool underlying_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
        string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
      }

      message NoUnderlyingStips {
        message FieldPresence {
          bool underlying_stip_type = 1;
          bool underlying_stip_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
        string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
      }

      message NoUndlyInstrumentParties {
        message NoUndlyInstrumentPartySubIds {
          message FieldPresence {
            bool underlying_instrument_party_sub_id = 1;
            bool underlying_instrument_party_sub_id_type = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
          int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
        }

        message FieldPresence {
          bool underlying_instrument_party_id = 1;
          bool underlying_instrument_party_id_source = 2;
          bool underlying_instrument_party_role = 3;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
        int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
        int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
      
  // GROUPS
        repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
      }

      message FieldPresence {
        bool underlying_symbol = 1;
        bool underlying_symbol_sfx = 2;
        bool underlying_security_id = 3;
        bool underlying_security_id_source = 4;
        bool underlying_product = 5;
        bool underlying_cfi_code = 6;
        bool underlying_security_type = 7;
        bool underlying_security_sub_type = 8;
        bool underlying_maturity_month_year = 9;
        bool underlying_maturity_date = 10;
        bool underlying_maturity_time = 11;
        bool underlying_coupon_payment_date = 12;
        bool underlying_restructuring_type = 13;
        bool underlying_seniority = 14;
        bool underlying_notional_percentage_outstanding = 15;
        bool underlying_original_notional_percentage_outstanding = 16;
        bool underlying_attachment_point = 17;
        bool underlying_detachment_point = 18;
        bool underlying_issue_date = 19;
        bool underlying_repo_collateral_security_type = 20;
        bool underlying_repurchase_term = 21;
        bool underlying_repurchase_rate = 22;
        bool underlying_factor = 23;
        bool underlying_credit_rating = 24;
        bool underlying_instr_registry = 25;
        bool underlying_country_of_issue = 26;
        bool underlying_state_or_province_of_issue = 27;
        bool underlying_locale_of_issue = 28;
        bool underlying_redemption_date = 29;
        bool underlying_strike_price = 30;
        bool underlying_strike_currency = 31;
        bool underlying_opt_attribute = 32;
        bool underlying_contract_multiplier = 33;
        bool underlying_contract_multiplier_unit = 34;
        bool underlying_flow_schedule_type = 35;
        bool underlying_unit_of_measure = 36;
        bool underlying_unit_of_measure_qty = 37;
        bool underlying_price_unit_of_measure = 38;
        bool underlying_price_unit_of_measure_qty = 39;
        bool underlying_time_unit = 40;
        bool underlying_exercise_style = 41;
        bool underlying_coupon_rate = 42;
        bool underlying_security_exchange = 43;
        bool underlying_issuer = 44;
        bool encoded_underlying_issuer_len = 45;
        bool encoded_underlying_issuer = 46;
        bool underlying_security_desc = 47;
        bool encoded_underlying_security_desc_len = 48;
        bool encoded_underlying_security_desc = 49;
        bool underlying_cp_program = 50;
        bool underlying_cp_reg_type = 51;
        bool underlying_allocation_percent = 52;
        bool underlying_currency = 53;
        bool underlying_qty = 54;
        bool underlying_settlement_type = 55;
        bool underlying_cash_amount = 56;
        bool underlying_cash_type = 57;
        bool underlying_px = 58;
        bool underlying_dirty_price = 59;
        bool underlying_end_price = 60;
        bool underlying_start_value = 61;
        bool underlying_current_value = 62;
        bool underlying_end_value = 63;
        bool underlying_adjusted_quantity = 64;
        bool underlying_fx_rate = 65;
        bool underlying_fx_rate_calc = 66;
        bool underlying_cap_value = 67;
        bool underlying_settl_method = 68;
        bool underlying_put_or_call = 69;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
      string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
      string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
      string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
      int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
      string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
      string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
      string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
      string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
      string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
      string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
      string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
      string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
      string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
      double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
      double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
      double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
      double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
      string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
      string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
      int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
      double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
      double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
      string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
      string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
      string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
      string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
      string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
      string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
      double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
      string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
      int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
      double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
      int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
      int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
      string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
      double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
      string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
      double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
      string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
      int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
      double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
      string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
      string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
      int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
      string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
      string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
      int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
      string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
      string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
      string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
      double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
      string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
      double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
      int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
      double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
      string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
      double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
      double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
      double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
      double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
      double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
      double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
      double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
      double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
      int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
      double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
      string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
      int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
    
  // GROUPS
      repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
      repeated NoUnderlyingStips no_underlying_stips = 72;
      repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
    }

    message NoStipulations {
      message FieldPresence {
        bool stipulation_type = 1;
        bool stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
      string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
    }

    message NoLegs {
      message NoLegSecurityAltId {
        message FieldPresence {
          bool leg_security_alt_id = 1;
          bool leg_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
        string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
      }

      message NoLegStipulations {
        message FieldPresence {
          bool leg_stipulation_type = 1;
          bool leg_stipulation_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
        string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
      }

      message NoNestedPartyIds {
        message NoNestedPartySubIds {
          message FieldPresence {
            bool nested_party_sub_id = 1;
            bool nested_party_sub_id_type = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
          int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
        }

        message FieldPresence {
          bool nested_party_id = 1;
          bool nested_party_id_source = 2;
          bool nested_party_role = 3;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
        int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
        int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
      
  // GROUPS
        repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
      }

      message FieldPresence {
        bool leg_symbol = 1;
        bool leg_symbol_sfx = 2;
        bool leg_security_id = 3;
        bool leg_security_id_source = 4;
        bool leg_product = 5;
        bool leg_cfi_code = 6;
        bool leg_security_type = 7;
        bool leg_security_sub_type = 8;
        bool leg_maturity_month_year = 9;
        bool leg_maturity_date = 10;
        bool leg_maturity_time = 11;
        bool leg_coupon_payment_date = 12;
        bool leg_issue_date = 13;
        bool leg_repo_collateral_security_type = 14;
        bool leg_repurchase_term = 15;
        bool leg_repurchase_rate = 16;
        bool leg_factor = 17;
        bool leg_credit_rating = 18;
        bool leg_instr_registry = 19;
        bool leg_country_of_issue = 20;
        bool leg_state_or_province_of_issue = 21;
        bool leg_locale_of_issue = 22;
        bool leg_redemption_date = 23;
        bool leg_strike_price = 24;
        bool leg_strike_currency = 25;
        bool leg_opt_attribute = 26;
        bool leg_contract_multiplier = 27;
        bool leg_contract_multiplier_unit = 28;
        bool leg_flow_schedule_type = 29;
        bool leg_unit_of_measure = 30;
        bool leg_unit_of_measure_qty = 31;
        bool leg_price_unit_of_measure = 32;
        bool leg_price_unit_of_measure_qty = 33;
        bool leg_time_unit = 34;
        bool leg_exercise_style = 35;
        bool leg_coupon_rate = 36;
        bool leg_security_exchange = 37;
        bool leg_issuer = 38;
        bool encoded_leg_issuer_len = 39;
        bool encoded_leg_issuer = 40;
        bool leg_security_desc = 41;
        bool encoded_leg_security_desc_len = 42;
        bool encoded_leg_security_desc = 43;
        bool leg_ratio_qty = 44;
        bool leg_side = 45;
        bool leg_currency = 46;
        bool leg_pool = 47;
        bool leg_dated_date = 48;
        bool leg_contract_settl_month = 49;
        bool leg_interest_accrual_date = 50;
        bool leg_put_or_call = 51;
        bool leg_option_ratio = 52;
        bool leg_price = 53;
        bool leg_qty = 54;
        bool leg_order_qty = 55;
        bool leg_swap_type = 56;
        bool leg_settl_type = 57;
        bool leg_settl_date = 58;
        bool leg_benchmark_curve_currency = 59;
        bool leg_benchmark_curve_name = 60;
        bool leg_benchmark_curve_point = 61;
        bool leg_benchmark_price = 62;
        bool leg_benchmark_price_type = 63;
        bool leg_ref_id = 64;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
      string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
      string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
      string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
      int32 leg_product = 6;  // tag 607, name LegProduct, type INT
      string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
      string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
      string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
      string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
      string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
      string leg_maturity_time = 12;  // tag 1212, name LegMaturityTime, type TZTIMEONLY
      string leg_coupon_payment_date = 13;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
      string leg_issue_date = 14;  // tag 249, name LegIssueDate, type LOCALMKTDATE
      string leg_repo_collateral_security_type = 15;  // tag 250, name LegRepoCollateralSecurityType, type STRING
      int32 leg_repurchase_term = 16;  // tag 251, name LegRepurchaseTerm, type INT
      double leg_repurchase_rate = 17;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
      double leg_factor = 18;  // tag 253, name LegFactor, type FLOAT
      string leg_credit_rating = 19;  // tag 257, name LegCreditRating, type STRING
      string leg_instr_registry = 20;  // tag 599, name LegInstrRegistry, type STRING
      string leg_country_of_issue = 21;  // tag 596, name LegCountryOfIssue, type COUNTRY
      string leg_state_or_province_of_issue = 22;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
      string leg_locale_of_issue = 23;  // tag 598, name LegLocaleOfIssue, type STRING
      string leg_redemption_date = 24;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
      double leg_strike_price = 25;  // tag 612, name LegStrikePrice, type PRICE
      string leg_strike_currency = 26;  // tag 942, name LegStrikeCurrency, type CURRENCY
      int32 leg_opt_attribute = 27;  // tag 613, name LegOptAttribute, type CHAR
      double leg_contract_multiplier = 28;  // tag 614, name LegContractMultiplier, type FLOAT
      int32 leg_contract_multiplier_unit = 29;  // tag 1436, name LegContractMultiplierUnit, type INT
      int32 leg_flow_schedule_type = 30;  // tag 1440, name LegFlowScheduleType, type INT
      string leg_unit_of_measure = 31;  // tag 999, name LegUnitOfMeasure, type STRING
      double leg_unit_of_measure_qty = 32;  // tag 1224, name LegUnitOfMeasureQty, type QTY
      string leg_price_unit_of_measure = 33;  // tag 1421, name LegPriceUnitOfMeasure, type STRING
      double leg_price_unit_of_measure_qty = 34;  // tag 1422, name LegPriceUnitOfMeasureQty, type QTY
      string leg_time_unit = 35;  // tag 1001, name LegTimeUnit, type STRING
      int32 leg_exercise_style = 36;  // tag 1420, name LegExerciseStyle, type INT
      double leg_coupon_rate = 37;  // tag 615, name LegCouponRate, type PERCENTAGE
      string leg_security_exchange = 38;  // tag 616, name LegSecurityExchange, type EXCHANGE
      string leg_issuer = 39;  // tag 617, name LegIssuer, type STRING
      int32 encoded_leg_issuer_len = 40;  // tag 618, name EncodedLegIssuerLen, type LENGTH
      string encoded_leg_issuer = 41;  // tag 619, name EncodedLegIssuer, type DATA
      string leg_security_desc = 42;  // tag 620, name LegSecurityDesc, type STRING
      int32 encoded_leg_security_desc_len = 43;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
      string encoded_leg_security_desc = 44;  // tag 622, name EncodedLegSecurityDesc, type DATA
      double leg_ratio_qty = 45;  // tag 623, name LegRatioQty, type FLOAT
      int32 leg_side = 46;  // tag 624, name LegSide, type CHAR
      string leg_currency = 47;  // tag 556, name LegCurrency, type CURRENCY
      string leg_pool = 48;  // tag 740, name LegPool, type STRING
      string leg_dated_date = 49;  // tag 739, name LegDatedDate, type LOCALMKTDATE
      string leg_contract_settl_month = 50;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
      string leg_interest_accrual_date = 51;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
      int32 leg_put_or_call = 52;  // tag 1358, name LegPutOrCall, type INT
      double leg_option_ratio = 53;  // tag 1017, name LegOptionRatio, type FLOAT
      double leg_price = 54;  // tag 566, name LegPrice, type PRICE
      double leg_qty = 55;  // tag 687, name LegQty, type QTY
      double leg_order_qty = 56;  // tag 685, name LegOrderQty, type QTY
      int32 leg_swap_type = 57;  // tag 690, name LegSwapType, type INT
      int32 leg_settl_type = 58;  // tag 587, name LegSettlType, type CHAR
      string leg_settl_date = 59;  // tag 588, name LegSettlDate, type LOCALMKTDATE
      string leg_benchmark_curve_currency = 60;  // tag 676, name LegBenchmarkCurveCurrency, type CURRENCY
      string leg_benchmark_curve_name = 61;  // tag 677, name LegBenchmarkCurveName, type STRING
      string leg_benchmark_curve_point = 62;  // tag 678, name LegBenchmarkCurvePoint, type STRING
      double leg_benchmark_price = 63;  // tag 679, name LegBenchmarkPrice, type PRICE
      int32 leg_benchmark_price_type = 64;  // tag 680, name LegBenchmarkPriceType, type INT
      string leg_ref_id = 65;  // tag 654, name LegRefID, type STRING
    
  // GROUPS
      repeated NoLegSecurityAltId no_leg_security_alt_id = 66;
      repeated NoLegStipulations no_leg_stipulations = 67;
      repeated NoNestedPartyIds no_nested_party_ids = 68;
    }

    message NoQuoteQualifiers {
      message FieldPresence {
        bool quote_qualifier = 1;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 quote_qualifier = 2;  // tag 695, name QuoteQualifier, type CHAR
    }

    message NoPartyIds {
      message NoPartySubIds {
        message FieldPresence {
          bool party_sub_id = 1;
          bool party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
        int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
      }

      message FieldPresence {
        bool party_id = 1;
        bool party_id_source = 2;
        bool party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_id = 2;  // tag 448, name PartyID, type STRING
      int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
      int32 party_role = 4;  // tag 452, name PartyRole, type INT
    
  // GROUPS
      repeated NoPartySubIds no_party_sub_ids = 5;
    }

    message FieldPresence {
      bool symbol = 1;
      bool symbol_sfx = 2;
      bool security_id = 3;
      bool security_id_source = 4;
      bool product = 5;
      bool product_complex = 6;
      bool security_group = 7;
      bool cfi_code = 8;
      bool security_type = 9;
      bool security_sub_type = 10;
      bool maturity_month_year = 11;
      bool maturity_date = 12;
      bool maturity_time = 13;
      bool settle_on_open_flag = 14;
      bool instrmt_assignment_method = 15;
      bool security_status = 16;
      bool coupon_payment_date = 17;
      bool restructuring_type = 18;
      bool seniority = 19;
      bool notional_percentage_outstanding = 20;
      bool original_notional_percentage_outstanding = 21;
      bool attachment_point = 22;
      bool detachment_point = 23;
      bool issue_date = 24;
      bool repo_collateral_security_type = 25;
      bool repurchase_term = 26;
      bool repurchase_rate = 27;
      bool factor = 28;
      bool credit_rating = 29;
      bool instr_registry = 30;
      bool country_of_issue = 31;
      bool state_or_province_of_issue = 32;
      bool locale_of_issue = 33;
      bool redemption_date = 34;
      bool strike_price = 35;
      bool strike_currency = 36;
      bool strike_multiplier = 37;
      bool strike_value = 38;
      bool strike_price_determination_method = 39;
      bool strike_price_boundary_method = 40;
      bool strike_price_boundary_precision = 41;
      bool underlying_price_determination_method = 42;
      bool opt_attribute = 43;
      bool contract_multiplier = 44;
      bool contract_multiplier_unit = 45;
      bool flow_schedule_type = 46;
      bool min_price_increment = 47;
      bool min_price_increment_amount = 48;
      bool unit_of_measure = 49;
      bool unit_of_measure_qty = 50;
      bool price_unit_of_measure = 51;
      bool price_unit_of_measure_qty = 52;
      bool settl_method = 53;
      bool exercise_style = 54;
      bool opt_payout_type = 55;
      bool opt_payout_amount = 56;
      bool price_quote_method = 57;
      bool valuation_method = 58;
      bool list_method = 59;
      bool cap_price = 60;
      bool floor_price = 61;
      bool put_or_call = 62;
      bool flexible_indicator = 63;
      bool flex_product_eligibility_indicator = 64;
      bool time_unit = 65;
      bool coupon_rate = 66;
      bool security_exchange = 67;
      bool position_limit = 68;
      bool nt_position_limit = 69;
      bool issuer = 70;
      bool encoded_issuer_len = 71;
      bool encoded_issuer = 72;
      bool security_desc = 73;
      bool encoded_security_desc_len = 74;
      bool encoded_security_desc = 75;
      bool security_xml_len = 76;
      bool security_xml_data = 77;
      bool security_xml_schema = 78;
      bool pool = 79;
      bool contract_settl_month = 80;
      bool cp_program = 81;
      bool cp_reg_type = 82;
      bool dated_date = 83;
      bool interest_accrual_date = 84;
      bool agreement_desc = 85;
      bool agreement_id = 86;
      bool agreement_date = 87;
      bool agreement_currency = 88;
      bool termination_type = 89;
      bool start_date = 90;
      bool end_date = 91;
      bool delivery_type = 92;
      bool margin_ratio = 93;
      bool prev_close_px = 94;
      bool quote_request_type = 95;
      bool quote_type = 96;
      bool trading_session_id = 97;
      bool trading_session_sub_id = 98;
      bool trade_origination_date = 99;
      bool side = 100;
      bool qty_type = 101;
      bool order_qty = 102;
      bool cash_order_qty = 103;
      bool order_percent = 104;
      bool rounding_direction = 105;
      bool rounding_modulus = 106;
      bool settl_type = 107;
      bool settl_date = 108;
      bool settl_date2 = 109;
      bool order_qty2 = 110;
      bool currency = 111;
      bool account = 112;
      bool acct_id_source = 113;
      bool account_type = 114;
      bool quote_price_type = 115;
      bool ord_type = 116;
      bool expire_time = 117;
      bool transact_time = 118;
      bool spread = 119;
      bool benchmark_curve_currency = 120;
      bool benchmark_curve_name = 121;
      bool benchmark_curve_point = 122;
      bool benchmark_price = 123;
      bool benchmark_price_type = 124;
      bool benchmark_security_id = 125;
      bool benchmark_security_id_source = 126;
      bool price_type = 127;
      bool price = 128;
      bool price2 = 129;
      bool yield_type = 130;
      bool yield = 131;
      bool yield_calc_date = 132;
      bool yield_redemption_date = 133;
      bool yield_redemption_price = 134;
      bool yield_redemption_price_type = 135;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string symbol = 2;  // tag 55, name Symbol, type STRING
    string symbol_sfx = 3;  // tag 65, name SymbolSfx, type STRING
    string security_id = 4;  // tag 48, name SecurityID, type STRING
    string security_id_source = 5;  // tag 22, name SecurityIDSource, type STRING
    int32 product = 6;  // tag 460, name Product, type INT
    string product_complex = 7;  // tag 1227, name ProductComplex, type STRING
    string security_group = 8;  // tag 1151, name SecurityGroup, type STRING
    string cfi_code = 9;  // tag 461, name CFICode, type STRING
    string security_type = 10;  // tag 167, name SecurityType, type STRING
    string security_sub_type = 11;  // tag 762, name SecuritySubType, type STRING
    string maturity_month_year = 12;  // tag 200, name MaturityMonthYear, type MONTHYEAR
    string maturity_date = 13;  // tag 541, name MaturityDate, type LOCALMKTDATE
    string maturity_time = 14;  // tag 1079, name MaturityTime, type TZTIMEONLY
    string settle_on_open_flag = 15;  // tag 966, name SettleOnOpenFlag, type STRING
    int32 instrmt_assignment_method = 16;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
    string security_status = 17;  // tag 965, name SecurityStatus, type STRING
    string coupon_payment_date = 18;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
    string restructuring_type = 19;  // tag 1449, name RestructuringType, type STRING
    string seniority = 20;  // tag 1450, name Seniority, type STRING
    double notional_percentage_outstanding = 21;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
    double original_notional_percentage_outstanding = 22;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
    double attachment_point = 23;  // tag 1457, name AttachmentPoint, type PERCENTAGE
    double detachment_point = 24;  // tag 1458, name DetachmentPoint, type PERCENTAGE
    string issue_date = 25;  // tag 225, name IssueDate, type LOCALMKTDATE
    string repo_collateral_security_type = 26;  // tag 239, name RepoCollateralSecurityType, type STRING
    int32 repurchase_term = 27;  // tag 226, name RepurchaseTerm, type INT
    double repurchase_rate = 28;  // tag 227, name RepurchaseRate, type PERCENTAGE
    double factor = 29;  // tag 228, name Factor, type FLOAT
    string credit_rating = 30;  // tag 255, name CreditRating, type STRING
    string instr_registry = 31;  // tag 543, name InstrRegistry, type STRING
    string country_of_issue = 32;  // tag 470, name CountryOfIssue, type COUNTRY
    string state_or_province_of_issue = 33;  // tag 471, name StateOrProvinceOfIssue, type STRING
    string locale_of_issue = 34;  // tag 472, name LocaleOfIssue, type STRING
    string redemption_date = 35;  // tag 240, name RedemptionDate, type LOCALMKTDATE
    double strike_price = 36;  // tag 202, name StrikePrice, type PRICE
    string strike_currency = 37;  // tag 947, name StrikeCurrency, type CURRENCY
    double strike_multiplier = 38;  // tag 967, name StrikeMultiplier, type FLOAT
    double strike_value = 39;  // tag 968, name StrikeValue, type FLOAT
    int32 strike_price_determination_method = 40;  // tag 1478, name StrikePriceDeterminationMethod, type INT
    int32 strike_price_boundary_method = 41;  // tag 1479, name StrikePriceBoundaryMethod, type INT
    double strike_price_boundary_precision = 42;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
    int32 underlying_price_determination_method = 43;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
    int32 opt_attribute = 44;  // tag 206, name OptAttribute, type CHAR
    double contract_multiplier = 45;  // tag 231, name ContractMultiplier, type FLOAT
    int32 contract_multiplier_unit = 46;  // tag 1435, name ContractMultiplierUnit, type INT
    int32 flow_schedule_type = 47;  // tag 1439, name FlowScheduleType, type INT
    double min_price_increment = 48;  // tag 969, name MinPriceIncrement, type FLOAT
    double min_price_increment_amount = 49;  // tag 1146, name MinPriceIncrementAmount, type AMT
    string unit_of_measure = 50;  // tag 996, name UnitOfMeasure, type STRING
    double unit_of_measure_qty = 51;  // tag 1147, name UnitOfMeasureQty, type QTY
    string price_unit_of_measure = 52;  // tag 1191, name PriceUnitOfMeasure, type STRING
    double price_unit_of_measure_qty = 53;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
    int32 settl_method = 54;  // tag 1193, name SettlMethod, type CHAR
    int32 exercise_style = 55;  // tag 1194, name ExerciseStyle, type INT
    int32 opt_payout_type = 56;  // tag 1482, name OptPayoutType, type INT
    double opt_payout_amount = 57;  // tag 1195, name OptPayoutAmount, type AMT
    string price_quote_method = 58;  // tag 1196, name PriceQuoteMethod, type STRING
    string valuation_method = 59;  // tag 1197, name ValuationMethod, type STRING
    int32 list_method = 60;  // tag 1198, name ListMethod, type INT
    double cap_price = 61;  // tag 1199, name CapPrice, type PRICE
    double floor_price = 62;  // tag 1200, name FloorPrice, type PRICE
    int32 put_or_call = 63;  // tag 201, name PutOrCall, type INT
    bool flexible_indicator = 64;  // tag 1244, name FlexibleIndicator, type BOOLEAN
    bool flex_product_eligibility_indicator = 65;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
    string time_unit = 66;  // tag 997, name TimeUnit, type STRING
    double coupon_rate = 67;  // tag 223, name CouponRate, type PERCENTAGE
    string security_exchange = 68;  // tag 207, name SecurityExchange, type EXCHANGE
    int32 position_limit = 69;  // tag 970, name PositionLimit, type INT
    int32 nt_position_limit = 70;  // tag 971, name NTPositionLimit, type INT
    string issuer = 71;  // tag 106, name Issuer, type STRING
    int32 encoded_issuer_len = 72;  // tag 348, name EncodedIssuerLen, type LENGTH
    string encoded_issuer = 73;  // tag 349, name EncodedIssuer, type DATA
    string security_desc = 74;  // tag 107, name SecurityDesc, type STRING
    int32 encoded_security_desc_len = 75;  // tag 350, name EncodedSecurityDescLen, type LENGTH
    string encoded_security_desc = 76;  // tag 351, name EncodedSecurityDesc, type DATA
    int32 security_xml_len = 77;  // tag 1184, name SecurityXMLLen, type LENGTH
    string security_xml_data = 78;  // tag 1185, name SecurityXMLData, type XMLDATA
    string security_xml_schema = 79;  // tag 1186, name SecurityXMLSchema, type STRING
    string pool = 80;  // tag 691, name Pool, type STRING
    string contract_settl_month = 81;  // tag 667, name ContractSettlMonth, type MONTHYEAR
    int32 cp_program = 82;  // tag 875, name CPProgram, type INT
    string cp_reg_type = 83;  // tag 876, name CPRegType, type STRING
    string dated_date = 84;  // tag 873, name DatedDate, type LOCALMKTDATE
    string interest_accrual_date = 85;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
    string agreement_desc = 86;  // tag 913, name AgreementDesc, type STRING
    string agreement_id = 87;  // tag 914, name AgreementID, type STRING
    string agreement_date = 88;  // tag 915, name AgreementDate, type LOCALMKTDATE
    string agreement_currency = 89;  // tag 918, name AgreementCurrency, type CURRENCY
    int32 termination_type = 90;  // tag 788, name TerminationType, type INT
    string start_date = 91;  // tag 916, name StartDate, type LOCALMKTDATE
    string end_date = 92;  // tag 917, name EndDate, type LOCALMKTDATE
    int32 delivery_type = 93;  // tag 919, name DeliveryType, type INT
    double margin_ratio = 94;  // tag 898, name MarginRatio, type PERCENTAGE
    double prev_close_px = 95;  // tag 140, name PrevClosePx, type PRICE
    int32 quote_request_type = 96;  // tag 303, name QuoteRequestType, type INT
    int32 quote_type = 97;  // tag 537, name QuoteType, type INT
    string trading_session_id = 98;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 99;  // tag 625, name TradingSessionSubID, type STRING
    string trade_origination_date = 100;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
    int32 side = 101;  // tag 54, name Side, type CHAR
    int32 qty_type = 102;  // tag 854, name QtyType, type INT
    double order_qty = 103;  // tag 38, name OrderQty, type QTY
    double cash_order_qty = 104;  // tag 152, name CashOrderQty, type QTY
    double order_percent = 105;  // tag 516, name OrderPercent, type PERCENTAGE
    int32 rounding_direction = 106;  // tag 468, name RoundingDirection, type CHAR
    double rounding_modulus = 107;  // tag 469, name RoundingModulus, type FLOAT
    string settl_type = 108;  // tag 63, name SettlType, type STRING
    string settl_date = 109;  // tag 64, name SettlDate, type LOCALMKTDATE
    string settl_date2 = 110;  // tag 193, name SettlDate2, type LOCALMKTDATE
    double order_qty2 = 111;  // tag 192, name OrderQty2, type QTY
    string currency = 112;  // tag 15, name Currency, type CURRENCY
    string account = 113;  // tag 1, name Account, type STRING
    int32 acct_id_source = 114;  // tag 660, name AcctIDSource, type INT
    int32 account_type = 115;  // tag 581, name AccountType, type INT
    int32 quote_price_type = 116;  // tag 692, name QuotePriceType, type INT
    int32 ord_type = 117;  // tag 40, name OrdType, type CHAR
    uint64 expire_time = 118;  // tag 126, name ExpireTime, type UTCTIMESTAMP
    uint64 transact_time = 119;  // tag 60, name TransactTime, type UTCTIMESTAMP
    double spread = 120;  // tag 218, name Spread, type PRICEOFFSET
    string benchmark_curve_currency = 121;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
    string benchmark_curve_name = 122;  // tag 221, name BenchmarkCurveName, type STRING
    string benchmark_curve_point = 123;  // tag 222, name BenchmarkCurvePoint, type STRING
    double benchmark_price = 124;  // tag 662, name BenchmarkPrice, type PRICE
    int32 benchmark_price_type = 125;  // tag 663, name BenchmarkPriceType, type INT
    string benchmark_security_id = 126;  // tag 699, name BenchmarkSecurityID, type STRING
    string benchmark_security_id_source = 127;  // tag 761, name BenchmarkSecurityIDSource, type STRING
    int32 price_type = 128;  // tag 423, name PriceType, type INT
    double price = 129;  // tag 44, name Price, type PRICE
    double price2 = 130;  // tag 640, name Price2, type PRICE
    string yield_type = 131;  // tag 235, name YieldType, type STRING
    double yield = 132;  // tag 236, name Yield, type PERCENTAGE
    string yield_calc_date = 133;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
    string yield_redemption_date = 134;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
    double yield_redemption_price = 135;  // tag 697, name YieldRedemptionPrice, type PRICE
    int32 yield_redemption_price_type = 136;  // tag 698, name YieldRedemptionPriceType, type INT
  
  // GROUPS
    repeated NoSecurityAltId no_security_alt_id = 137;
    repeated NoEvents no_events = 138;
    repeated NoInstrumentParties no_instrument_parties = 139;
    repeated NoComplexEvents no_complex_events = 140;
    repeated NoUnderlyings no_underlyings = 141;
    repeated NoStipulations no_stipulations = 142;
    repeated NoLegs no_legs = 143;
    repeated NoQuoteQualifiers no_quote_qualifiers = 144;
    repeated NoPartyIds no_party_ids = 145;
  }

  message FieldPresence {
    bool quote_req_id = 1;
    bool rfq_req_id = 2;
    bool quote_request_reject_reason = 3;
    bool private_quote = 4;
    bool respondent_type = 5;
    bool pre_trade_anonymity = 6;
    bool text = 7;
    bool encoded_text_len = 8;
    bool encoded_text = 9;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string quote_req_id = 5;  // tag 131, name QuoteReqID, type STRING
  string rfq_req_id = 6;  // tag 644, name RFQReqID, type STRING
  int32 quote_request_reject_reason = 7;  // tag 658, name QuoteRequestRejectReason, type INT
  bool private_quote = 8;  // tag 1171, name PrivateQuote, type BOOLEAN
  int32 respondent_type = 9;  // tag 1172, name RespondentType, type INT
  bool pre_trade_anonymity = 10;  // tag 1091, name PreTradeAnonymity, type BOOLEAN
  string text = 11;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 12;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 13;  // tag 355, name EncodedText, type DATA

  // GROUPS
  repeated NoRootPartyIds no_root_party_ids = 14;
  repeated NoRelatedSym no_related_sym = 15;
}

message MarketDataSnapshotFullRefresh {
  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_time = 3;
      bool event_px = 4;
      bool event_text = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
    double event_px = 5;  // tag 867, name EventPx, type PRICE
    string event_text = 6;  // tag 868, name EventText, type STRING
  }

  message NoInstrumentParties {
    message NoInstrumentPartySubIds {
      message FieldPresence {
        bool instrument_party_sub_id = 1;
        bool instrument_party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
      int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
    }

    message FieldPresence {
      bool instrument_party_id = 1;
      bool instrument_party_id_source = 2;
      bool instrument_party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
    int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
    int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
  
  // GROUPS
    repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
  }

  message NoComplexEvents {
    message NoComplexEventDates {
      message NoComplexEventTimes {
        message FieldPresence {
          bool complex_event_start_time = 1;
          bool complex_event_end_time = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
        uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
      }

      message FieldPresence {
        bool complex_event_start_date = 1;
        bool complex_event_end_date = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
      uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
    
  // GROUPS
      repeated NoComplexEventTimes no_complex_event_times = 4;
    }

    message FieldPresence {
      bool complex_event_type = 1;
      bool complex_opt_payout_amount = 2;
      bool complex_event_price = 3;
      bool complex_event_price_boundary_method = 4;
      bool complex_event_price_boundary_precision = 5;
      bool complex_event_price_time_type = 6;
      bool complex_event_condition = 7;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
    double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
    double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
    int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
    double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
    int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
    int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
  
  // GROUPS
    repeated NoComplexEventDates no_complex_event_dates = 9;
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message NoUndlyInstrumentParties {
      message NoUndlyInstrumentPartySubIds {
        message FieldPresence {
          bool underlying_instrument_party_sub_id = 1;
          bool underlying_instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
        int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool underlying_instrument_party_id = 1;
        bool underlying_instrument_party_id_source = 2;
        bool underlying_instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
      int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
      int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_maturity_time = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_restructuring_type = 13;
      bool underlying_seniority = 14;
      bool underlying_notional_percentage_outstanding = 15;
      bool underlying_original_notional_percentage_outstanding = 16;
      bool underlying_attachment_point = 17;
      bool underlying_detachment_point = 18;
      bool underlying_issue_date = 19;
      bool underlying_repo_collateral_security_type = 20;
      bool underlying_repurchase_term = 21;
      bool underlying_repurchase_rate = 22;
      bool underlying_factor = 23;
      bool underlying_credit_rating = 24;
      bool underlying_instr_registry = 25;
      bool underlying_country_of_issue = 26;
      bool underlying_state_or_province_of_issue = 27;
      bool underlying_locale_of_issue = 28;
      bool underlying_redemption_date = 29;
      bool underlying_strike_price = 30;
      bool underlying_strike_currency = 31;
      bool underlying_opt_attribute = 32;
      bool underlying_contract_multiplier = 33;
      bool underlying_contract_multiplier_unit = 34;
      bool underlying_flow_schedule_type = 35;
      bool underlying_unit_of_measure = 36;
      bool underlying_unit_of_measure_qty = 37;
      bool underlying_price_unit_of_measure = 38;
      bool underlying_price_unit_of_measure_qty = 39;
      bool underlying_time_unit = 40;
      bool underlying_exercise_style = 41;
      bool underlying_coupon_rate = 42;
      bool underlying_security_exchange = 43;
      bool underlying_issuer = 44;
      bool encoded_underlying_issuer_len = 45;
      bool encoded_underlying_issuer = 46;
      bool underlying_security_desc = 47;
      bool encoded_underlying_security_desc_len = 48;
      bool encoded_underlying_security_desc = 49;
      bool underlying_cp_program = 50;
      bool underlying_cp_reg_type = 51;
      bool underlying_allocation_percent = 52;
      bool underlying_currency = 53;
      bool underlying_qty = 54;
      bool underlying_settlement_type = 55;
      bool underlying_cash_amount = 56;
      bool underlying_cash_type = 57;
      bool underlying_px = 58;
      bool underlying_dirty_price = 59;
      bool underlying_end_price = 60;
      bool underlying_start_value = 61;
      bool underlying_current_value = 62;
      bool underlying_end_value = 63;
      bool underlying_adjusted_quantity = 64;
      bool underlying_fx_rate = 65;
      bool underlying_fx_rate_calc = 66;
      bool underlying_cap_value = 67;
      bool underlying_settl_method = 68;
      bool underlying_put_or_call = 69;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
    string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
    double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
    double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
    string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
    int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
    string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
    double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
    string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
    double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
    string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
    int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
    double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
    double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
    string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
    int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
    double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
    string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
    double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
    double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
    double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
    int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
    double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
    string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
    int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
    repeated NoUnderlyingStips no_underlying_stips = 72;
    repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
  }

  message NoLegs {
    message NoLegSecurityAltId {
      message FieldPresence {
        bool leg_security_alt_id = 1;
        bool leg_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
      string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
    }

    message FieldPresence {
      bool leg_symbol = 1;
      bool leg_symbol_sfx = 2;
      bool leg_security_id = 3;
      bool leg_security_id_source = 4;
      bool leg_product = 5;
      bool leg_cfi_code = 6;
      bool leg_security_type = 7;
      bool leg_security_sub_type = 8;
      bool leg_maturity_month_year = 9;
      bool leg_maturity_date = 10;
      bool leg_maturity_time = 11;
      bool leg_coupon_payment_date = 12;
      bool leg_issue_date = 13;
      bool leg_repo_collateral_security_type = 14;
      bool leg_repurchase_term = 15;
      bool leg_repurchase_rate = 16;
      bool leg_factor = 17;
      bool leg_credit_rating = 18;
      bool leg_instr_registry = 19;
      bool leg_country_of_issue = 20;
      bool leg_state_or_province_of_issue = 21;
      bool leg_locale_of_issue = 22;
      bool leg_redemption_date = 23;
      bool leg_strike_price = 24;
      bool leg_strike_currency = 25;
      bool leg_opt_attribute = 26;
      bool leg_contract_multiplier = 27;
      bool leg_contract_multiplier_unit = 28;
      bool leg_flow_schedule_type = 29;
      bool leg_unit_of_measure = 30;
      bool leg_unit_of_measure_qty = 31;
      bool leg_price_unit_of_measure = 32;
      bool leg_price_unit_of_measure_qty = 33;
      bool leg_time_unit = 34;
      bool leg_exercise_style = 35;
      bool leg_coupon_rate = 36;
      bool leg_security_exchange = 37;
      bool leg_issuer = 38;
      bool encoded_leg_issuer_len = 39;
      bool encoded_leg_issuer = 40;
      bool leg_security_desc = 41;
      bool encoded_leg_security_desc_len = 42;
      bool encoded_leg_security_desc = 43;
      bool leg_ratio_qty = 44;
      bool leg_side = 45;
      bool leg_currency = 46;
      bool leg_pool = 47;
      bool leg_dated_date = 48;
      bool leg_contract_settl_month = 49;
      bool leg_interest_accrual_date = 50;
      bool leg_put_or_call = 51;
      bool leg_option_ratio = 52;
      bool leg_price = 53;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
    string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
    string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
    string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
    int32 leg_product = 6;  // tag 607, name LegProduct, type INT
    string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
    string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
    string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
    string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
    string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
    string leg_maturity_time = 12;  // tag 1212, name LegMaturityTime, type TZTIMEONLY
    string leg_coupon_payment_date = 13;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
    string leg_issue_date = 14;  // tag 249, name LegIssueDate, type LOCALMKTDATE
    string leg_repo_collateral_security_type = 15;  // tag 250, name LegRepoCollateralSecurityType, type STRING
    int32 leg_repurchase_term = 16;  // tag 251, name LegRepurchaseTerm, type INT
    double leg_repurchase_rate = 17;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
    double leg_factor = 18;  // tag 253, name LegFactor, type FLOAT
    string leg_credit_rating = 19;  // tag 257, name LegCreditRating, type STRING
    string leg_instr_registry = 20;  // tag 599, name LegInstrRegistry, type STRING
    string leg_country_of_issue = 21;  // tag 596, name LegCountryOfIssue, type COUNTRY
    string leg_state_or_province_of_issue = 22;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
    string leg_locale_of_issue = 23;  // tag 598, name LegLocaleOfIssue, type STRING
    string leg_redemption_date = 24;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
    double leg_strike_price = 25;  // tag 612, name LegStrikePrice, type PRICE
    string leg_strike_currency = 26;  // tag 942, name LegStrikeCurrency, type CURRENCY
    int32 leg_opt_attribute = 27;  // tag 613, name LegOptAttribute, type CHAR
    double leg_contract_multiplier = 28;  // tag 614, name LegContractMultiplier, type FLOAT
    int32 leg_contract_multiplier_unit = 29;  // tag 1436, name LegContractMultiplierUnit, type INT
    int32 leg_flow_schedule_type = 30;  // tag 1440, name LegFlowScheduleType, type INT
    string leg_unit_of_measure = 31;  // tag 999, name LegUnitOfMeasure, type STRING
    double leg_unit_of_measure_qty = 32;  // tag 1224, name LegUnitOfMeasureQty, type QTY
    string leg_price_unit_of_measure = 33;  // tag 1421, name LegPriceUnitOfMeasure, type STRING
    double leg_price_unit_of_measure_qty = 34;  // tag 1422, name LegPriceUnitOfMeasureQty, type QTY
    string leg_time_unit = 35;  // tag 1001, name LegTimeUnit, type STRING
    int32 leg_exercise_style = 36;  // tag 1420, name LegExerciseStyle, type INT
    double leg_coupon_rate = 37;  // tag 615, name LegCouponRate, type PERCENTAGE
    string leg_security_exchange = 38;  // tag 616, name LegSecurityExchange, type EXCHANGE
    string leg_issuer = 39;  // tag 617, name LegIssuer, type STRING
    int32 encoded_leg_issuer_len = 40;  // tag 618, name EncodedLegIssuerLen, type LENGTH
    string encoded_leg_issuer = 41;  // tag 619, name EncodedLegIssuer, type DATA
    string leg_security_desc = 42;  // tag 620, name LegSecurityDesc, type STRING
    int32 encoded_leg_security_desc_len = 43;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
    string encoded_leg_security_desc = 44;  // tag 622, name EncodedLegSecurityDesc, type DATA
    double leg_ratio_qty = 45;  // tag 623, name LegRatioQty, type FLOAT
    int32 leg_side = 46;  // tag 624, name LegSide, type CHAR
    string leg_currency = 47;  // tag 556, name LegCurrency, type CURRENCY
    string leg_pool = 48;  // tag 740, name LegPool, type STRING
    string leg_dated_date = 49;  // tag 739, name LegDatedDate, type LOCALMKTDATE
    string leg_contract_settl_month = 50;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
    string leg_interest_accrual_date = 51;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
    int32 leg_put_or_call = 52;  // tag 1358, name LegPutOrCall, type INT
    double leg_option_ratio = 53;  // tag 1017, name LegOptionRatio, type FLOAT
    double leg_price = 54;  // tag 566, name LegPrice, type PRICE
  
  // GROUPS
    repeated NoLegSecurityAltId no_leg_security_alt_id = 55;
  }

  message NoMdEntries {
    message NoRateSources {
      message FieldPresence {
        bool rate_source = 1;
        bool rate_source_type = 2;
        bool reference_page = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 rate_source = 2;  // tag 1446, name RateSource, type INT
      int32 rate_source_type = 3;  // tag 1447, name RateSourceType, type INT
      string reference_page = 4;  // tag 1448, name ReferencePage, type STRING
    }

    message NoOfSecSizes {
      message FieldPresence {
        bool md_sec_size_type = 1;
        bool md_sec_size = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 md_sec_size_type = 2;  // tag 1178, name MDSecSizeType, type INT
      double md_sec_size = 3;  // tag 1179, name MDSecSize, type QTY
    }

    message NoPartyIds {
      message NoPartySubIds {
        message FieldPresence {
          bool party_sub_id = 1;
          bool party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
        int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
      }

      message FieldPresence {
        bool party_id = 1;
        bool party_id_source = 2;
        bool party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_id = 2;  // tag 448, name PartyID, type STRING
      int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
      int32 party_role = 4;  // tag 452, name PartyRole, type INT
    
  // GROUPS
      repeated NoPartySubIds no_party_sub_ids = 5;
    }

    message FieldPresence {
      bool md_entry_type = 1;
      bool md_entry_id = 2;
      bool md_entry_px = 3;
      bool price_type = 4;
      bool yield_type = 5;
      bool yield = 6;
      bool yield_calc_date = 7;
      bool yield_redemption_date = 8;
      bool yield_redemption_price = 9;
      bool yield_redemption_price_type = 10;
      bool spread = 11;
      bool benchmark_curve_currency = 12;
      bool benchmark_curve_name = 13;
      bool benchmark_curve_point = 14;
      bool benchmark_price = 15;
      bool benchmark_price_type = 16;
      bool benchmark_security_id = 17;
      bool benchmark_security_id_source = 18;
      bool ord_type = 19;
      bool currency = 20;
      bool settl_currency = 21;
      bool md_entry_size = 22;
      bool lot_type = 23;
      bool md_entry_date = 24;
      bool md_entry_time = 25;
      bool tick_direction = 26;
      bool md_mkt = 27;
      bool trading_session_id = 28;
      bool trading_session_sub_id = 29;
      bool security_trading_status = 30;
      bool halt_reason = 31;
      bool quote_condition = 32;
      bool trade_condition = 33;
      bool md_entry_originator = 34;
      bool location_id = 35;
      bool desk_id = 36;
      bool open_close_settl_flag = 37;
      bool time_in_force = 38;
      bool expire_date = 39;
      bool expire_time = 40;
      bool min_qty = 41;
      bool exec_inst = 42;
      bool seller_days = 43;
      bool order_id = 44;
      bool secondary_order_id = 45;
      bool quote_entry_id = 46;
      bool md_entry_buyer = 47;
      bool md_entry_seller = 48;
      bool number_of_orders = 49;
      bool md_entry_position_no = 50;
      bool scope = 51;
      bool price_delta = 52;
      bool trd_type = 53;
      bool text = 54;
      bool encoded_text_len = 55;
      bool encoded_text = 56;
      bool md_price_level = 57;
      bool order_capacity = 58;
      bool md_origin_type = 59;
      bool high_px = 60;
      bool low_px = 61;
      bool first_px = 62;
      bool last_px = 63;
      bool trade_volume = 64;
      bool settl_type = 65;
      bool settl_date = 66;
      bool md_quote_type = 67;
      bool rpt_seq = 68;
      bool dealing_capacity = 69;
      bool md_entry_spot_rate = 70;
      bool md_entry_forward_points = 71;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 md_entry_type = 2;  // tag 269, name MDEntryType, type CHAR
    string md_entry_id = 3;  // tag 278, name MDEntryID, type STRING
    double md_entry_px = 4;  // tag 270, name MDEntryPx, type PRICE
    int32 price_type = 5;  // tag 423, name PriceType, type INT
    string yield_type = 6;  // tag 235, name YieldType, type STRING
    double yield = 7;  // tag 236, name Yield, type PERCENTAGE
    string yield_calc_date = 8;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
    string yield_redemption_date = 9;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
    double yield_redemption_price = 10;  // tag 697, name YieldRedemptionPrice, type PRICE
    int32 yield_redemption_price_type = 11;  // tag 698, name YieldRedemptionPriceType, type INT
    double spread = 12;  // tag 218, name Spread, type PRICEOFFSET
    string benchmark_curve_currency = 13;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
    string benchmark_curve_name = 14;  // tag 221, name BenchmarkCurveName, type STRING
    string benchmark_curve_point = 15;  // tag 222, name BenchmarkCurvePoint, type STRING
    double benchmark_price = 16;  // tag 662, name BenchmarkPrice, type PRICE
    int32 benchmark_price_type = 17;  // tag 663, name BenchmarkPriceType, type INT
    string benchmark_security_id = 18;  // tag 699, name BenchmarkSecurityID, type STRING
    string benchmark_security_id_source = 19;  // tag 761, name BenchmarkSecurityIDSource, type STRING
    int32 ord_type = 20;  // tag 40, name OrdType, type CHAR
    string currency = 21;  // tag 15, name Currency, type CURRENCY
    string settl_currency = 22;  // tag 120, name SettlCurrency, type CURRENCY
    double md_entry_size = 23;  // tag 271, name MDEntrySize, type QTY
    int32 lot_type = 24;  // tag 1093, name LotType, type CHAR
    uint64 md_entry_date = 25;  // tag 272, name MDEntryDate, type UTCDATEONLY
    uint64 md_entry_time = 26;  // tag 273, name MDEntryTime, type UTCTIMEONLY
    int32 tick_direction = 27;  // tag 274, name TickDirection, type CHAR
    string md_mkt = 28;  // tag 275, name MDMkt, type EXCHANGE
    string trading_session_id = 29;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 30;  // tag 625, name TradingSessionSubID, type STRING
    int32 security_trading_status = 31;  // tag 326, name SecurityTradingStatus, type INT
    int32 halt_reason = 32;  // tag 327, name HaltReason, type INT
    string quote_condition = 33;  // tag 276, name QuoteCondition, type MULTIPLESTRINGVALUE
    string trade_condition = 34;  // tag 277, name TradeCondition, type MULTIPLESTRINGVALUE
    string md_entry_originator = 35;  // tag 282, name MDEntryOriginator, type STRING
    string location_id = 36;  // tag 283, name LocationID, type STRING
    string desk_id = 37;  // tag 284, name DeskID, type STRING
    string open_close_settl_flag = 38;  // tag 286, name OpenCloseSettlFlag, type MULTIPLECHARVALUE
    int32 time_in_force = 39;  // tag 59, name TimeInForce, type CHAR
    string expire_date = 40;  // tag 432, name ExpireDate, type LOCALMKTDATE
    uint64 expire_time = 41;  // tag 126, name ExpireTime, type UTCTIMESTAMP
    double min_qty = 42;  // tag 110, name MinQty, type QTY
    string exec_inst = 43;  // tag 18, name ExecInst, type MULTIPLECHARVALUE
    int32 seller_days = 44;  // tag 287, name SellerDays, type INT
    string order_id = 45;  // tag 37, name OrderID, type STRING
    string secondary_order_id = 46;  // tag 198, name SecondaryOrderID, type STRING
    string quote_entry_id = 47;  // tag 299, name QuoteEntryID, type STRING
    string md_entry_buyer = 48;  // tag 288, name MDEntryBuyer, type STRING
    string md_entry_seller = 49;  // tag 289, name MDEntrySeller, type STRING
    int32 number_of_orders = 50;  // tag 346, name NumberOfOrders, type INT
    int32 md_entry_position_no = 51;  // tag 290, name MDEntryPositionNo, type INT
    string scope = 52;  // tag 546, name Scope, type MULTIPLECHARVALUE
    double price_delta = 53;  // tag 811, name PriceDelta, type FLOAT
    int32 trd_type = 54;  // tag 828, name TrdType, type INT
    string text = 55;  // tag 58, name Text, type STRING
    int32 encoded_text_len = 56;  // tag 354, name EncodedTextLen, type LENGTH
    string encoded_text = 57;  // tag 355, name EncodedText, type DATA
    int32 md_price_level = 58;  // tag 1023, name MDPriceLevel, type INT
    int32 order_capacity = 59;  // tag 528, name OrderCapacity, type CHAR
    int32 md_origin_type = 60;  // tag 1024, name MDOriginType, type INT
    double high_px = 61;  // tag 332, name HighPx, type PRICE
    double low_px = 62;  // tag 333, name LowPx, type PRICE
    double first_px = 63;  // tag 1025, name FirstPx, type PRICE
    double last_px = 64;  // tag 31, name LastPx, type PRICE
    double trade_volume = 65;  // tag 1020, name TradeVolume, type QTY
    string settl_type = 66;  // tag 63, name SettlType, type STRING
    string settl_date = 67;  // tag 64, name SettlDate, type LOCALMKTDATE
    int32 md_quote_type = 68;  // tag 1070, name MDQuoteType, type INT
    int32 rpt_seq = 69;  // tag 83, name RptSeq, type INT
    int32 dealing_capacity = 70;  // tag 1048, name DealingCapacity, type CHAR
    double md_entry_spot_rate = 71;  // tag 1026, name MDEntrySpotRate, type FLOAT
    double md_entry_forward_points = 72;  // tag 1027, name MDEntryForwardPoints, type PRICEOFFSET
  
  // GROUPS
    repeated NoRateSources no_rate_sources = 73;
    repeated NoOfSecSizes no_of_sec_sizes = 74;
    repeated NoPartyIds no_party_ids = 75;
  }

  message NoRoutingIds {
    message FieldPresence {
      bool routing_type = 1;
      bool routing_id = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 routing_type = 2;  // tag 216, name RoutingType, type INT
    string routing_id = 3;  // tag 217, name RoutingID, type STRING
  }

  message FieldPresence {
    bool appl_id = 1;
    bool appl_seq_num = 2;
    bool appl_last_seq_num = 3;
    bool appl_resend_flag = 4;
    bool tot_num_reports = 5;
    bool md_report_id = 6;
    bool clearing_business_date = 7;
    bool md_book_type = 8;
    bool md_sub_book_type = 9;
    bool market_depth = 10;
    bool md_feed_type = 11;
    bool refresh_indicator = 12;
    bool trade_date = 13;
    bool md_req_id = 14;
    bool md_stream_id = 15;
    bool symbol = 16;
    bool symbol_sfx = 17;
    bool security_id = 18;
    bool security_id_source = 19;
    bool product = 20;
    bool product_complex = 21;
    bool security_group = 22;
    bool cfi_code = 23;
    bool security_type = 24;
    bool security_sub_type = 25;
    bool maturity_month_year = 26;
    bool maturity_date = 27;
    bool maturity_time = 28;
    bool settle_on_open_flag = 29;
    bool instrmt_assignment_method = 30;
    bool security_status = 31;
    bool coupon_payment_date = 32;
    bool restructuring_type = 33;
    bool seniority = 34;
    bool notional_percentage_outstanding = 35;
    bool original_notional_percentage_outstanding = 36;
    bool attachment_point = 37;
    bool detachment_point = 38;
    bool issue_date = 39;
    bool repo_collateral_security_type = 40;
    bool repurchase_term = 41;
    bool repurchase_rate = 42;
    bool factor = 43;
    bool credit_rating = 44;
    bool instr_registry = 45;
    bool country_of_issue = 46;
    bool state_or_province_of_issue = 47;
    bool locale_of_issue = 48;
    bool redemption_date = 49;
    bool strike_price = 50;
    bool strike_currency = 51;
    bool strike_multiplier = 52;
    bool strike_value = 53;
    bool strike_price_determination_method = 54;
    bool strike_price_boundary_method = 55;
    bool strike_price_boundary_precision = 56;
    bool underlying_price_determination_method = 57;
    bool opt_attribute = 58;
    bool contract_multiplier = 59;
    bool contract_multiplier_unit = 60;
    bool flow_schedule_type = 61;
    bool min_price_increment = 62;
    bool min_price_increment_amount = 63;
    bool unit_of_measure = 64;
    bool unit_of_measure_qty = 65;
    bool price_unit_of_measure = 66;
    bool price_unit_of_measure_qty = 67;
    bool settl_method = 68;
    bool exercise_style = 69;
    bool opt_payout_type = 70;
    bool opt_payout_amount = 71;
    bool price_quote_method = 72;
    bool valuation_method = 73;
    bool list_method = 74;
    bool cap_price = 75;
    bool floor_price = 76;
    bool put_or_call = 77;
    bool flexible_indicator = 78;
    bool flex_product_eligibility_indicator = 79;
    bool time_unit = 80;
    bool coupon_rate = 81;
    bool security_exchange = 82;
    bool position_limit = 83;
    bool nt_position_limit = 84;
    bool issuer = 85;
    bool encoded_issuer_len = 86;
    bool encoded_issuer = 87;
    bool security_desc = 88;
    bool encoded_security_desc_len = 89;
    bool encoded_security_desc = 90;
    bool security_xml_len = 91;
    bool security_xml_data = 92;
    bool security_xml_schema = 93;
    bool pool = 94;
    bool contract_settl_month = 95;
    bool cp_program = 96;
    bool cp_reg_type = 97;
    bool dated_date = 98;
    bool interest_accrual_date = 99;
    bool financial_status = 100;
    bool corporate_action = 101;
    bool net_chg_prev_day = 102;
    bool appl_queue_depth = 103;
    bool appl_queue_resolution = 104;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string appl_id = 5;  // tag 1180, name ApplID, type STRING
  int32 appl_seq_num = 6;  // tag 1181, name ApplSeqNum, type SEQNUM
  int32 appl_last_seq_num = 7;  // tag 1350, name ApplLastSeqNum, type SEQNUM
  bool appl_resend_flag = 8;  // tag 1352, name ApplResendFlag, type BOOLEAN
  int32 tot_num_reports = 9;  // tag 911, name TotNumReports, type INT
  int32 md_report_id = 10;  // tag 963, name MDReportID, type INT
  string clearing_business_date = 11;  // tag 715, name ClearingBusinessDate, type LOCALMKTDATE
  int32 md_book_type = 12;  // tag 1021, name MDBookType, type INT
  int32 md_sub_book_type = 13;  // tag 1173, name MDSubBookType, type INT
  int32 market_depth = 14;  // tag 264, name MarketDepth, type INT
  string md_feed_type = 15;  // tag 1022, name MDFeedType, type STRING
  bool refresh_indicator = 16;  // tag 1187, name RefreshIndicator, type BOOLEAN
  string trade_date = 17;  // tag 75, name TradeDate, type LOCALMKTDATE
  string md_req_id = 18;  // tag 262, name MDReqID, type STRING
  string md_stream_id = 19;  // tag 1500, name MDStreamID, type STRING
  string symbol = 20;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 21;  // tag 65, name SymbolSfx, type STRING
  string security_id = 22;  // tag 48, name SecurityID, type STRING
  string security_id_source = 23;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 24;  // tag 460, name Product, type INT
  string product_complex = 25;  // tag 1227, name ProductComplex, type STRING
  string security_group = 26;  // tag 1151, name SecurityGroup, type STRING
  string cfi_code = 27;  // tag 461, name CFICode, type STRING
  string security_type = 28;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 29;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 30;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 31;  // tag 541, name MaturityDate, type LOCALMKTDATE
  string maturity_time = 32;  // tag 1079, name MaturityTime, type TZTIMEONLY
  string settle_on_open_flag = 33;  // tag 966, name SettleOnOpenFlag, type STRING
  int32 instrmt_assignment_method = 34;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
  string security_status = 35;  // tag 965, name SecurityStatus, type STRING
  string coupon_payment_date = 36;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string restructuring_type = 37;  // tag 1449, name RestructuringType, type STRING
  string seniority = 38;  // tag 1450, name Seniority, type STRING
  double notional_percentage_outstanding = 39;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
  double original_notional_percentage_outstanding = 40;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
  double attachment_point = 41;  // tag 1457, name AttachmentPoint, type PERCENTAGE
  double detachment_point = 42;  // tag 1458, name DetachmentPoint, type PERCENTAGE
  string issue_date = 43;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 44;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 45;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 46;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 47;  // tag 228, name Factor, type FLOAT
  string credit_rating = 48;  // tag 255, name CreditRating, type STRING
  string instr_registry = 49;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 50;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 51;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 52;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 53;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 54;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 55;  // tag 947, name StrikeCurrency, type CURRENCY
  double strike_multiplier = 56;  // tag 967, name StrikeMultiplier, type FLOAT
  double strike_value = 57;  // tag 968, name StrikeValue, type FLOAT
  int32 strike_price_determination_method = 58;  // tag 1478, name StrikePriceDeterminationMethod, type INT
  int32 strike_price_boundary_method = 59;  // tag 1479, name StrikePriceBoundaryMethod, type INT
  double strike_price_boundary_precision = 60;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
  int32 underlying_price_determination_method = 61;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
  int32 opt_attribute = 62;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 63;  // tag 231, name ContractMultiplier, type FLOAT
  int32 contract_multiplier_unit = 64;  // tag 1435, name ContractMultiplierUnit, type INT
  int32 flow_schedule_type = 65;  // tag 1439, name FlowScheduleType, type INT
  double min_price_increment = 66;  // tag 969, name MinPriceIncrement, type FLOAT
  double min_price_increment_amount = 67;  // tag 1146, name MinPriceIncrementAmount, type AMT
  string unit_of_measure = 68;  // tag 996, name UnitOfMeasure, type STRING
  double unit_of_measure_qty = 69;  // tag 1147, name UnitOfMeasureQty, type QTY
  string price_unit_of_measure = 70;  // tag 1191, name PriceUnitOfMeasure, type STRING
  double price_unit_of_measure_qty = 71;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
  int32 settl_method = 72;  // tag 1193, name SettlMethod, type CHAR
  int32 exercise_style = 73;  // tag 1194, name ExerciseStyle, type INT
  int32 opt_payout_type = 74;  // tag 1482, name OptPayoutType, type INT
  double opt_payout_amount = 75;  // tag 1195, name OptPayoutAmount, type AMT
  string price_quote_method = 76;  // tag 1196, name PriceQuoteMethod, type STRING
  string valuation_method = 77;  // tag 1197, name ValuationMethod, type STRING
  int32 list_method = 78;  // tag 1198, name ListMethod, type INT
  double cap_price = 79;  // tag 1199, name CapPrice, type PRICE
  double floor_price = 80;  // tag 1200, name FloorPrice, type PRICE
  int32 put_or_call = 81;  // tag 201, name PutOrCall, type INT
  bool flexible_indicator = 82;  // tag 1244, name FlexibleIndicator, type BOOLEAN
  bool flex_product_eligibility_indicator = 83;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
  string time_unit = 84;  // tag 997, name TimeUnit, type STRING
  double coupon_rate = 85;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 86;  // tag 207, name SecurityExchange, type EXCHANGE
  int32 position_limit = 87;  // tag 970, name PositionLimit, type INT
  int32 nt_position_limit = 88;  // tag 971, name NTPositionLimit, type INT
  string issuer = 89;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 90;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 91;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 92;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 93;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 94;  // tag 351, name EncodedSecurityDesc, type DATA
  int32 security_xml_len = 95;  // tag 1184, name SecurityXMLLen, type LENGTH
  string security_xml_data = 96;  // tag 1185, name SecurityXMLData, type XMLDATA
  string security_xml_schema = 97;  // tag 1186, name SecurityXMLSchema, type STRING
  string pool = 98;  // tag 691, name Pool, type STRING
  string contract_settl_month = 99;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 100;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 101;  // tag 876, name CPRegType, type STRING
  string dated_date = 102;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 103;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string financial_status = 104;  // tag 291, name FinancialStatus, type MULTIPLECHARVALUE
  string corporate_action = 105;  // tag 292, name CorporateAction, type MULTIPLECHARVALUE
  double net_chg_prev_day = 106;  // tag 451, name NetChgPrevDay, type PRICEOFFSET
  int32 appl_queue_depth = 107;  // tag 813, name ApplQueueDepth, type INT
  int32 appl_queue_resolution = 108;  // tag 814, name ApplQueueResolution, type INT

  // GROUPS
  repeated NoSecurityAltId no_security_alt_id = 109;
  repeated NoEvents no_events = 110;
  repeated NoInstrumentParties no_instrument_parties = 111;
  repeated NoComplexEvents no_complex_events = 112;
  repeated NoUnderlyings no_underlyings = 113;
  repeated NoLegs no_legs = 114;
  repeated NoMdEntries no_md_entries = 115;
  repeated NoRoutingIds no_routing_ids = 116;
}

message OrderCancelReject {
  message FieldPresence {
    bool order_id = 1;
    bool secondary_order_id = 2;
    bool secondary_cl_ord_id = 3;
    bool cl_ord_id = 4;
    bool cl_ord_link_id = 5;
    bool orig_cl_ord_id = 6;
    bool ord_status = 7;
    bool working_indicator = 8;
    bool orig_ord_mod_time = 9;
    bool list_id = 10;
    bool account = 11;
    bool acct_id_source = 12;
    bool account_type = 13;
    bool trade_origination_date = 14;
    bool trade_date = 15;
    bool transact_time = 16;
    bool cxl_rej_response_to = 17;
    bool cxl_rej_reason = 18;
    bool text = 19;
    bool encoded_text_len = 20;
    bool encoded_text = 21;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string order_id = 5;  // tag 37, name OrderID, type STRING
  string secondary_order_id = 6;  // tag 198, name SecondaryOrderID, type STRING
  string secondary_cl_ord_id = 7;  // tag 526, name SecondaryClOrdID, type STRING
  string cl_ord_id = 8;  // tag 11, name ClOrdID, type STRING
  string cl_ord_link_id = 9;  // tag 583, name ClOrdLinkID, type STRING
  string orig_cl_ord_id = 10;  // tag 41, name OrigClOrdID, type STRING
  int32 ord_status = 11;  // tag 39, name OrdStatus, type CHAR
  bool working_indicator = 12;  // tag 636, name WorkingIndicator, type BOOLEAN
  uint64 orig_ord_mod_time = 13;  // tag 586, name OrigOrdModTime, type UTCTIMESTAMP
  string list_id = 14;  // tag 66, name ListID, type STRING
  string account = 15;  // tag 1, name Account, type STRING
  int32 acct_id_source = 16;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 17;  // tag 581, name AccountType, type INT
  string trade_origination_date = 18;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
  string trade_date = 19;  // tag 75, name TradeDate, type LOCALMKTDATE
  uint64 transact_time = 20;  // tag 60, name TransactTime, type UTCTIMESTAMP
  int32 cxl_rej_response_to = 21;  // tag 434, name CxlRejResponseTo, type CHAR
  int32 cxl_rej_reason = 22;  // tag 102, name CxlRejReason, type INT
  string text = 23;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 24;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 25;  // tag 355, name EncodedText, type DATA
}

message ExecutionReport {
  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoContraBrokers {
    message FieldPresence {
      bool contra_broker = 1;
      bool contra_trader = 2;
      bool contra_trade_qty = 3;
      bool contra_trade_time = 4;
      bool contra_leg_ref_id = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string contra_broker = 2;  // tag 375, name ContraBroker, type STRING
    string contra_trader = 3;  // tag 337, name ContraTrader, type STRING
    double contra_trade_qty = 4;  // tag 437, name ContraTradeQty, type QTY
    uint64 contra_trade_time = 5;  // tag 438, name ContraTradeTime, type UTCTIMESTAMP
    string contra_leg_ref_id = 6;  // tag 655, name ContraLegRefID, type STRING
  }

  message NoAllocs {
    message NoNestedPartyIds {
      message NoNestedPartySubIds {
        message FieldPresence {
          bool nested_party_sub_id = 1;
          bool nested_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
        int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
      }

      message FieldPresence {
        bool nested_party_id = 1;
        bool nested_party_id_source = 2;
        bool nested_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
      int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
      int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
    
  // GROUPS
      repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
    }

    message FieldPresence {
      bool alloc_account = 1;
      bool alloc_acct_id_source = 2;
      bool alloc_settl_currency = 3;
      bool individual_alloc_id = 4;
      bool alloc_qty = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string alloc_account = 2;  // tag 79, name AllocAccount, type STRING
    int32 alloc_acct_id_source = 3;  // tag 661, name AllocAcctIDSource, type INT
    string alloc_settl_currency = 4;  // tag 736, name AllocSettlCurrency, type CURRENCY
    string individual_alloc_id = 5;  // tag 467, name IndividualAllocID, type STRING
    double alloc_qty = 6;  // tag 80, name AllocQty, type QTY
  
  // GROUPS
    repeated NoNestedPartyIds no_nested_party_ids = 7;
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_time = 3;
      bool event_px = 4;
      bool event_text = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
    double event_px = 5;  // tag 867, name EventPx, type PRICE
    string event_text = 6;  // tag 868, name EventText, type STRING
  }

  message NoInstrumentParties {
    message NoInstrumentPartySubIds {
      message FieldPresence {
        bool instrument_party_sub_id = 1;
        bool instrument_party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
      int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
    }

    message FieldPresence {
      bool instrument_party_id = 1;
      bool instrument_party_id_source = 2;
      bool instrument_party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
    int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
    int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
  
  // GROUPS
    repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
  }

  message NoComplexEvents {
    message NoComplexEventDates {
      message NoComplexEventTimes {
        message FieldPresence {
          bool complex_event_start_time = 1;
          bool complex_event_end_time = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
        uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
      }

      message FieldPresence {
        bool complex_event_start_date = 1;
        bool complex_event_end_date = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
      uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
    
  // GROUPS
      repeated NoComplexEventTimes no_complex_event_times = 4;
    }

    message FieldPresence {
      bool complex_event_type = 1;
      bool complex_opt_payout_amount = 2;
      bool complex_event_price = 3;
      bool complex_event_price_boundary_method = 4;
      bool complex_event_price_boundary_precision = 5;
      bool complex_event_price_time_type = 6;
      bool complex_event_condition = 7;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
    double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
    double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
    int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
    double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
    int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
    int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
  
  // GROUPS
    repeated NoComplexEventDates no_complex_event_dates = 9;
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message NoUndlyInstrumentParties {
      message NoUndlyInstrumentPartySubIds {
        message FieldPresence {
          bool underlying_instrument_party_sub_id = 1;
          bool underlying_instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
        int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool underlying_instrument_party_id = 1;
        bool underlying_instrument_party_id_source = 2;
        bool underlying_instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
      int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
      int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_maturity_time = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_restructuring_type = 13;
      bool underlying_seniority = 14;
      bool underlying_notional_percentage_outstanding = 15;
      bool underlying_original_notional_percentage_outstanding = 16;
      bool underlying_attachment_point = 17;
      bool underlying_detachment_point = 18;
      bool underlying_issue_date = 19;
      bool underlying_repo_collateral_security_type = 20;
      bool underlying_repurchase_term = 21;
      bool underlying_repurchase_rate = 22;
      bool underlying_factor = 23;
      bool underlying_credit_rating = 24;
      bool underlying_instr_registry = 25;
      bool underlying_country_of_issue = 26;
      bool underlying_state_or_province_of_issue = 27;
      bool underlying_locale_of_issue = 28;
      bool underlying_redemption_date = 29;
      bool underlying_strike_price = 30;
      bool underlying_strike_currency = 31;
      bool underlying_opt_attribute = 32;
      bool underlying_contract_multiplier = 33;
      bool underlying_contract_multiplier_unit = 34;
      bool underlying_flow_schedule_type = 35;
      bool underlying_unit_of_measure = 36;
      bool underlying_unit_of_measure_qty = 37;
      bool underlying_price_unit_of_measure = 38;
      bool underlying_price_unit_of_measure_qty = 39;
      bool underlying_time_unit = 40;
      bool underlying_exercise_style = 41;
      bool underlying_coupon_rate = 42;
      bool underlying_security_exchange = 43;
      bool underlying_issuer = 44;
      bool encoded_underlying_issuer_len = 45;
      bool encoded_underlying_issuer = 46;
      bool underlying_security_desc = 47;
      bool encoded_underlying_security_desc_len = 48;
      bool encoded_underlying_security_desc = 49;
      bool underlying_cp_program = 50;
      bool underlying_cp_reg_type = 51;
      bool underlying_allocation_percent = 52;
      bool underlying_currency = 53;
      bool underlying_qty = 54;
      bool underlying_settlement_type = 55;
      bool underlying_cash_amount = 56;
      bool underlying_cash_type = 57;
      bool underlying_px = 58;
      bool underlying_dirty_price = 59;
      bool underlying_end_price = 60;
      bool underlying_start_value = 61;
      bool underlying_current_value = 62;
      bool underlying_end_value = 63;
      bool underlying_adjusted_quantity = 64;
      bool underlying_fx_rate = 65;
      bool underlying_fx_rate_calc = 66;
      bool underlying_cap_value = 67;
      bool underlying_settl_method = 68;
      bool underlying_put_or_call = 69;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
    string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
    double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
    double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
    string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
    int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
    string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
    double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
    string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
    double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
    string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
    int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
    double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
    double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
    string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
    int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
    double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
    string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
    double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
    double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
    double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
    int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
    double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
    string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
    int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
    repeated NoUnderlyingStips no_underlying_stips = 72;
    repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
  }

  message NoStipulations {
    message FieldPresence {
      bool stipulation_type = 1;
      bool stipulation_value = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
    string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
  }

  message NoStrategyParameters {
    message FieldPresence {
      bool strategy_parameter_name = 1;
      bool strategy_parameter_type = 2;
      bool strategy_parameter_value = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string strategy_parameter_name = 2;  // tag 958, name StrategyParameterName, type STRING
    int32 strategy_parameter_type = 3;  // tag 959, name StrategyParameterType, type INT
    string strategy_parameter_value = 4;  // tag 960, name StrategyParameterValue, type STRING
  }

  message NoFills {
    message NoNested4PartyIds {
      message NoNested4PartySubIds {
        message FieldPresence {
          bool nested4party_sub_id = 1;
          bool nested4party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested4party_sub_id = 2;  // tag 1412, name Nested4PartySubID, type STRING
        int32 nested4party_sub_id_type = 3;  // tag 1411, name Nested4PartySubIDType, type INT
      }

      message FieldPresence {
        bool nested4party_id = 1;
        bool nested4party_id_source = 2;
        bool nested4party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested4party_id = 2;  // tag 1415, name Nested4PartyID, type STRING
      int32 nested4party_id_source = 3;  // tag 1416, name Nested4PartyIDSource, type CHAR
      int32 nested4party_role = 4;  // tag 1417, name Nested4PartyRole, type INT
    
  // GROUPS
      repeated NoNested4PartySubIds no_nested4party_sub_ids = 5;
    }

    message FieldPresence {
      bool fill_exec_id = 1;
      bool fill_px = 2;
      bool fill_qty = 3;
      bool fill_liquidity_ind = 4;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string fill_exec_id = 2;  // tag 1363, name FillExecID, type STRING
    double fill_px = 3;  // tag 1364, name FillPx, type PRICE
    double fill_qty = 4;  // tag 1365, name FillQty, type QTY
    int32 fill_liquidity_ind = 5;  // tag 1443, name FillLiquidityInd, type INT
  
  // GROUPS
    repeated NoNested4PartyIds no_nested4party_ids = 6;
  }

  message NoRateSources {
    message FieldPresence {
      bool rate_source = 1;
      bool rate_source_type = 2;
      bool reference_page = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 rate_source = 2;  // tag 1446, name RateSource, type INT
    int32 rate_source_type = 3;  // tag 1447, name RateSourceType, type INT
    string reference_page = 4;  // tag 1448, name ReferencePage, type STRING
  }

  message NoContAmts {
    message FieldPresence {
      bool cont_amt_type = 1;
      bool cont_amt_value = 2;
      bool cont_amt_curr = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 cont_amt_type = 2;  // tag 519, name ContAmtType, type INT
    double cont_amt_value = 3;  // tag 520, name ContAmtValue, type FLOAT
    string cont_amt_curr = 4;  // tag 521, name ContAmtCurr, type CURRENCY
  }

  message NoLegs {
    message NoLegSecurityAltId {
      message FieldPresence {
        bool leg_security_alt_id = 1;
        bool leg_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
      string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
    }

    message NoLegStipulations {
      message FieldPresence {
        bool leg_stipulation_type = 1;
        bool leg_stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
      string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
    }

    message NoLegAllocs {
      message NoNested2PartyIds {
        message NoNested2PartySubIds {
          message FieldPresence {
            bool nested2party_sub_id = 1;
            bool nested2party_sub_id_type = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          string nested2party_sub_id = 2;  // tag 760, name Nested2PartySubID, type STRING
          int32 nested2party_sub_id_type = 3;  // tag 807, name Nested2PartySubIDType, type INT
        }

        message FieldPresence {
          bool nested2party_id = 1;
          bool nested2party_id_source = 2;
          bool nested2party_role = 3;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested2party_id = 2;  // tag 757, name Nested2PartyID, type STRING
        int32 nested2party_id_source = 3;  // tag 758, name Nested2PartyIDSource, type CHAR
        int32 nested2party_role = 4;  // tag 759, name Nested2PartyRole, type INT
      
  // GROUPS
        repeated NoNested2PartySubIds no_nested2party_sub_ids = 5;
      }

      message FieldPresence {
        bool leg_alloc_account = 1;
        bool leg_individual_alloc_id = 2;
        bool leg_alloc_qty = 3;
        bool leg_alloc_acct_id_source = 4;
        bool leg_alloc_settl_currency = 5;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_alloc_account = 2;  // tag 671, name LegAllocAccount, type STRING
      string leg_individual_alloc_id = 3;  // tag 672, name LegIndividualAllocID, type STRING
      double leg_alloc_qty = 4;  // tag 673, name LegAllocQty, type QTY
      string leg_alloc_acct_id_source = 5;  // tag 674, name LegAllocAcctIDSource, type STRING
      string leg_alloc_settl_currency = 6;  // tag 1367, name LegAllocSettlCurrency, type CURRENCY
    
  // GROUPS
      repeated NoNested2PartyIds no_nested2party_ids = 7;
    }

    message NoNested3PartyIds {
      message NoNested3PartySubIds {
        message FieldPresence {
          bool nested3party_sub_id = 1;
          bool nested3party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested3party_sub_id = 2;  // tag 953, name Nested3PartySubID, type STRING
        int32 nested3party_sub_id_type = 3;  // tag 954, name Nested3PartySubIDType, type INT
      }

      message FieldPresence {
        bool nested3party_id = 1;
        bool nested3party_id_source = 2;
        bool nested3party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested3party_id = 2;  // tag 949, name Nested3PartyID, type STRING
      int32 nested3party_id_source = 3;  // tag 950, name Nested3PartyIDSource, type CHAR
      int32 nested3party_role = 4;  // tag 951, name Nested3PartyRole, type INT
    
  // GROUPS
      repeated NoNested3PartySubIds no_nested3party_sub_ids = 5;
    }

    message FieldPresence {
      bool leg_symbol = 1;
      bool leg_symbol_sfx = 2;
      bool leg_security_id = 3;
      bool leg_security_id_source = 4;
      bool leg_product = 5;
      bool leg_cfi_code = 6;
      bool leg_security_type = 7;
      bool leg_security_sub_type = 8;
      bool leg_maturity_month_year = 9;
      bool leg_maturity_date = 10;
      bool leg_maturity_time = 11;
      bool leg_coupon_payment_date = 12;
      bool leg_issue_date = 13;
      bool leg_repo_collateral_security_type = 14;
      bool leg_repurchase_term = 15;
      bool leg_repurchase_rate = 16;
      bool leg_factor = 17;
      bool leg_credit_rating = 18;
      bool leg_instr_registry = 19;
      bool leg_country_of_issue = 20;
      bool leg_state_or_province_of_issue = 21;
      bool leg_locale_of_issue = 22;
      bool leg_redemption_date = 23;
      bool leg_strike_price = 24;
      bool leg_strike_currency = 25;
      bool leg_opt_attribute = 26;
      bool leg_contract_multiplier = 27;
      bool leg_contract_multiplier_unit = 28;
      bool leg_flow_schedule_type = 29;
      bool leg_unit_of_measure = 30;
      bool leg_unit_of_measure_qty = 31;
      bool leg_price_unit_of_measure = 32;
      bool leg_price_unit_of_measure_qty = 33;
      bool leg_time_unit = 34;
      bool leg_exercise_style = 35;
      bool leg_coupon_rate = 36;
      bool leg_security_exchange = 37;
      bool leg_issuer = 38;
      bool encoded_leg_issuer_len = 39;
      bool encoded_leg_issuer = 40;
      bool leg_security_desc = 41;
      bool encoded_leg_security_desc_len = 42;
      bool encoded_leg_security_desc = 43;
      bool leg_ratio_qty = 44;
      bool leg_side = 45;
      bool leg_currency = 46;
      bool leg_pool = 47;
      bool leg_dated_date = 48;
      bool leg_contract_settl_month = 49;
      bool leg_interest_accrual_date = 50;
      bool leg_put_or_call = 51;
      bool leg_option_ratio = 52;
      bool leg_price = 53;
      bool leg_qty = 54;
      bool leg_order_qty = 55;
      bool leg_swap_type = 56;
      bool leg_alloc_id = 57;
      bool leg_position_effect = 58;
      bool leg_covered_or_uncovered = 59;
      bool leg_ref_id = 60;
      bool leg_settl_type = 61;
      bool leg_settl_date = 62;
      bool leg_last_px = 63;
      bool leg_settl_currency = 64;
      bool leg_last_forward_points = 65;
      bool leg_calculated_ccy_last_qty = 66;
      bool leg_gross_trade_amt = 67;
      bool leg_volatility = 68;
      bool leg_dividend_yield = 69;
      bool leg_currency_ratio = 70;
      bool leg_exec_inst = 71;
      bool leg_last_qty = 72;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
    string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
    string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
    string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
    int32 leg_product = 6;  // tag 607, name LegProduct, type INT
    string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
    string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
    string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
    string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
    string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
    string leg_maturity_time = 12;  // tag 1212, name LegMaturityTime, type TZTIMEONLY
    string leg_coupon_payment_date = 13;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
    string leg_issue_date = 14;  // tag 249, name LegIssueDate, type LOCALMKTDATE
    string leg_repo_collateral_security_type = 15;  // tag 250, name LegRepoCollateralSecurityType, type STRING
    int32 leg_repurchase_term = 16;  // tag 251, name LegRepurchaseTerm, type INT
    double leg_repurchase_rate = 17;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
    double leg_factor = 18;  // tag 253, name LegFactor, type FLOAT
    string leg_credit_rating = 19;  // tag 257, name LegCreditRating, type STRING
    string leg_instr_registry = 20;  // tag 599, name LegInstrRegistry, type STRING
    string leg_country_of_issue = 21;  // tag 596, name LegCountryOfIssue, type COUNTRY
    string leg_state_or_province_of_issue = 22;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
    string leg_locale_of_issue = 23;  // tag 598, name LegLocaleOfIssue, type STRING
    string leg_redemption_date = 24;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
    double leg_strike_price = 25;  // tag 612, name LegStrikePrice, type PRICE
    string leg_strike_currency = 26;  // tag 942, name LegStrikeCurrency, type CURRENCY
    int32 leg_opt_attribute = 27;  // tag 613, name LegOptAttribute, type CHAR
    double leg_contract_multiplier = 28;  // tag 614, name LegContractMultiplier, type FLOAT
    int32 leg_contract_multiplier_unit = 29;  // tag 1436, name LegContractMultiplierUnit, type INT
    int32 leg_flow_schedule_type = 30;  // tag 1440, name LegFlowScheduleType, type INT
    string leg_unit_of_measure = 31;  // tag 999, name LegUnitOfMeasure, type STRING
    double leg_unit_of_measure_qty = 32;  // tag 1224, name LegUnitOfMeasureQty, type QTY
    string leg_price_unit_of_measure = 33;  // tag 1421, name LegPriceUnitOfMeasure, type STRING
    double leg_price_unit_of_measure_qty = 34;  // tag 1422, name LegPriceUnitOfMeasureQty, type QTY
    string leg_time_unit = 35;  // tag 1001, name LegTimeUnit, type STRING
    int32 leg_exercise_style = 36;  // tag 1420, name LegExerciseStyle, type INT
    double leg_coupon_rate = 37;  // tag 615, name LegCouponRate, type PERCENTAGE
    string leg_security_exchange = 38;  // tag 616, name LegSecurityExchange, type EXCHANGE
    string leg_issuer = 39;  // tag 617, name LegIssuer, type STRING
    int32 encoded_leg_issuer_len = 40;  // tag 618, name EncodedLegIssuerLen, type LENGTH
    string encoded_leg_issuer = 41;  // tag 619, name EncodedLegIssuer, type DATA
    string leg_security_desc = 42;  // tag 620, name LegSecurityDesc, type STRING
    int32 encoded_leg_security_desc_len = 43;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
    string encoded_leg_security_desc = 44;  // tag 622, name EncodedLegSecurityDesc, type DATA
    double leg_ratio_qty = 45;  // tag 623, name LegRatioQty, type FLOAT
    int32 leg_side = 46;  // tag 624, name LegSide, type CHAR
    string leg_currency = 47;  // tag 556, name LegCurrency, type CURRENCY
    string leg_pool = 48;  // tag 740, name LegPool, type STRING
    string leg_dated_date = 49;  // tag 739, name LegDatedDate, type LOCALMKTDATE
    string leg_contract_settl_month = 50;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
    string leg_interest_accrual_date = 51;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
    int32 leg_put_or_call = 52;  // tag 1358, name LegPutOrCall, type INT
    double leg_option_ratio = 53;  // tag 1017, name LegOptionRatio, type FLOAT
    double leg_price = 54;  // tag 566, name LegPrice, type PRICE
    double leg_qty = 55;  // tag 687, name LegQty, type QTY
    double leg_order_qty = 56;  // tag 685, name LegOrderQty, type QTY
    int32 leg_swap_type = 57;  // tag 690, name LegSwapType, type INT
    string leg_alloc_id = 58;  // tag 1366, name LegAllocID, type STRING
    int32 leg_position_effect = 59;  // tag 564, name LegPositionEffect, type CHAR
    int32 leg_covered_or_uncovered = 60;  // tag 565, name LegCoveredOrUncovered, type INT
    string leg_ref_id = 61;  // tag 654, name LegRefID, type STRING
    int32 leg_settl_type = 62;  // tag 587, name LegSettlType, type CHAR
    string leg_settl_date = 63;  // tag 588, name LegSettlDate, type LOCALMKTDATE
    double leg_last_px = 64;  // tag 637, name LegLastPx, type PRICE
    string leg_settl_currency = 65;  // tag 675, name LegSettlCurrency, type CURRENCY
    double leg_last_forward_points = 66;  // tag 1073, name LegLastForwardPoints, type PRICEOFFSET
    double leg_calculated_ccy_last_qty = 67;  // tag 1074, name LegCalculatedCcyLastQty, type QTY
    double leg_gross_trade_amt = 68;  // tag 1075, name LegGrossTradeAmt, type AMT
    double leg_volatility = 69;  // tag 1379, name LegVolatility, type FLOAT
    double leg_dividend_yield = 70;  // tag 1381, name LegDividendYield, type PERCENTAGE
    double leg_currency_ratio = 71;  // tag 1383, name LegCurrencyRatio, type FLOAT
    string leg_exec_inst = 72;  // tag 1384, name LegExecInst, type MULTIPLECHARVALUE
    double leg_last_qty = 73;  // tag 1418, name LegLastQty, type QTY
  
  // GROUPS
    repeated NoLegSecurityAltId no_leg_security_alt_id = 74;
    repeated NoLegStipulations no_leg_stipulations = 75;
    repeated NoLegAllocs no_leg_allocs = 76;
    repeated NoNested3PartyIds no_nested3party_ids = 77;
  }

  message NoMiscFees {
    message FieldPresence {
      bool misc_fee_amt = 1;
      bool misc_fee_curr = 2;
      bool misc_fee_type = 3;
      bool misc_fee_basis = 4;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    double misc_fee_amt = 2;  // tag 137, name MiscFeeAmt, type AMT
    string misc_fee_curr = 3;  // tag 138, name MiscFeeCurr, type CURRENCY
    string misc_fee_type = 4;  // tag 139, name MiscFeeType, type STRING
    int32 misc_fee_basis = 5;  // tag 891, name MiscFeeBasis, type INT
  }

  message NoTrdRegTimestamps {
    message FieldPresence {
      bool trd_reg_timestamp = 1;
      bool trd_reg_timestamp_type = 2;
      bool trd_reg_timestamp_origin = 3;
      bool desk_type = 4;
      bool desk_type_source = 5;
      bool desk_order_handling_inst = 6;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    uint64 trd_reg_timestamp = 2;  // tag 769, name TrdRegTimestamp, type UTCTIMESTAMP
    int32 trd_reg_timestamp_type = 3;  // tag 770, name TrdRegTimestampType, type INT
    string trd_reg_timestamp_origin = 4;  // tag 771, name TrdRegTimestampOrigin, type STRING
    string desk_type = 5;  // tag 1033, name DeskType, type STRING
    int32 desk_type_source = 6;  // tag 1034, name DeskTypeSource, type INT
    string desk_order_handling_inst = 7;  // tag 1035, name DeskOrderHandlingInst, type MULTIPLESTRINGVALUE
  }

  message FieldPresence {
    bool appl_id = 1;
    bool appl_seq_num = 2;
    bool appl_last_seq_num = 3;
    bool appl_resend_flag = 4;
    bool order_id = 5;
    bool secondary_order_id = 6;
    bool secondary_cl_ord_id = 7;
    bool secondary_exec_id = 8;
    bool cl_ord_id = 9;
    bool orig_cl_ord_id = 10;
    bool cl_ord_link_id = 11;
    bool quote_resp_id = 12;
    bool ord_status_req_id = 13;
    bool mass_status_req_id = 14;
    bool host_cross_id = 15;
    bool tot_num_reports = 16;
    bool last_rpt_requested = 17;
    bool trade_origination_date = 18;
    bool list_id = 19;
    bool cross_id = 20;
    bool orig_cross_id = 21;
    bool cross_type = 22;
    bool trd_match_id = 23;
    bool exec_id = 24;
    bool exec_ref_id = 25;
    bool exec_type = 26;
    bool ord_status = 27;
    bool working_indicator = 28;
    bool ord_rej_reason = 29;
    bool exec_restatement_reason = 30;
    bool account = 31;
    bool acct_id_source = 32;
    bool account_type = 33;
    bool day_booking_inst = 34;
    bool booking_unit = 35;
    bool prealloc_method = 36;
    bool alloc_id = 37;
    bool settl_type = 38;
    bool settl_date = 39;
    bool match_type = 40;
    bool order_category = 41;
    bool cash_margin = 42;
    bool clearing_fee_indicator = 43;
    bool symbol = 44;
    bool symbol_sfx = 45;
    bool security_id = 46;
    bool security_id_source = 47;
    bool product = 48;
    bool product_complex = 49;
    bool security_group = 50;
    bool cfi_code = 51;
    bool security_type = 52;
    bool security_sub_type = 53;
    bool maturity_month_year = 54;
    bool maturity_date = 55;
    bool maturity_time = 56;
    bool settle_on_open_flag = 57;
    bool instrmt_assignment_method = 58;
    bool security_status = 59;
    bool coupon_payment_date = 60;
    bool restructuring_type = 61;
    bool seniority = 62;
    bool notional_percentage_outstanding = 63;
    bool original_notional_percentage_outstanding = 64;
    bool attachment_point = 65;
    bool detachment_point = 66;
    bool issue_date = 67;
    bool repo_collateral_security_type = 68;
    bool repurchase_term = 69;
    bool repurchase_rate = 70;
    bool factor = 71;
    bool credit_rating = 72;
    bool instr_registry = 73;
    bool country_of_issue = 74;
    bool state_or_province_of_issue = 75;
    bool locale_of_issue = 76;
    bool redemption_date = 77;
    bool strike_price = 78;
    bool strike_currency = 79;
    bool strike_multiplier = 80;
    bool strike_value = 81;
    bool strike_price_determination_method = 82;
    bool strike_price_boundary_method = 83;
    bool strike_price_boundary_precision = 84;
    bool underlying_price_determination_method = 85;
    bool opt_attribute = 86;
    bool contract_multiplier = 87;
    bool contract_multiplier_unit = 88;
    bool flow_schedule_type = 89;
    bool min_price_increment = 90;
    bool min_price_increment_amount = 91;
    bool unit_of_measure = 92;
    bool unit_of_measure_qty = 93;
    bool price_unit_of_measure = 94;
    bool price_unit_of_measure_qty = 95;
    bool settl_method = 96;
    bool exercise_style = 97;
    bool opt_payout_type = 98;
    bool opt_payout_amount = 99;
    bool price_quote_method = 100;
    bool valuation_method = 101;
    bool list_method = 102;
    bool cap_price = 103;
    bool floor_price = 104;
    bool put_or_call = 105;
    bool flexible_indicator = 106;
    bool flex_product_eligibility_indicator = 107;
    bool time_unit = 108;
    bool coupon_rate = 109;
    bool security_exchange = 110;
    bool position_limit = 111;
    bool nt_position_limit = 112;
    bool issuer = 113;
    bool encoded_issuer_len = 114;
    bool encoded_issuer = 115;
    bool security_desc = 116;
    bool encoded_security_desc_len = 117;
    bool encoded_security_desc = 118;
    bool security_xml_len = 119;
    bool security_xml_data = 120;
    bool security_xml_schema = 121;
    bool pool = 122;
    bool contract_settl_month = 123;
    bool cp_program = 124;
    bool cp_reg_type = 125;
    bool dated_date = 126;
    bool interest_accrual_date = 127;
    bool agreement_desc = 128;
    bool agreement_id = 129;
    bool agreement_date = 130;
    bool agreement_currency = 131;
    bool termination_type = 132;
    bool start_date = 133;
    bool end_date = 134;
    bool delivery_type = 135;
    bool margin_ratio = 136;
    bool side = 137;
    bool qty_type = 138;
    bool order_qty = 139;
    bool cash_order_qty = 140;
    bool order_percent = 141;
    bool rounding_direction = 142;
    bool rounding_modulus = 143;
    bool lot_type = 144;
    bool ord_type = 145;
    bool price_type = 146;
    bool price = 147;
    bool price_protection_scope = 148;
    bool stop_px = 149;
    bool trigger_type = 150;
    bool trigger_action = 151;
    bool trigger_price = 152;
    bool trigger_symbol = 153;
    bool trigger_security_id = 154;
    bool trigger_security_id_source = 155;
    bool trigger_security_desc = 156;
    bool trigger_price_type = 157;
    bool trigger_price_type_scope = 158;
    bool trigger_price_direction = 159;
    bool trigger_new_price = 160;
    bool trigger_order_type = 161;
    bool trigger_new_qty = 162;
    bool trigger_trading_session_id = 163;
    bool trigger_trading_session_sub_id = 164;
    bool peg_offset_value = 165;
    bool peg_price_type = 166;
    bool peg_move_type = 167;
    bool peg_offset_type = 168;
    bool peg_limit_type = 169;
    bool peg_round_direction = 170;
    bool peg_scope = 171;
    bool peg_security_id_source = 172;
    bool peg_security_id = 173;
    bool peg_symbol = 174;
    bool peg_security_desc = 175;
    bool discretion_inst = 176;
    bool discretion_offset_value = 177;
    bool discretion_move_type = 178;
    bool discretion_offset_type = 179;
    bool discretion_limit_type = 180;
    bool discretion_round_direction = 181;
    bool discretion_scope = 182;
    bool pegged_price = 183;
    bool pegged_ref_price = 184;
    bool discretion_price = 185;
    bool target_strategy = 186;
    bool target_strategy_parameters = 187;
    bool participation_rate = 188;
    bool target_strategy_performance = 189;
    bool currency = 190;
    bool compliance_id = 191;
    bool solicited_flag = 192;
    bool time_in_force = 193;
    bool effective_time = 194;
    bool expire_date = 195;
    bool expire_time = 196;
    bool exec_inst = 197;
    bool aggressor_indicator = 198;
    bool order_capacity = 199;
    bool order_restrictions = 200;
    bool pre_trade_anonymity = 201;
    bool cust_order_capacity = 202;
    bool last_qty = 203;
    bool calculated_ccy_last_qty = 204;
    bool last_swap_points = 205;
    bool underlying_last_qty = 206;
    bool last_px = 207;
    bool underlying_last_px = 208;
    bool last_par_px = 209;
    bool last_spot_rate = 210;
    bool last_forward_points = 211;
    bool last_mkt = 212;
    bool trading_session_id = 213;
    bool trading_session_sub_id = 214;
    bool time_bracket = 215;
    bool last_capacity = 216;
    bool leaves_qty = 217;
    bool cum_qty = 218;
    bool avg_px = 219;
    bool day_order_qty = 220;
    bool day_cum_qty = 221;
    bool day_avg_px = 222;
    bool tot_no_fills = 223;
    bool last_fragment = 224;
    bool gt_booking_inst = 225;
    bool trade_date = 226;
    bool transact_time = 227;
    bool report_to_exch = 228;
    bool commission = 229;
    bool comm_type = 230;
    bool comm_currency = 231;
    bool fund_renew_waiv = 232;
    bool spread = 233;
    bool benchmark_curve_currency = 234;
    bool benchmark_curve_name = 235;
    bool benchmark_curve_point = 236;
    bool benchmark_price = 237;
    bool benchmark_price_type = 238;
    bool benchmark_security_id = 239;
    bool benchmark_security_id_source = 240;
    bool yield_type = 241;
    bool yield = 242;
    bool yield_calc_date = 243;
    bool yield_redemption_date = 244;
    bool yield_redemption_price = 245;
    bool yield_redemption_price_type = 246;
    bool gross_trade_amt = 247;
    bool num_days_interest = 248;
    bool ex_date = 249;
    bool accrued_interest_rate = 250;
    bool accrued_interest_amt = 251;
    bool interest_at_maturity = 252;
    bool end_accrued_interest_amt = 253;
    bool start_cash = 254;
    bool end_cash = 255;
    bool traded_flat_switch = 256;
    bool basis_feature_date = 257;
    bool basis_feature_price = 258;
    bool concession = 259;
    bool total_takedown = 260;
    bool net_money = 261;
    bool settl_curr_amt = 262;
    bool settl_currency = 263;
    bool settl_curr_fx_rate = 264;
    bool settl_curr_fx_rate_calc = 265;
    bool handl_inst = 266;
    bool min_qty = 267;
    bool match_increment = 268;
    bool max_price_levels = 269;
    bool display_qty = 270;
    bool secondary_display_qty = 271;
    bool display_when = 272;
    bool display_method = 273;
    bool display_low_qty = 274;
    bool display_high_qty = 275;
    bool display_min_incr = 276;
    bool refresh_qty = 277;
    bool max_floor = 278;
    bool position_effect = 279;
    bool max_show = 280;
    bool booking_type = 281;
    bool text = 282;
    bool encoded_text_len = 283;
    bool encoded_text = 284;
    bool settl_date2 = 285;
    bool order_qty2 = 286;
    bool last_forward_points2 = 287;
    bool multi_leg_reporting_type = 288;
    bool cancellation_rights = 289;
    bool money_laundering_status = 290;
    bool regist_id = 291;
    bool designation = 292;
    bool trans_bkd_time = 293;
    bool exec_valuation_point = 294;
    bool exec_price_type = 295;
    bool exec_price_adjustment = 296;
    bool priority_indicator = 297;
    bool price_improvement = 298;
    bool last_liquidity_ind = 299;
    bool copy_msg_indicator = 300;
    bool dividend_yield = 301;
    bool manual_order_indicator = 302;
    bool cust_directed_order = 303;
    bool received_dept_id = 304;
    bool cust_order_handling_inst = 305;
    bool order_handling_inst_source = 306;
    bool volatility = 307;
    bool time_to_expiration = 308;
    bool risk_free_rate = 309;
    bool price_delta = 310;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string appl_id = 5;  // tag 1180, name ApplID, type STRING
  int32 appl_seq_num = 6;  // tag 1181, name ApplSeqNum, type SEQNUM
  int32 appl_last_seq_num = 7;  // tag 1350, name ApplLastSeqNum, type SEQNUM
  bool appl_resend_flag = 8;  // tag 1352, name ApplResendFlag, type BOOLEAN
  string order_id = 9;  // tag 37, name OrderID, type STRING
  string secondary_order_id = 10;  // tag 198, name SecondaryOrderID, type STRING
  string secondary_cl_ord_id = 11;  // tag 526, name SecondaryClOrdID, type STRING
  string secondary_exec_id = 12;  // tag 527, name SecondaryExecID, type STRING
  string cl_ord_id = 13;  // tag 11, name ClOrdID, type STRING
  string orig_cl_ord_id = 14;  // tag 41, name OrigClOrdID, type STRING
  string cl_ord_link_id = 15;  // tag 583, name ClOrdLinkID, type STRING
  string quote_resp_id = 16;  // tag 693, name QuoteRespID, type STRING
  string ord_status_req_id = 17;  // tag 790, name OrdStatusReqID, type STRING
  string mass_status_req_id = 18;  // tag 584, name MassStatusReqID, type STRING
  string host_cross_id = 19;  // tag 961, name HostCrossID, type STRING
  int32 tot_num_reports = 20;  // tag 911, name TotNumReports, type INT
  bool last_rpt_requested = 21;  // tag 912, name LastRptRequested, type BOOLEAN
  string trade_origination_date = 22;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
  string list_id = 23;  // tag 66, name ListID, type STRING
  string cross_id = 24;  // tag 548, name CrossID, type STRING
  string orig_cross_id = 25;  // tag 551, name OrigCrossID, type STRING
  int32 cross_type = 26;  // tag 549, name CrossType, type INT
  string trd_match_id = 27;  // tag 880, name TrdMatchID, type STRING
  string exec_id = 28;  // tag 17, name ExecID, type STRING
  string exec_ref_id = 29;  // tag 19, name ExecRefID, type STRING
  int32 exec_type = 30;  // tag 150, name ExecType, type CHAR
  int32 ord_status = 31;  // tag 39, name OrdStatus, type CHAR
  bool working_indicator = 32;  // tag 636, name WorkingIndicator, type BOOLEAN
  int32 ord_rej_reason = 33;  // tag 103, name OrdRejReason, type INT
  int32 exec_restatement_reason = 34;  // tag 378, name ExecRestatementReason, type INT
  string account = 35;  // tag 1, name Account, type STRING
  int32 acct_id_source = 36;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 37;  // tag 581, name AccountType, type INT
  int32 day_booking_inst = 38;  // tag 589, name DayBookingInst, type CHAR
  int32 booking_unit = 39;  // tag 590, name BookingUnit, type CHAR
  int32 prealloc_method = 40;  // tag 591, name PreallocMethod, type CHAR
  string alloc_id = 41;  // tag 70, name AllocID, type STRING
  string settl_type = 42;  // tag 63, name SettlType, type STRING
  string settl_date = 43;  // tag 64, name SettlDate, type LOCALMKTDATE
  string match_type = 44;  // tag 574, name MatchType, type STRING
  int32 order_category = 45;  // tag 1115, name OrderCategory, type CHAR
  int32 cash_margin = 46;  // tag 544, name CashMargin, type CHAR
  string clearing_fee_indicator = 47;  // tag 635, name ClearingFeeIndicator, type STRING
  string symbol = 48;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 49;  // tag 65, name SymbolSfx, type STRING
  string security_id = 50;  // tag 48, name SecurityID, type STRING
  string security_id_source = 51;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 52;  // tag 460, name Product, type INT
  string product_complex = 53;  // tag 1227, name ProductComplex, type STRING
  string security_group = 54;  // tag 1151, name SecurityGroup, type STRING
  string cfi_code = 55;  // tag 461, name CFICode, type STRING
  string security_type = 56;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 57;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 58;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 59;  // tag 541, name MaturityDate, type LOCALMKTDATE
  string maturity_time = 60;  // tag 1079, name MaturityTime, type TZTIMEONLY
  string settle_on_open_flag = 61;  // tag 966, name SettleOnOpenFlag, type STRING
  int32 instrmt_assignment_method = 62;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
  string security_status = 63;  // tag 965, name SecurityStatus, type STRING
  string coupon_payment_date = 64;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string restructuring_type = 65;  // tag 1449, name RestructuringType, type STRING
  string seniority = 66;  // tag 1450, name Seniority, type STRING
  double notional_percentage_outstanding = 67;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
  double original_notional_percentage_outstanding = 68;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
  double attachment_point = 69;  // tag 1457, name AttachmentPoint, type PERCENTAGE
  double detachment_point = 70;  // tag 1458, name DetachmentPoint, type PERCENTAGE
  string issue_date = 71;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 72;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 73;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 74;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 75;  // tag 228, name Factor, type FLOAT
  string credit_rating = 76;  // tag 255, name CreditRating, type STRING
  string instr_registry = 77;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 78;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 79;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 80;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 81;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 82;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 83;  // tag 947, name StrikeCurrency, type CURRENCY
  double strike_multiplier = 84;  // tag 967, name StrikeMultiplier, type FLOAT
  double strike_value = 85;  // tag 968, name StrikeValue, type FLOAT
  int32 strike_price_determination_method = 86;  // tag 1478, name StrikePriceDeterminationMethod, type INT
  int32 strike_price_boundary_method = 87;  // tag 1479, name StrikePriceBoundaryMethod, type INT
  double strike_price_boundary_precision = 88;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
  int32 underlying_price_determination_method = 89;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
  int32 opt_attribute = 90;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 91;  // tag 231, name ContractMultiplier, type FLOAT
  int32 contract_multiplier_unit = 92;  // tag 1435, name ContractMultiplierUnit, type INT
  int32 flow_schedule_type = 93;  // tag 1439, name FlowScheduleType, type INT
  double min_price_increment = 94;  // tag 969, name MinPriceIncrement, type FLOAT
  double min_price_increment_amount = 95;  // tag 1146, name MinPriceIncrementAmount, type AMT
  string unit_of_measure = 96;  // tag 996, name UnitOfMeasure, type STRING
  double unit_of_measure_qty = 97;  // tag 1147, name UnitOfMeasureQty, type QTY
  string price_unit_of_measure = 98;  // tag 1191, name PriceUnitOfMeasure, type STRING
  double price_unit_of_measure_qty = 99;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
  int32 settl_method = 100;  // tag 1193, name SettlMethod, type CHAR
  int32 exercise_style = 101;  // tag 1194, name ExerciseStyle, type INT
  int32 opt_payout_type = 102;  // tag 1482, name OptPayoutType, type INT
  double opt_payout_amount = 103;  // tag 1195, name OptPayoutAmount, type AMT
  string price_quote_method = 104;  // tag 1196, name PriceQuoteMethod, type STRING
  string valuation_method = 105;  // tag 1197, name ValuationMethod, type STRING
  int32 list_method = 106;  // tag 1198, name ListMethod, type INT
  double cap_price = 107;  // tag 1199, name CapPrice, type PRICE
  double floor_price = 108;  // tag 1200, name FloorPrice, type PRICE
  int32 put_or_call = 109;  // tag 201, name PutOrCall, type INT
  bool flexible_indicator = 110;  // tag 1244, name FlexibleIndicator, type BOOLEAN
  bool flex_product_eligibility_indicator = 111;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
  string time_unit = 112;  // tag 997, name TimeUnit, type STRING
  double coupon_rate = 113;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 114;  // tag 207, name SecurityExchange, type EXCHANGE
  int32 position_limit = 115;  // tag 970, name PositionLimit, type INT
  int32 nt_position_limit = 116;  // tag 971, name NTPositionLimit, type INT
  string issuer = 117;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 118;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 119;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 120;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 121;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 122;  // tag 351, name EncodedSecurityDesc, type DATA
  int32 security_xml_len = 123;  // tag 1184, name SecurityXMLLen, type LENGTH
  string security_xml_data = 124;  // tag 1185, name SecurityXMLData, type XMLDATA
  string security_xml_schema = 125;  // tag 1186, name SecurityXMLSchema, type STRING
  string pool = 126;  // tag 691, name Pool, type STRING
  string contract_settl_month = 127;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 128;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 129;  // tag 876, name CPRegType, type STRING
  string dated_date = 130;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 131;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 132;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 133;  // tag 914, name AgreementID, type STRING
  string agreement_date = 134;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 135;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 136;  // tag 788, name TerminationType, type INT
  string start_date = 137;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 138;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 139;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 140;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 141;  // tag 54, name Side, type CHAR
  int32 qty_type = 142;  // tag 854, name QtyType, type INT
  double order_qty = 143;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 144;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 145;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 146;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 147;  // tag 469, name RoundingModulus, type FLOAT
  int32 lot_type = 148;  // tag 1093, name LotType, type CHAR
  int32 ord_type = 149;  // tag 40, name OrdType, type CHAR
  int32 price_type = 150;  // tag 423, name PriceType, type INT
  double price = 151;  // tag 44, name Price, type PRICE
  int32 price_protection_scope = 152;  // tag 1092, name PriceProtectionScope, type CHAR
  double stop_px = 153;  // tag 99, name StopPx, type PRICE
  int32 trigger_type = 154;  // tag 1100, name TriggerType, type CHAR
  int32 trigger_action = 155;  // tag 1101, name TriggerAction, type CHAR
  double trigger_price = 156;  // tag 1102, name TriggerPrice, type PRICE
  string trigger_symbol = 157;  // tag 1103, name TriggerSymbol, type STRING
  string trigger_security_id = 158;  // tag 1104, name TriggerSecurityID, type STRING
  string trigger_security_id_source = 159;  // tag 1105, name TriggerSecurityIDSource, type STRING
  string trigger_security_desc = 160;  // tag 1106, name TriggerSecurityDesc, type STRING
  int32 trigger_price_type = 161;  // tag 1107, name TriggerPriceType, type CHAR
  int32 trigger_price_type_scope = 162;  // tag 1108, name TriggerPriceTypeScope, type CHAR
  int32 trigger_price_direction = 163;  // tag 1109, name TriggerPriceDirection, type CHAR
  double trigger_new_price = 164;  // tag 1110, name TriggerNewPrice, type PRICE
  int32 trigger_order_type = 165;  // tag 1111, name TriggerOrderType, type CHAR
  double trigger_new_qty = 166;  // tag 1112, name TriggerNewQty, type QTY
  string trigger_trading_session_id = 167;  // tag 1113, name TriggerTradingSessionID, type STRING
  string trigger_trading_session_sub_id = 168;  // tag 1114, name TriggerTradingSessionSubID, type STRING
  double peg_offset_value = 169;  // tag 211, name PegOffsetValue, type FLOAT
  int32 peg_price_type = 170;  // tag 1094, name PegPriceType, type INT
  int32 peg_move_type = 171;  // tag 835, name PegMoveType, type INT
  int32 peg_offset_type = 172;  // tag 836, name PegOffsetType, type INT
  int32 peg_limit_type = 173;  // tag 837, name PegLimitType, type INT
  int32 peg_round_direction = 174;  // tag 838, name PegRoundDirection, type INT
  int32 peg_scope = 175;  // tag 840, name PegScope, type INT
  string peg_security_id_source = 176;  // tag 1096, name PegSecurityIDSource, type STRING
  string peg_security_id = 177;  // tag 1097, name PegSecurityID, type STRING
  string peg_symbol = 178;  // tag 1098, name PegSymbol, type STRING
  string peg_security_desc = 179;  // tag 1099, name PegSecurityDesc, type STRING
  int32 discretion_inst = 180;  // tag 388, name DiscretionInst, type CHAR
  double discretion_offset_value = 181;  // tag 389, name DiscretionOffsetValue, type FLOAT
  int32 discretion_move_type = 182;  // tag 841, name DiscretionMoveType, type INT
  int32 discretion_offset_type = 183;  // tag 842, name DiscretionOffsetType, type INT
  int32 discretion_limit_type = 184;  // tag 843, name DiscretionLimitType, type INT
  int32 discretion_round_direction = 185;  // tag 844, name DiscretionRoundDirection, type INT
  int32 discretion_scope = 186;  // tag 846, name DiscretionScope, type INT
  double pegged_price = 187;  // tag 839, name PeggedPrice, type PRICE
  double pegged_ref_price = 188;  // tag 1095, name PeggedRefPrice, type PRICE
  double discretion_price = 189;  // tag 845, name DiscretionPrice, type PRICE
  int32 target_strategy = 190;  // tag 847, name TargetStrategy, type INT
  string target_strategy_parameters = 191;  // tag 848, name TargetStrategyParameters, type STRING
  double participation_rate = 192;  // tag 849, name ParticipationRate, type PERCENTAGE
  double target_strategy_performance = 193;  // tag 850, name TargetStrategyPerformance, type FLOAT
  string currency = 194;  // tag 15, name Currency, type CURRENCY
  string compliance_id = 195;  // tag 376, name ComplianceID, type STRING
  bool solicited_flag = 196;  // tag 377, name SolicitedFlag, type BOOLEAN
  int32 time_in_force = 197;  // tag 59, name TimeInForce, type CHAR
  uint64 effective_time = 198;  // tag 168, name EffectiveTime, type UTCTIMESTAMP
  string expire_date = 199;  // tag 432, name ExpireDate, type LOCALMKTDATE
  uint64 expire_time = 200;  // tag 126, name ExpireTime, type UTCTIMESTAMP
  string exec_inst = 201;  // tag 18, name ExecInst, type MULTIPLECHARVALUE
  bool aggressor_indicator = 202;  // tag 1057, name AggressorIndicator, type BOOLEAN
  int32 order_capacity = 203;  // tag 528, name OrderCapacity, type CHAR
  string order_restrictions = 204;  // tag 529, name OrderRestrictions, type MULTIPLECHARVALUE
  bool pre_trade_anonymity = 205;  // tag 1091, name PreTradeAnonymity, type BOOLEAN
  int32 cust_order_capacity = 206;  // tag 582, name CustOrderCapacity, type INT
  double last_qty = 207;  // tag 32, name LastQty, type QTY
  double calculated_ccy_last_qty = 208;  // tag 1056, name CalculatedCcyLastQty, type QTY
  double last_swap_points = 209;  // tag 1071, name LastSwapPoints, type PRICEOFFSET
  double underlying_last_qty = 210;  // tag 652, name UnderlyingLastQty, type QTY
  double last_px = 211;  // tag 31, name LastPx, type PRICE
  double underlying_last_px = 212;  // tag 651, name UnderlyingLastPx, type PRICE
  double last_par_px = 213;  // tag 669, name LastParPx, type PRICE
  double last_spot_rate = 214;  // tag 194, name LastSpotRate, type PRICE
  double last_forward_points = 215;  // tag 195, name LastForwardPoints, type PRICEOFFSET
  string last_mkt = 216;  // tag 30, name LastMkt, type EXCHANGE
  string trading_session_id = 217;  // tag 336, name TradingSessionID, type STRING
  string trading_session_sub_id = 218;  // tag 625, name TradingSessionSubID, type STRING
  string time_bracket = 219;  // tag 943, name TimeBracket, type STRING
  int32 last_capacity = 220;  // tag 29, name LastCapacity, type CHAR
  double leaves_qty = 221;  // tag 151, name LeavesQty, type QTY
  double cum_qty = 222;  // tag 14, name CumQty, type QTY
  double avg_px = 223;  // tag 6, name AvgPx, type PRICE
  double day_order_qty = 224;  // tag 424, name DayOrderQty, type QTY
  double day_cum_qty = 225;  // tag 425, name DayCumQty, type QTY
  double day_avg_px = 226;  // tag 426, name DayAvgPx, type PRICE
  int32 tot_no_fills = 227;  // tag 1361, name TotNoFills, type INT
  bool last_fragment = 228;  // tag 893, name LastFragment, type BOOLEAN
  int32 gt_booking_inst = 229;  // tag 427, name GTBookingInst, type INT
  string trade_date = 230;  // tag 75, name TradeDate, type LOCALMKTDATE
  uint64 transact_time = 231;  // tag 60, name TransactTime, type UTCTIMESTAMP
  bool report_to_exch = 232;  // tag 113, name ReportToExch, type BOOLEAN
  double commission = 233;  // tag 12, name Commission, type AMT
  int32 comm_type = 234;  // tag 13, name CommType, type CHAR
  string comm_currency = 235;  // tag 479, name CommCurrency, type CURRENCY
  int32 fund_renew_waiv = 236;  // tag 497, name FundRenewWaiv, type CHAR
  double spread = 237;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 238;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 239;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 240;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 241;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 242;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 243;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 244;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 245;  // tag 235, name YieldType, type STRING
  double yield = 246;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 247;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 248;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 249;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 250;  // tag 698, name YieldRedemptionPriceType, type INT
  double gross_trade_amt = 251;  // tag 381, name GrossTradeAmt, type AMT
  int32 num_days_interest = 252;  // tag 157, name NumDaysInterest, type INT
  string ex_date = 253;  // tag 230, name ExDate, type LOCALMKTDATE
  double accrued_interest_rate = 254;  // tag 158, name AccruedInterestRate, type PERCENTAGE
  double accrued_interest_amt = 255;  // tag 159, name AccruedInterestAmt, type AMT
  double interest_at_maturity = 256;  // tag 738, name InterestAtMaturity, type AMT
  double end_accrued_interest_amt = 257;  // tag 920, name EndAccruedInterestAmt, type AMT
  double start_cash = 258;  // tag 921, name StartCash, type AMT
  double end_cash = 259;  // tag 922, name EndCash, type AMT
  bool traded_flat_switch = 260;  // tag 258, name TradedFlatSwitch, type BOOLEAN
  string basis_feature_date = 261;  // tag 259, name BasisFeatureDate, type LOCALMKTDATE
  double basis_feature_price = 262;  // tag 260, name BasisFeaturePrice, type PRICE
  double concession = 263;  // tag 238, name Concession, type AMT
  double total_takedown = 264;  // tag 237, name TotalTakedown, type AMT
  double net_money = 265;  // tag 118, name NetMoney, type AMT
  double settl_curr_amt = 266;  // tag 119, name SettlCurrAmt, type AMT
  string settl_currency = 267;  // tag 120, name SettlCurrency, type CURRENCY
  double settl_curr_fx_rate = 268;  // tag 155, name SettlCurrFxRate, type FLOAT
  int32 settl_curr_fx_rate_calc = 269;  // tag 156, name SettlCurrFxRateCalc, type CHAR
  int32 handl_inst = 270;  // tag 21, name HandlInst, type CHAR
  double min_qty = 271;  // tag 110, name MinQty, type QTY
  double match_increment = 272;  // tag 1089, name MatchIncrement, type QTY
  int32 max_price_levels = 273;  // tag 1090, name MaxPriceLevels, type INT
  double display_qty = 274;  // tag 1138, name DisplayQty, type QTY
  double secondary_display_qty = 275;  // tag 1082, name SecondaryDisplayQty, type QTY
  int32 display_when = 276;  // tag 1083, name DisplayWhen, type CHAR
  int32 display_method = 277;  // tag 1084, name DisplayMethod, type CHAR
  double display_low_qty = 278;  // tag 1085, name DisplayLowQty, type QTY
  double display_high_qty = 279;  // tag 1086, name DisplayHighQty, type QTY
  double display_min_incr = 280;  // tag 1087, name DisplayMinIncr, type QTY
  double refresh_qty = 281;  // tag 1088, name RefreshQty, type QTY
  double max_floor = 282;  // tag 111, name MaxFloor, type QTY
  int32 position_effect = 283;  // tag 77, name PositionEffect, type CHAR
  double max_show = 284;  // tag 210, name MaxShow, type QTY
  int32 booking_type = 285;  // tag 775, name BookingType, type INT
  string text = 286;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 287;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 288;  // tag 355, name EncodedText, type DATA
  string settl_date2 = 289;  // tag 193, name SettlDate2, type LOCALMKTDATE
  double order_qty2 = 290;  // tag 192, name OrderQty2, type QTY
  double last_forward_points2 = 291;  // tag 641, name LastForwardPoints2, type PRICEOFFSET
  int32 multi_leg_reporting_type = 292;  // tag 442, name MultiLegReportingType, type CHAR
  int32 cancellation_rights = 293;  // tag 480, name CancellationRights, type CHAR
  int32 money_laundering_status = 294;  // tag 481, name MoneyLaunderingStatus, type CHAR
  string regist_id = 295;  // tag 513, name RegistID, type STRING
  string designation = 296;  // tag 494, name Designation, type STRING
  uint64 trans_bkd_time = 297;  // tag 483, name TransBkdTime, type UTCTIMESTAMP
  uint64 exec_valuation_point = 298;  // tag 515, name ExecValuationPoint, type UTCTIMESTAMP
  int32 exec_price_type = 299;  // tag 484, name ExecPriceType, type CHAR
  double exec_price_adjustment = 300;  // tag 485, name ExecPriceAdjustment, type FLOAT
  int32 priority_indicator = 301;  // tag 638, name PriorityIndicator, type INT
  double price_improvement = 302;  // tag 639, name PriceImprovement, type PRICEOFFSET
  int32 last_liquidity_ind = 303;  // tag 851, name LastLiquidityInd, type INT
  bool copy_msg_indicator = 304;  // tag 797, name CopyMsgIndicator, type BOOLEAN
  double dividend_yield = 305;  // tag 1380, name DividendYield, type PERCENTAGE
  bool manual_order_indicator = 306;  // tag 1028, name ManualOrderIndicator, type BOOLEAN
  bool cust_directed_order = 307;  // tag 1029, name CustDirectedOrder, type BOOLEAN
  string received_dept_id = 308;  // tag 1030, name ReceivedDeptID, type STRING
  string cust_order_handling_inst = 309;  // tag 1031, name CustOrderHandlingInst, type MULTIPLESTRINGVALUE
  int32 order_handling_inst_source = 310;  // tag 1032, name OrderHandlingInstSource, type INT
  double volatility = 311;  // tag 1188, name Volatility, type FLOAT
  double time_to_expiration = 312;  // tag 1189, name TimeToExpiration, type FLOAT
  double risk_free_rate = 313;  // tag 1190, name RiskFreeRate, type FLOAT
  double price_delta = 314;  // tag 811, name PriceDelta, type FLOAT

  // GROUPS
  repeated NoPartyIds no_party_ids = 315;
  repeated NoContraBrokers no_contra_brokers = 316;
  repeated NoAllocs no_allocs = 317;
  repeated NoSecurityAltId no_security_alt_id = 318;
  repeated NoEvents no_events = 319;
  repeated NoInstrumentParties no_instrument_parties = 320;
  repeated NoComplexEvents no_complex_events = 321;
  repeated NoUnderlyings no_underlyings = 322;
  repeated NoStipulations no_stipulations = 323;
  repeated NoStrategyParameters no_strategy_parameters = 324;
  repeated NoFills no_fills = 325;
  repeated NoRateSources no_rate_sources = 326;
  repeated NoContAmts no_cont_amts = 327;
  repeated NoLegs no_legs = 328;
  repeated NoMiscFees no_misc_fees = 329;
  repeated NoTrdRegTimestamps no_trd_reg_timestamps = 330;
}

message Ioi {
  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_time = 3;
      bool event_px = 4;
      bool event_text = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
    double event_px = 5;  // tag 867, name EventPx, type PRICE
    string event_text = 6;  // tag 868, name EventText, type STRING
  }

  message NoInstrumentParties {
    message NoInstrumentPartySubIds {
      message FieldPresence {
        bool instrument_party_sub_id = 1;
        bool instrument_party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
      int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
    }

    message FieldPresence {
      bool instrument_party_id = 1;
      bool instrument_party_id_source = 2;
      bool instrument_party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
    int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
    int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
  
  // GROUPS
    repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
  }

  message NoComplexEvents {
    message NoComplexEventDates {
      message NoComplexEventTimes {
        message FieldPresence {
          bool complex_event_start_time = 1;
          bool complex_event_end_time = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
        uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
      }

      message FieldPresence {
        bool complex_event_start_date = 1;
        bool complex_event_end_date = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
      uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
    
  // GROUPS
      repeated NoComplexEventTimes no_complex_event_times = 4;
    }

    message FieldPresence {
      bool complex_event_type = 1;
      bool complex_opt_payout_amount = 2;
      bool complex_event_price = 3;
      bool complex_event_price_boundary_method = 4;
      bool complex_event_price_boundary_precision = 5;
      bool complex_event_price_time_type = 6;
      bool complex_event_condition = 7;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
    double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
    double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
    int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
    double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
    int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
    int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
  
  // GROUPS
    repeated NoComplexEventDates no_complex_event_dates = 9;
  }

  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message NoUndlyInstrumentParties {
      message NoUndlyInstrumentPartySubIds {
        message FieldPresence {
          bool underlying_instrument_party_sub_id = 1;
          bool underlying_instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
        int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool underlying_instrument_party_id = 1;
        bool underlying_instrument_party_id_source = 2;
        bool underlying_instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
      int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
      int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_maturity_time = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_restructuring_type = 13;
      bool underlying_seniority = 14;
      bool underlying_notional_percentage_outstanding = 15;
      bool underlying_original_notional_percentage_outstanding = 16;
      bool underlying_attachment_point = 17;
      bool underlying_detachment_point = 18;
      bool underlying_issue_date = 19;
      bool underlying_repo_collateral_security_type = 20;
      bool underlying_repurchase_term = 21;
      bool underlying_repurchase_rate = 22;
      bool underlying_factor = 23;
      bool underlying_credit_rating = 24;
      bool underlying_instr_registry = 25;
      bool underlying_country_of_issue = 26;
      bool underlying_state_or_province_of_issue = 27;
      bool underlying_locale_of_issue = 28;
      bool underlying_redemption_date = 29;
      bool underlying_strike_price = 30;
      bool underlying_strike_currency = 31;
      bool underlying_opt_attribute = 32;
      bool underlying_contract_multiplier = 33;
      bool underlying_contract_multiplier_unit = 34;
      bool underlying_flow_schedule_type = 35;
      bool underlying_unit_of_measure = 36;
      bool underlying_unit_of_measure_qty = 37;
      bool underlying_price_unit_of_measure = 38;
      bool underlying_price_unit_of_measure_qty = 39;
      bool underlying_time_unit = 40;
      bool underlying_exercise_style = 41;
      bool underlying_coupon_rate = 42;
      bool underlying_security_exchange = 43;
      bool underlying_issuer = 44;
      bool encoded_underlying_issuer_len = 45;
      bool encoded_underlying_issuer = 46;
      bool underlying_security_desc = 47;
      bool encoded_underlying_security_desc_len = 48;
      bool encoded_underlying_security_desc = 49;
      bool underlying_cp_program = 50;
      bool underlying_cp_reg_type = 51;
      bool underlying_allocation_percent = 52;
      bool underlying_currency = 53;
      bool underlying_qty = 54;
      bool underlying_settlement_type = 55;
      bool underlying_cash_amount = 56;
      bool underlying_cash_type = 57;
      bool underlying_px = 58;
      bool underlying_dirty_price = 59;
      bool underlying_end_price = 60;
      bool underlying_start_value = 61;
      bool underlying_current_value = 62;
      bool underlying_end_value = 63;
      bool underlying_adjusted_quantity = 64;
      bool underlying_fx_rate = 65;
      bool underlying_fx_rate_calc = 66;
      bool underlying_cap_value = 67;
      bool underlying_settl_method = 68;
      bool underlying_put_or_call = 69;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
    string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
    double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
    double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
    string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
    int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
    string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
    double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
    string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
    double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
    string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
    int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
    double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
    double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
    string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
    int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
    double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
    string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
    double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
    double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
    double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
    int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
    double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
    string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
    int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
    repeated NoUnderlyingStips no_underlying_stips = 72;
    repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
  }

  message NoStipulations {
    message FieldPresence {
      bool stipulation_type = 1;
      bool stipulation_value = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
    string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
  }

  message NoLegs {
    message NoLegSecurityAltId {
      message FieldPresence {
        bool leg_security_alt_id = 1;
        bool leg_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
      string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
    }

    message NoLegStipulations {
      message FieldPresence {
        bool leg_stipulation_type = 1;
        bool leg_stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
      string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
    }

    message FieldPresence {
      bool leg_symbol = 1;
      bool leg_symbol_sfx = 2;
      bool leg_security_id = 3;
      bool leg_security_id_source = 4;
      bool leg_product = 5;
      bool leg_cfi_code = 6;
      bool leg_security_type = 7;
      bool leg_security_sub_type = 8;
      bool leg_maturity_month_year = 9;
      bool leg_maturity_date = 10;
      bool leg_maturity_time = 11;
      bool leg_coupon_payment_date = 12;
      bool leg_issue_date = 13;
      bool leg_repo_collateral_security_type = 14;
      bool leg_repurchase_term = 15;
      bool leg_repurchase_rate = 16;
      bool leg_factor = 17;
      bool leg_credit_rating = 18;
      bool leg_instr_registry = 19;
      bool leg_country_of_issue = 20;
      bool leg_state_or_province_of_issue = 21;
      bool leg_locale_of_issue = 22;
      bool leg_redemption_date = 23;
      bool leg_strike_price = 24;
      bool leg_strike_currency = 25;
      bool leg_opt_attribute = 26;
      bool leg_contract_multiplier = 27;
      bool leg_contract_multiplier_unit = 28;
      bool leg_flow_schedule_type = 29;
      bool leg_unit_of_measure = 30;
      bool leg_unit_of_measure_qty = 31;
      bool leg_price_unit_of_measure = 32;
      bool leg_price_unit_of_measure_qty = 33;
      bool leg_time_unit = 34;
      bool leg_exercise_style = 35;
      bool leg_coupon_rate = 36;
      bool leg_security_exchange = 37;
      bool leg_issuer = 38;
      bool encoded_leg_issuer_len = 39;
      bool encoded_leg_issuer = 40;
      bool leg_security_desc = 41;
      bool encoded_leg_security_desc_len = 42;
      bool encoded_leg_security_desc = 43;
      bool leg_ratio_qty = 44;
      bool leg_side = 45;
      bool leg_currency = 46;
      bool leg_pool = 47;
      bool leg_dated_date = 48;
      bool leg_contract_settl_month = 49;
      bool leg_interest_accrual_date = 50;
      bool leg_put_or_call = 51;
      bool leg_option_ratio = 52;
      bool leg_price = 53;
      bool leg_ioi_qty = 54;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
    string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
    string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
    string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
    int32 leg_product = 6;  // tag 607, name LegProduct, type INT
    string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
    string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
    string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
    string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
    string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
    string leg_maturity_time = 12;  // tag 1212, name LegMaturityTime, type TZTIMEONLY
    string leg_coupon_payment_date = 13;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
    string leg_issue_date = 14;  // tag 249, name LegIssueDate, type LOCALMKTDATE
    string leg_repo_collateral_security_type = 15;  // tag 250, name LegRepoCollateralSecurityType, type STRING
    int32 leg_repurchase_term = 16;  // tag 251, name LegRepurchaseTerm, type INT
    double leg_repurchase_rate = 17;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
    double leg_factor = 18;  // tag 253, name LegFactor, type FLOAT
    string leg_credit_rating = 19;  // tag 257, name LegCreditRating, type STRING
    string leg_instr_registry = 20;  // tag 599, name LegInstrRegistry, type STRING
    string leg_country_of_issue = 21;  // tag 596, name LegCountryOfIssue, type COUNTRY
    string leg_state_or_province_of_issue = 22;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
    string leg_locale_of_issue = 23;  // tag 598, name LegLocaleOfIssue, type STRING
    string leg_redemption_date = 24;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
    double leg_strike_price = 25;  // tag 612, name LegStrikePrice, type PRICE
    string leg_strike_currency = 26;  // tag 942, name LegStrikeCurrency, type CURRENCY
    int32 leg_opt_attribute = 27;  // tag 613, name LegOptAttribute, type CHAR
    double leg_contract_multiplier = 28;  // tag 614, name LegContractMultiplier, type FLOAT
    int32 leg_contract_multiplier_unit = 29;  // tag 1436, name LegContractMultiplierUnit, type INT
    int32 leg_flow_schedule_type = 30;  // tag 1440, name LegFlowScheduleType, type INT
    string leg_unit_of_measure = 31;  // tag 999, name LegUnitOfMeasure, type STRING
    double leg_unit_of_measure_qty = 32;  // tag 1224, name LegUnitOfMeasureQty, type QTY
    string leg_price_unit_of_measure = 33;  // tag 1421, name LegPriceUnitOfMeasure, type STRING
    double leg_price_unit_of_measure_qty = 34;  // tag 1422, name LegPriceUnitOfMeasureQty, type QTY
    string leg_time_unit = 35;  // tag 1001, name LegTimeUnit, type STRING
    int32 leg_exercise_style = 36;  // tag 1420, name LegExerciseStyle, type INT
    double leg_coupon_rate = 37;  // tag 615, name LegCouponRate, type PERCENTAGE
    string leg_security_exchange = 38;  // tag 616, name LegSecurityExchange, type EXCHANGE
    string leg_issuer = 39;  // tag 617, name LegIssuer, type STRING
    int32 encoded_leg_issuer_len = 40;  // tag 618, name EncodedLegIssuerLen, type LENGTH
    string encoded_leg_issuer = 41;  // tag 619, name EncodedLegIssuer, type DATA
    string leg_security_desc = 42;  // tag 620, name LegSecurityDesc, type STRING
    int32 encoded_leg_security_desc_len = 43;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
    string encoded_leg_security_desc = 44;  // tag 622, name EncodedLegSecurityDesc, type DATA
    double leg_ratio_qty = 45;  // tag 623, name LegRatioQty, type FLOAT
    int32 leg_side = 46;  // tag 624, name LegSide, type CHAR
    string leg_currency = 47;  // tag 556, name LegCurrency, type CURRENCY
    string leg_pool = 48;  // tag 740, name LegPool, type STRING
    string leg_dated_date = 49;  // tag 739, name LegDatedDate, type LOCALMKTDATE
    string leg_contract_settl_month = 50;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
    string leg_interest_accrual_date = 51;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
    int32 leg_put_or_call = 52;  // tag 1358, name LegPutOrCall, type INT
    double leg_option_ratio = 53;  // tag 1017, name LegOptionRatio, type FLOAT
    double leg_price = 54;  // tag 566, name LegPrice, type PRICE
    string leg_ioi_qty = 55;  // tag 682, name LegIOIQty, type STRING
  
  // GROUPS
    repeated NoLegSecurityAltId no_leg_security_alt_id = 56;
    repeated NoLegStipulations no_leg_stipulations = 57;
  }

  message NoIoiQualifiers {
    message FieldPresence {
      bool ioi_qualifier = 1;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 ioi_qualifier = 2;  // tag 104, name IOIQualifier, type CHAR
  }

  message NoRoutingIds {
    message FieldPresence {
      bool routing_type = 1;
      bool routing_id = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 routing_type = 2;  // tag 216, name RoutingType, type INT
    string routing_id = 3;  // tag 217, name RoutingID, type STRING
  }

  message FieldPresence {
    bool appl_id = 1;
    bool appl_seq_num = 2;
    bool appl_last_seq_num = 3;
    bool appl_resend_flag = 4;
    bool ioi_id = 5;
    bool ioi_trans_type = 6;
    bool ioi_ref_id = 7;
    bool symbol = 8;
    bool symbol_sfx = 9;
    bool security_id = 10;
    bool security_id_source = 11;
    bool product = 12;
    bool product_complex = 13;
    bool security_group = 14;
    bool cfi_code = 15;
    bool security_type = 16;
    bool security_sub_type = 17;
    bool maturity_month_year = 18;
    bool maturity_date = 19;
    bool maturity_time = 20;
    bool settle_on_open_flag = 21;
    bool instrmt_assignment_method = 22;
    bool security_status = 23;
    bool coupon_payment_date = 24;
    bool restructuring_type = 25;
    bool seniority = 26;
    bool notional_percentage_outstanding = 27;
    bool original_notional_percentage_outstanding = 28;
    bool attachment_point = 29;
    bool detachment_point = 30;
    bool issue_date = 31;
    bool repo_collateral_security_type = 32;
    bool repurchase_term = 33;
    bool repurchase_rate = 34;
    bool factor = 35;
    bool credit_rating = 36;
    bool instr_registry = 37;
    bool country_of_issue = 38;
    bool state_or_province_of_issue = 39;
    bool locale_of_issue = 40;
    bool redemption_date = 41;
    bool strike_price = 42;
    bool strike_currency = 43;
    bool strike_multiplier = 44;
    bool strike_value = 45;
    bool strike_price_determination_method = 46;
    bool strike_price_boundary_method = 47;
    bool strike_price_boundary_precision = 48;
    bool underlying_price_determination_method = 49;
    bool opt_attribute = 50;
    bool contract_multiplier = 51;
    bool contract_multiplier_unit = 52;
    bool flow_schedule_type = 53;
    bool min_price_increment = 54;
    bool min_price_increment_amount = 55;
    bool unit_of_measure = 56;
    bool unit_of_measure_qty = 57;
    bool price_unit_of_measure = 58;
    bool price_unit_of_measure_qty = 59;
    bool settl_method = 60;
    bool exercise_style = 61;
    bool opt_payout_type = 62;
    bool opt_payout_amount = 63;
    bool price_quote_method = 64;
    bool valuation_method = 65;
    bool list_method = 66;
    bool cap_price = 67;
    bool floor_price = 68;
    bool put_or_call = 69;
    bool flexible_indicator = 70;
    bool flex_product_eligibility_indicator = 71;
    bool time_unit = 72;
    bool coupon_rate = 73;
    bool security_exchange = 74;
    bool position_limit = 75;
    bool nt_position_limit = 76;
    bool issuer = 77;
    bool encoded_issuer_len = 78;
    bool encoded_issuer = 79;
    bool security_desc = 80;
    bool encoded_security_desc_len = 81;
    bool encoded_security_desc = 82;
    bool security_xml_len = 83;
    bool security_xml_data = 84;
    bool security_xml_schema = 85;
    bool pool = 86;
    bool contract_settl_month = 87;
    bool cp_program = 88;
    bool cp_reg_type = 89;
    bool dated_date = 90;
    bool interest_accrual_date = 91;
    bool agreement_desc = 92;
    bool agreement_id = 93;
    bool agreement_date = 94;
    bool agreement_currency = 95;
    bool termination_type = 96;
    bool start_date = 97;
    bool end_date = 98;
    bool delivery_type = 99;
    bool margin_ratio = 100;
    bool side = 101;
    bool qty_type = 102;
    bool order_qty = 103;
    bool cash_order_qty = 104;
    bool order_percent = 105;
    bool rounding_direction = 106;
    bool rounding_modulus = 107;
    bool ioi_qty = 108;
    bool currency = 109;
    bool price_type = 110;
    bool price = 111;
    bool valid_until_time = 112;
    bool ioi_qlty_ind = 113;
    bool ioi_natural_flag = 114;
    bool text = 115;
    bool encoded_text_len = 116;
    bool encoded_text = 117;
    bool transact_time = 118;
    bool url_link = 119;
    bool spread = 120;
    bool benchmark_curve_currency = 121;
    bool benchmark_curve_name = 122;
    bool benchmark_curve_point = 123;
    bool benchmark_price = 124;
    bool benchmark_price_type = 125;
    bool benchmark_security_id = 126;
    bool benchmark_security_id_source = 127;
    bool yield_type = 128;
    bool yield = 129;
    bool yield_calc_date = 130;
    bool yield_redemption_date = 131;
    bool yield_redemption_price = 132;
    bool yield_redemption_price_type = 133;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string appl_id = 5;  // tag 1180, name ApplID, type STRING
  int32 appl_seq_num = 6;  // tag 1181, name ApplSeqNum, type SEQNUM
  int32 appl_last_seq_num = 7;  // tag 1350, name ApplLastSeqNum, type SEQNUM
  bool appl_resend_flag = 8;  // tag 1352, name ApplResendFlag, type BOOLEAN
  string ioi_id = 9;  // tag 23, name IOIID, type STRING
  int32 ioi_trans_type = 10;  // tag 28, name IOITransType, type CHAR
  string ioi_ref_id = 11;  // tag 26, name IOIRefID, type STRING
  string symbol = 12;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 13;  // tag 65, name SymbolSfx, type STRING
  string security_id = 14;  // tag 48, name SecurityID, type STRING
  string security_id_source = 15;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 16;  // tag 460, name Product, type INT
  string product_complex = 17;  // tag 1227, name ProductComplex, type STRING
  string security_group = 18;  // tag 1151, name SecurityGroup, type STRING
  string cfi_code = 19;  // tag 461, name CFICode, type STRING
  string security_type = 20;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 21;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 22;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 23;  // tag 541, name MaturityDate, type LOCALMKTDATE
  string maturity_time = 24;  // tag 1079, name MaturityTime, type TZTIMEONLY
  string settle_on_open_flag = 25;  // tag 966, name SettleOnOpenFlag, type STRING
  int32 instrmt_assignment_method = 26;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
  string security_status = 27;  // tag 965, name SecurityStatus, type STRING
  string coupon_payment_date = 28;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string restructuring_type = 29;  // tag 1449, name RestructuringType, type STRING
  string seniority = 30;  // tag 1450, name Seniority, type STRING
  double notional_percentage_outstanding = 31;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
  double original_notional_percentage_outstanding = 32;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
  double attachment_point = 33;  // tag 1457, name AttachmentPoint, type PERCENTAGE
  double detachment_point = 34;  // tag 1458, name DetachmentPoint, type PERCENTAGE
  string issue_date = 35;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 36;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 37;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 38;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 39;  // tag 228, name Factor, type FLOAT
  string credit_rating = 40;  // tag 255, name CreditRating, type STRING
  string instr_registry = 41;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 42;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 43;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 44;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 45;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 46;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 47;  // tag 947, name StrikeCurrency, type CURRENCY
  double strike_multiplier = 48;  // tag 967, name StrikeMultiplier, type FLOAT
  double strike_value = 49;  // tag 968, name StrikeValue, type FLOAT
  int32 strike_price_determination_method = 50;  // tag 1478, name StrikePriceDeterminationMethod, type INT
  int32 strike_price_boundary_method = 51;  // tag 1479, name StrikePriceBoundaryMethod, type INT
  double strike_price_boundary_precision = 52;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
  int32 underlying_price_determination_method = 53;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
  int32 opt_attribute = 54;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 55;  // tag 231, name ContractMultiplier, type FLOAT
  int32 contract_multiplier_unit = 56;  // tag 1435, name ContractMultiplierUnit, type INT
  int32 flow_schedule_type = 57;  // tag 1439, name FlowScheduleType, type INT
  double min_price_increment = 58;  // tag 969, name MinPriceIncrement, type FLOAT
  double min_price_increment_amount = 59;  // tag 1146, name MinPriceIncrementAmount, type AMT
  string unit_of_measure = 60;  // tag 996, name UnitOfMeasure, type STRING
  double unit_of_measure_qty = 61;  // tag 1147, name UnitOfMeasureQty, type QTY
  string price_unit_of_measure = 62;  // tag 1191, name PriceUnitOfMeasure, type STRING
  double price_unit_of_measure_qty = 63;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
  int32 settl_method = 64;  // tag 1193, name SettlMethod, type CHAR
  int32 exercise_style = 65;  // tag 1194, name ExerciseStyle, type INT
  int32 opt_payout_type = 66;  // tag 1482, name OptPayoutType, type INT
  double opt_payout_amount = 67;  // tag 1195, name OptPayoutAmount, type AMT
  string price_quote_method = 68;  // tag 1196, name PriceQuoteMethod, type STRING
  string valuation_method = 69;  // tag 1197, name ValuationMethod, type STRING
  int32 list_method = 70;  // tag 1198, name ListMethod, type INT
  double cap_price = 71;  // tag 1199, name CapPrice, type PRICE
  double floor_price = 72;  // tag 1200, name FloorPrice, type PRICE
  int32 put_or_call = 73;  // tag 201, name PutOrCall, type INT
  bool flexible_indicator = 74;  // tag 1244, name FlexibleIndicator, type BOOLEAN
  bool flex_product_eligibility_indicator = 75;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
  string time_unit = 76;  // tag 997, name TimeUnit, type STRING
  double coupon_rate = 77;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 78;  // tag 207, name SecurityExchange, type EXCHANGE
  int32 position_limit = 79;  // tag 970, name PositionLimit, type INT
  int32 nt_position_limit = 80;  // tag 971, name NTPositionLimit, type INT
  string issuer = 81;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 82;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 83;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 84;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 85;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 86;  // tag 351, name EncodedSecurityDesc, type DATA
  int32 security_xml_len = 87;  // tag 1184, name SecurityXMLLen, type LENGTH
  string security_xml_data = 88;  // tag 1185, name SecurityXMLData, type XMLDATA
  string security_xml_schema = 89;  // tag 1186, name SecurityXMLSchema, type STRING
  string pool = 90;  // tag 691, name Pool, type STRING
  string contract_settl_month = 91;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 92;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 93;  // tag 876, name CPRegType, type STRING
  string dated_date = 94;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 95;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 96;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 97;  // tag 914, name AgreementID, type STRING
  string agreement_date = 98;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 99;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 100;  // tag 788, name TerminationType, type INT
  string start_date = 101;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 102;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 103;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 104;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 105;  // tag 54, name Side, type CHAR
  int32 qty_type = 106;  // tag 854, name QtyType, type INT
  double order_qty = 107;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 108;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 109;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 110;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 111;  // tag 469, name RoundingModulus, type FLOAT
  string ioi_qty = 112;  // tag 27, name IOIQty, type STRING
  string currency = 113;  // tag 15, name Currency, type CURRENCY
  int32 price_type = 114;  // tag 423, name PriceType, type INT
  double price = 115;  // tag 44, name Price, type PRICE
  uint64 valid_until_time = 116;  // tag 62, name ValidUntilTime, type UTCTIMESTAMP
  int32 ioi_qlty_ind = 117;  // tag 25, name IOIQltyInd, type CHAR
  bool ioi_natural_flag = 118;  // tag 130, name IOINaturalFlag, type BOOLEAN
  string text = 119;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 120;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 121;  // tag 355, name EncodedText, type DATA
  uint64 transact_time = 122;  // tag 60, name TransactTime, type UTCTIMESTAMP
  string url_link = 123;  // tag 149, name URLLink, type STRING
  double spread = 124;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 125;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 126;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 127;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 128;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 129;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 130;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 131;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 132;  // tag 235, name YieldType, type STRING
  double yield = 133;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 134;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 135;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 136;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 137;  // tag 698, name YieldRedemptionPriceType, type INT

  // GROUPS
  repeated NoSecurityAltId no_security_alt_id = 138;
  repeated NoEvents no_events = 139;
  repeated NoInstrumentParties no_instrument_parties = 140;
  repeated NoComplexEvents no_complex_events = 141;
  repeated NoPartyIds no_party_ids = 142;
  repeated NoUnderlyings no_underlyings = 143;
  repeated NoStipulations no_stipulations = 144;
  repeated NoLegs no_legs = 145;
  repeated NoIoiQualifiers no_ioi_qualifiers = 146;
  repeated NoRoutingIds no_routing_ids = 147;
}

message OrderCancelRequest {
  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_time = 3;
      bool event_px = 4;
      bool event_text = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
    double event_px = 5;  // tag 867, name EventPx, type PRICE
    string event_text = 6;  // tag 868, name EventText, type STRING
  }

  message NoInstrumentParties {
    message NoInstrumentPartySubIds {
      message FieldPresence {
        bool instrument_party_sub_id = 1;
        bool instrument_party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
      int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
    }

    message FieldPresence {
      bool instrument_party_id = 1;
      bool instrument_party_id_source = 2;
      bool instrument_party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
    int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
    int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
  
  // GROUPS
    repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
  }

  message NoComplexEvents {
    message NoComplexEventDates {
      message NoComplexEventTimes {
        message FieldPresence {
          bool complex_event_start_time = 1;
          bool complex_event_end_time = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
        uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
      }

      message FieldPresence {
        bool complex_event_start_date = 1;
        bool complex_event_end_date = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
      uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
    
  // GROUPS
      repeated NoComplexEventTimes no_complex_event_times = 4;
    }

    message FieldPresence {
      bool complex_event_type = 1;
      bool complex_opt_payout_amount = 2;
      bool complex_event_price = 3;
      bool complex_event_price_boundary_method = 4;
      bool complex_event_price_boundary_precision = 5;
      bool complex_event_price_time_type = 6;
      bool complex_event_condition = 7;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
    double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
    double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
    int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
    double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
    int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
    int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
  
  // GROUPS
    repeated NoComplexEventDates no_complex_event_dates = 9;
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message NoUndlyInstrumentParties {
      message NoUndlyInstrumentPartySubIds {
        message FieldPresence {
          bool underlying_instrument_party_sub_id = 1;
          bool underlying_instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
        int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool underlying_instrument_party_id = 1;
        bool underlying_instrument_party_id_source = 2;
        bool underlying_instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
      int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
      int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_maturity_time = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_restructuring_type = 13;
      bool underlying_seniority = 14;
      bool underlying_notional_percentage_outstanding = 15;
      bool underlying_original_notional_percentage_outstanding = 16;
      bool underlying_attachment_point = 17;
      bool underlying_detachment_point = 18;
      bool underlying_issue_date = 19;
      bool underlying_repo_collateral_security_type = 20;
      bool underlying_repurchase_term = 21;
      bool underlying_repurchase_rate = 22;
      bool underlying_factor = 23;
      bool underlying_credit_rating = 24;
      bool underlying_instr_registry = 25;
      bool underlying_country_of_issue = 26;
      bool underlying_state_or_province_of_issue = 27;
      bool underlying_locale_of_issue = 28;
      bool underlying_redemption_date = 29;
      bool underlying_strike_price = 30;
      bool underlying_strike_currency = 31;
      bool underlying_opt_attribute = 32;
      bool underlying_contract_multiplier = 33;
      bool underlying_contract_multiplier_unit = 34;
      bool underlying_flow_schedule_type = 35;
      bool underlying_unit_of_measure = 36;
      bool underlying_unit_of_measure_qty = 37;
      bool underlying_price_unit_of_measure = 38;
      bool underlying_price_unit_of_measure_qty = 39;
      bool underlying_time_unit = 40;
      bool underlying_exercise_style = 41;
      bool underlying_coupon_rate = 42;
      bool underlying_security_exchange = 43;
      bool underlying_issuer = 44;
      bool encoded_underlying_issuer_len = 45;
      bool encoded_underlying_issuer = 46;
      bool underlying_security_desc = 47;
      bool encoded_underlying_security_desc_len = 48;
      bool encoded_underlying_security_desc = 49;
      bool underlying_cp_program = 50;
      bool underlying_cp_reg_type = 51;
      bool underlying_allocation_percent = 52;
      bool underlying_currency = 53;
      bool underlying_qty = 54;
      bool underlying_settlement_type = 55;
      bool underlying_cash_amount = 56;
      bool underlying_cash_type = 57;
      bool underlying_px = 58;
      bool underlying_dirty_price = 59;
      bool underlying_end_price = 60;
      bool underlying_start_value = 61;
      bool underlying_current_value = 62;
      bool underlying_end_value = 63;
      bool underlying_adjusted_quantity = 64;
      bool underlying_fx_rate = 65;
      bool underlying_fx_rate_calc = 66;
      bool underlying_cap_value = 67;
      bool underlying_settl_method = 68;
      bool underlying_put_or_call = 69;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
    string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
    double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
    double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
    string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
    int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
    string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
    double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
    string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
    double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
    string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
    int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
    double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
    double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
    string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
    int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
    double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
    string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
    double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
    double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
    double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
    int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
    double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
    string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
    int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
    repeated NoUnderlyingStips no_underlying_stips = 72;
    repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
  }

  message FieldPresence {
    bool orig_cl_ord_id = 1;
    bool order_id = 2;
    bool cl_ord_id = 3;
    bool secondary_cl_ord_id = 4;
    bool cl_ord_link_id = 5;
    bool list_id = 6;
    bool orig_ord_mod_time = 7;
    bool account = 8;
    bool acct_id_source = 9;
    bool account_type = 10;
    bool symbol = 11;
    bool symbol_sfx = 12;
    bool security_id = 13;
    bool security_id_source = 14;
    bool product = 15;
    bool product_complex = 16;
    bool security_group = 17;
    bool cfi_code = 18;
    bool security_type = 19;
    bool security_sub_type = 20;
    bool maturity_month_year = 21;
    bool maturity_date = 22;
    bool maturity_time = 23;
    bool settle_on_open_flag = 24;
    bool instrmt_assignment_method = 25;
    bool security_status = 26;
    bool coupon_payment_date = 27;
    bool restructuring_type = 28;
    bool seniority = 29;
    bool notional_percentage_outstanding = 30;
    bool original_notional_percentage_outstanding = 31;
    bool attachment_point = 32;
    bool detachment_point = 33;
    bool issue_date = 34;
    bool repo_collateral_security_type = 35;
    bool repurchase_term = 36;
    bool repurchase_rate = 37;
    bool factor = 38;
    bool credit_rating = 39;
    bool instr_registry = 40;
    bool country_of_issue = 41;
    bool state_or_province_of_issue = 42;
    bool locale_of_issue = 43;
    bool redemption_date = 44;
    bool strike_price = 45;
    bool strike_currency = 46;
    bool strike_multiplier = 47;
    bool strike_value = 48;
    bool strike_price_determination_method = 49;
    bool strike_price_boundary_method = 50;
    bool strike_price_boundary_precision = 51;
    bool underlying_price_determination_method = 52;
    bool opt_attribute = 53;
    bool contract_multiplier = 54;
    bool contract_multiplier_unit = 55;
    bool flow_schedule_type = 56;
    bool min_price_increment = 57;
    bool min_price_increment_amount = 58;
    bool unit_of_measure = 59;
    bool unit_of_measure_qty = 60;
    bool price_unit_of_measure = 61;
    bool price_unit_of_measure_qty = 62;
    bool settl_method = 63;
    bool exercise_style = 64;
    bool opt_payout_type = 65;
    bool opt_payout_amount = 66;
    bool price_quote_method = 67;
    bool valuation_method = 68;
    bool list_method = 69;
    bool cap_price = 70;
    bool floor_price = 71;
    bool put_or_call = 72;
    bool flexible_indicator = 73;
    bool flex_product_eligibility_indicator = 74;
    bool time_unit = 75;
    bool coupon_rate = 76;
    bool security_exchange = 77;
    bool position_limit = 78;
    bool nt_position_limit = 79;
    bool issuer = 80;
    bool encoded_issuer_len = 81;
    bool encoded_issuer = 82;
    bool security_desc = 83;
    bool encoded_security_desc_len = 84;
    bool encoded_security_desc = 85;
    bool security_xml_len = 86;
    bool security_xml_data = 87;
    bool security_xml_schema = 88;
    bool pool = 89;
    bool contract_settl_month = 90;
    bool cp_program = 91;
    bool cp_reg_type = 92;
    bool dated_date = 93;
    bool interest_accrual_date = 94;
    bool agreement_desc = 95;
    bool agreement_id = 96;
    bool agreement_date = 97;
    bool agreement_currency = 98;
    bool termination_type = 99;
    bool start_date = 100;
    bool end_date = 101;
    bool delivery_type = 102;
    bool margin_ratio = 103;
    bool side = 104;
    bool transact_time = 105;
    bool order_qty = 106;
    bool cash_order_qty = 107;
    bool order_percent = 108;
    bool rounding_direction = 109;
    bool rounding_modulus = 110;
    bool compliance_id = 111;
    bool text = 112;
    bool encoded_text_len = 113;
    bool encoded_text = 114;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string orig_cl_ord_id = 5;  // tag 41, name OrigClOrdID, type STRING
  string order_id = 6;  // tag 37, name OrderID, type STRING
  string cl_ord_id = 7;  // tag 11, name ClOrdID, type STRING
  string secondary_cl_ord_id = 8;  // tag 526, name SecondaryClOrdID, type STRING
  string cl_ord_link_id = 9;  // tag 583, name ClOrdLinkID, type STRING
  string list_id = 10;  // tag 66, name ListID, type STRING
  uint64 orig_ord_mod_time = 11;  // tag 586, name OrigOrdModTime, type UTCTIMESTAMP
  string account = 12;  // tag 1, name Account, type STRING
  int32 acct_id_source = 13;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 14;  // tag 581, name AccountType, type INT
  string symbol = 15;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 16;  // tag 65, name SymbolSfx, type STRING
  string security_id = 17;  // tag 48, name SecurityID, type STRING
  string security_id_source = 18;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 19;  // tag 460, name Product, type INT
  string product_complex = 20;  // tag 1227, name ProductComplex, type STRING
  string security_group = 21;  // tag 1151, name SecurityGroup, type STRING
  string cfi_code = 22;  // tag 461, name CFICode, type STRING
  string security_type = 23;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 24;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 25;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 26;  // tag 541, name MaturityDate, type LOCALMKTDATE
  string maturity_time = 27;  // tag 1079, name MaturityTime, type TZTIMEONLY
  string settle_on_open_flag = 28;  // tag 966, name SettleOnOpenFlag, type STRING
  int32 instrmt_assignment_method = 29;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
  string security_status = 30;  // tag 965, name SecurityStatus, type STRING
  string coupon_payment_date = 31;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string restructuring_type = 32;  // tag 1449, name RestructuringType, type STRING
  string seniority = 33;  // tag 1450, name Seniority, type STRING
  double notional_percentage_outstanding = 34;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
  double original_notional_percentage_outstanding = 35;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
  double attachment_point = 36;  // tag 1457, name AttachmentPoint, type PERCENTAGE
  double detachment_point = 37;  // tag 1458, name DetachmentPoint, type PERCENTAGE
  string issue_date = 38;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 39;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 40;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 41;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 42;  // tag 228, name Factor, type FLOAT
  string credit_rating = 43;  // tag 255, name CreditRating, type STRING
  string instr_registry = 44;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 45;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 46;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 47;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 48;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 49;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 50;  // tag 947, name StrikeCurrency, type CURRENCY
  double strike_multiplier = 51;  // tag 967, name StrikeMultiplier, type FLOAT
  double strike_value = 52;  // tag 968, name StrikeValue, type FLOAT
  int32 strike_price_determination_method = 53;  // tag 1478, name StrikePriceDeterminationMethod, type INT
  int32 strike_price_boundary_method = 54;  // tag 1479, name StrikePriceBoundaryMethod, type INT
  double strike_price_boundary_precision = 55;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
  int32 underlying_price_determination_method = 56;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
  int32 opt_attribute = 57;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 58;  // tag 231, name ContractMultiplier, type FLOAT
  int32 contract_multiplier_unit = 59;  // tag 1435, name ContractMultiplierUnit, type INT
  int32 flow_schedule_type = 60;  // tag 1439, name FlowScheduleType, type INT
  double min_price_increment = 61;  // tag 969, name MinPriceIncrement, type FLOAT
  double min_price_increment_amount = 62;  // tag 1146, name MinPriceIncrementAmount, type AMT
  string unit_of_measure = 63;  // tag 996, name UnitOfMeasure, type STRING
  double unit_of_measure_qty = 64;  // tag 1147, name UnitOfMeasureQty, type QTY
  string price_unit_of_measure = 65;  // tag 1191, name PriceUnitOfMeasure, type STRING
  double price_unit_of_measure_qty = 66;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
  int32 settl_method = 67;  // tag 1193, name SettlMethod, type CHAR
  int32 exercise_style = 68;  // tag 1194, name ExerciseStyle, type INT
  int32 opt_payout_type = 69;  // tag 1482, name OptPayoutType, type INT
  double opt_payout_amount = 70;  // tag 1195, name OptPayoutAmount, type AMT
  string price_quote_method = 71;  // tag 1196, name PriceQuoteMethod, type STRING
  string valuation_method = 72;  // tag 1197, name ValuationMethod, type STRING
  int32 list_method = 73;  // tag 1198, name ListMethod, type INT
  double cap_price = 74;  // tag 1199, name CapPrice, type PRICE
  double floor_price = 75;  // tag 1200, name FloorPrice, type PRICE
  int32 put_or_call = 76;  // tag 201, name PutOrCall, type INT
  bool flexible_indicator = 77;  // tag 1244, name FlexibleIndicator, type BOOLEAN
  bool flex_product_eligibility_indicator = 78;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
  string time_unit = 79;  // tag 997, name TimeUnit, type STRING
  double coupon_rate = 80;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 81;  // tag 207, name SecurityExchange, type EXCHANGE
  int32 position_limit = 82;  // tag 970, name PositionLimit, type INT
  int32 nt_position_limit = 83;  // tag 971, name NTPositionLimit, type INT
  string issuer = 84;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 85;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 86;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 87;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 88;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 89;  // tag 351, name EncodedSecurityDesc, type DATA
  int32 security_xml_len = 90;  // tag 1184, name SecurityXMLLen, type LENGTH
  string security_xml_data = 91;  // tag 1185, name SecurityXMLData, type XMLDATA
  string security_xml_schema = 92;  // tag 1186, name SecurityXMLSchema, type STRING
  string pool = 93;  // tag 691, name Pool, type STRING
  string contract_settl_month = 94;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 95;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 96;  // tag 876, name CPRegType, type STRING
  string dated_date = 97;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 98;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 99;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 100;  // tag 914, name AgreementID, type STRING
  string agreement_date = 101;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 102;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 103;  // tag 788, name TerminationType, type INT
  string start_date = 104;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 105;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 106;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 107;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 108;  // tag 54, name Side, type CHAR
  uint64 transact_time = 109;  // tag 60, name TransactTime, type UTCTIMESTAMP
  double order_qty = 110;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 111;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 112;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 113;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 114;  // tag 469, name RoundingModulus, type FLOAT
  string compliance_id = 115;  // tag 376, name ComplianceID, type STRING
  string text = 116;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 117;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 118;  // tag 355, name EncodedText, type DATA

  // GROUPS
  repeated NoPartyIds no_party_ids = 119;
  repeated NoSecurityAltId no_security_alt_id = 120;
  repeated NoEvents no_events = 121;
  repeated NoInstrumentParties no_instrument_parties = 122;
  repeated NoComplexEvents no_complex_events = 123;
  repeated NoUnderlyings no_underlyings = 124;
}

message Quote {
  message NoQuoteQualifiers {
    message FieldPresence {
      bool quote_qualifier = 1;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 quote_qualifier = 2;  // tag 695, name QuoteQualifier, type CHAR
  }

  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_time = 3;
      bool event_px = 4;
      bool event_text = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    uint64 event_time = 4;  // tag 1145, name EventTime, type UTCTIMESTAMP
    double event_px = 5;  // tag 867, name EventPx, type PRICE
    string event_text = 6;  // tag 868, name EventText, type STRING
  }

  message NoInstrumentParties {
    message NoInstrumentPartySubIds {
      message FieldPresence {
        bool instrument_party_sub_id = 1;
        bool instrument_party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string instrument_party_sub_id = 2;  // tag 1053, name InstrumentPartySubID, type STRING
      int32 instrument_party_sub_id_type = 3;  // tag 1054, name InstrumentPartySubIDType, type INT
    }

    message FieldPresence {
      bool instrument_party_id = 1;
      bool instrument_party_id_source = 2;
      bool instrument_party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string instrument_party_id = 2;  // tag 1019, name InstrumentPartyID, type STRING
    int32 instrument_party_id_source = 3;  // tag 1050, name InstrumentPartyIDSource, type CHAR
    int32 instrument_party_role = 4;  // tag 1051, name InstrumentPartyRole, type INT
  
  // GROUPS
    repeated NoInstrumentPartySubIds no_instrument_party_sub_ids = 5;
  }

  message NoComplexEvents {
    message NoComplexEventDates {
      message NoComplexEventTimes {
        message FieldPresence {
          bool complex_event_start_time = 1;
          bool complex_event_end_time = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        uint64 complex_event_start_time = 2;  // tag 1495, name ComplexEventStartTime, type UTCTIMEONLY
        uint64 complex_event_end_time = 3;  // tag 1496, name ComplexEventEndTime, type UTCTIMEONLY
      }

      message FieldPresence {
        bool complex_event_start_date = 1;
        bool complex_event_end_date = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      uint64 complex_event_start_date = 2;  // tag 1492, name ComplexEventStartDate, type UTCTIMESTAMP
      uint64 complex_event_end_date = 3;  // tag 1493, name ComplexEventEndDate, type UTCTIMESTAMP
    
  // GROUPS
      repeated NoComplexEventTimes no_complex_event_times = 4;
    }

    message FieldPresence {
      bool complex_event_type = 1;
      bool complex_opt_payout_amount = 2;
      bool complex_event_price = 3;
      bool complex_event_price_boundary_method = 4;
      bool complex_event_price_boundary_precision = 5;
      bool complex_event_price_time_type = 6;
      bool complex_event_condition = 7;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 complex_event_type = 2;  // tag 1484, name ComplexEventType, type INT
    double complex_opt_payout_amount = 3;  // tag 1485, name ComplexOptPayoutAmount, type AMT
    double complex_event_price = 4;  // tag 1486, name ComplexEventPrice, type PRICE
    int32 complex_event_price_boundary_method = 5;  // tag 1487, name ComplexEventPriceBoundaryMethod, type INT
    double complex_event_price_boundary_precision = 6;  // tag 1488, name ComplexEventPriceBoundaryPrecision, type PERCENTAGE
    int32 complex_event_price_time_type = 7;  // tag 1489, name ComplexEventPriceTimeType, type INT
    int32 complex_event_condition = 8;  // tag 1490, name ComplexEventCondition, type INT
  
  // GROUPS
    repeated NoComplexEventDates no_complex_event_dates = 9;
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message NoUndlyInstrumentParties {
      message NoUndlyInstrumentPartySubIds {
        message FieldPresence {
          bool underlying_instrument_party_sub_id = 1;
          bool underlying_instrument_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_instrument_party_sub_id = 2;  // tag 1063, name UnderlyingInstrumentPartySubID, type STRING
        int32 underlying_instrument_party_sub_id_type = 3;  // tag 1064, name UnderlyingInstrumentPartySubIDType, type INT
      }

      message FieldPresence {
        bool underlying_instrument_party_id = 1;
        bool underlying_instrument_party_id_source = 2;
        bool underlying_instrument_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_instrument_party_id = 2;  // tag 1059, name UnderlyingInstrumentPartyID, type STRING
      int32 underlying_instrument_party_id_source = 3;  // tag 1060, name UnderlyingInstrumentPartyIDSource, type CHAR
      int32 underlying_instrument_party_role = 4;  // tag 1061, name UnderlyingInstrumentPartyRole, type INT
    
  // GROUPS
      repeated NoUndlyInstrumentPartySubIds no_undly_instrument_party_sub_ids = 5;
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_maturity_time = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_restructuring_type = 13;
      bool underlying_seniority = 14;
      bool underlying_notional_percentage_outstanding = 15;
      bool underlying_original_notional_percentage_outstanding = 16;
      bool underlying_attachment_point = 17;
      bool underlying_detachment_point = 18;
      bool underlying_issue_date = 19;
      bool underlying_repo_collateral_security_type = 20;
      bool underlying_repurchase_term = 21;
      bool underlying_repurchase_rate = 22;
      bool underlying_factor = 23;
      bool underlying_credit_rating = 24;
      bool underlying_instr_registry = 25;
      bool underlying_country_of_issue = 26;
      bool underlying_state_or_province_of_issue = 27;
      bool underlying_locale_of_issue = 28;
      bool underlying_redemption_date = 29;
      bool underlying_strike_price = 30;
      bool underlying_strike_currency = 31;
      bool underlying_opt_attribute = 32;
      bool underlying_contract_multiplier = 33;
      bool underlying_contract_multiplier_unit = 34;
      bool underlying_flow_schedule_type = 35;
      bool underlying_unit_of_measure = 36;
      bool underlying_unit_of_measure_qty = 37;
      bool underlying_price_unit_of_measure = 38;
      bool underlying_price_unit_of_measure_qty = 39;
      bool underlying_time_unit = 40;
      bool underlying_exercise_style = 41;
      bool underlying_coupon_rate = 42;
      bool underlying_security_exchange = 43;
      bool underlying_issuer = 44;
      bool encoded_underlying_issuer_len = 45;
      bool encoded_underlying_issuer = 46;
      bool underlying_security_desc = 47;
      bool encoded_underlying_security_desc_len = 48;
      bool encoded_underlying_security_desc = 49;
      bool underlying_cp_program = 50;
      bool underlying_cp_reg_type = 51;
      bool underlying_allocation_percent = 52;
      bool underlying_currency = 53;
      bool underlying_qty = 54;
      bool underlying_settlement_type = 55;
      bool underlying_cash_amount = 56;
      bool underlying_cash_type = 57;
      bool underlying_px = 58;
      bool underlying_dirty_price = 59;
      bool underlying_end_price = 60;
      bool underlying_start_value = 61;
      bool underlying_current_value = 62;
      bool underlying_end_value = 63;
      bool underlying_adjusted_quantity = 64;
      bool underlying_fx_rate = 65;
      bool underlying_fx_rate_calc = 66;
      bool underlying_cap_value = 67;
      bool underlying_settl_method = 68;
      bool underlying_put_or_call = 69;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    string underlying_maturity_time = 12;  // tag 1213, name UnderlyingMaturityTime, type TZTIMEONLY
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_restructuring_type = 14;  // tag 1453, name UnderlyingRestructuringType, type STRING
    string underlying_seniority = 15;  // tag 1454, name UnderlyingSeniority, type STRING
    double underlying_notional_percentage_outstanding = 16;  // tag 1455, name UnderlyingNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_original_notional_percentage_outstanding = 17;  // tag 1456, name UnderlyingOriginalNotionalPercentageOutstanding, type PERCENTAGE
    double underlying_attachment_point = 18;  // tag 1459, name UnderlyingAttachmentPoint, type PERCENTAGE
    double underlying_detachment_point = 19;  // tag 1460, name UnderlyingDetachmentPoint, type PERCENTAGE
    string underlying_issue_date = 20;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 21;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 22;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 23;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 24;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 25;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 26;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 27;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 28;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 29;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 30;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 31;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 32;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 33;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 34;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    int32 underlying_contract_multiplier_unit = 35;  // tag 1437, name UnderlyingContractMultiplierUnit, type INT
    int32 underlying_flow_schedule_type = 36;  // tag 1441, name UnderlyingFlowScheduleType, type INT
    string underlying_unit_of_measure = 37;  // tag 998, name UnderlyingUnitOfMeasure, type STRING
    double underlying_unit_of_measure_qty = 38;  // tag 1423, name UnderlyingUnitOfMeasureQty, type QTY
    string underlying_price_unit_of_measure = 39;  // tag 1424, name UnderlyingPriceUnitOfMeasure, type STRING
    double underlying_price_unit_of_measure_qty = 40;  // tag 1425, name UnderlyingPriceUnitOfMeasureQty, type QTY
    string underlying_time_unit = 41;  // tag 1000, name UnderlyingTimeUnit, type STRING
    int32 underlying_exercise_style = 42;  // tag 1419, name UnderlyingExerciseStyle, type INT
    double underlying_coupon_rate = 43;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 44;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 45;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 46;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 47;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 48;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 49;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 50;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 51;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 52;  // tag 878, name UnderlyingCPRegType, type STRING
    double underlying_allocation_percent = 53;  // tag 972, name UnderlyingAllocationPercent, type PERCENTAGE
    string underlying_currency = 54;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 55;  // tag 879, name UnderlyingQty, type QTY
    int32 underlying_settlement_type = 56;  // tag 975, name UnderlyingSettlementType, type INT
    double underlying_cash_amount = 57;  // tag 973, name UnderlyingCashAmount, type AMT
    string underlying_cash_type = 58;  // tag 974, name UnderlyingCashType, type STRING
    double underlying_px = 59;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 60;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 61;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 62;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 63;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 64;  // tag 886, name UnderlyingEndValue, type AMT
    double underlying_adjusted_quantity = 65;  // tag 1044, name UnderlyingAdjustedQuantity, type QTY
    double underlying_fx_rate = 66;  // tag 1045, name UnderlyingFXRate, type FLOAT
    int32 underlying_fx_rate_calc = 67;  // tag 1046, name UnderlyingFXRateCalc, type CHAR
    double underlying_cap_value = 68;  // tag 1038, name UnderlyingCapValue, type AMT
    string underlying_settl_method = 69;  // tag 1039, name UnderlyingSettlMethod, type STRING
    int32 underlying_put_or_call = 70;  // tag 315, name UnderlyingPutOrCall, type INT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 71;
    repeated NoUnderlyingStips no_underlying_stips = 72;
    repeated NoUndlyInstrumentParties no_undly_instrument_parties = 73;
  }

  message NoRateSources {
    message FieldPresence {
      bool rate_source = 1;
      bool rate_source_type = 2;
      bool reference_page = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 rate_source = 2;  // tag 1446, name RateSource, type INT
    int32 rate_source_type = 3;  // tag 1447, name RateSourceType, type INT
    string reference_page = 4;  // tag 1448, name ReferencePage, type STRING
  }

  message NoStipulations {
    message FieldPresence {
      bool stipulation_type = 1;
      bool stipulation_value = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
    string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
  }

  message NoLegs {
    message NoLegSecurityAltId {
      message FieldPresence {
        bool leg_security_alt_id = 1;
        bool leg_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
      string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
    }

    message NoLegStipulations {
      message FieldPresence {
        bool leg_stipulation_type = 1;
        bool leg_stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
      string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
    }

    message NoNestedPartyIds {
      message NoNestedPartySubIds {
        message FieldPresence {
          bool nested_party_sub_id = 1;
          bool nested_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
        int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
      }

      message FieldPresence {
        bool nested_party_id = 1;
        bool nested_party_id_source = 2;
        bool nested_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
      int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
      int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
    
  // GROUPS
      repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
    }

    message FieldPresence {
      bool leg_symbol = 1;
      bool leg_symbol_sfx = 2;
      bool leg_security_id = 3;
      bool leg_security_id_source = 4;
      bool leg_product = 5;
      bool leg_cfi_code = 6;
      bool leg_security_type = 7;
      bool leg_security_sub_type = 8;
      bool leg_maturity_month_year = 9;
      bool leg_maturity_date = 10;
      bool leg_maturity_time = 11;
      bool leg_coupon_payment_date = 12;
      bool leg_issue_date = 13;
      bool leg_repo_collateral_security_type = 14;
      bool leg_repurchase_term = 15;
      bool leg_repurchase_rate = 16;
      bool leg_factor = 17;
      bool leg_credit_rating = 18;
      bool leg_instr_registry = 19;
      bool leg_country_of_issue = 20;
      bool leg_state_or_province_of_issue = 21;
      bool leg_locale_of_issue = 22;
      bool leg_redemption_date = 23;
      bool leg_strike_price = 24;
      bool leg_strike_currency = 25;
      bool leg_opt_attribute = 26;
      bool leg_contract_multiplier = 27;
      bool leg_contract_multiplier_unit = 28;
      bool leg_flow_schedule_type = 29;
      bool leg_unit_of_measure = 30;
      bool leg_unit_of_measure_qty = 31;
      bool leg_price_unit_of_measure = 32;
      bool leg_price_unit_of_measure_qty = 33;
      bool leg_time_unit = 34;
      bool leg_exercise_style = 35;
      bool leg_coupon_rate = 36;
      bool leg_security_exchange = 37;
      bool leg_issuer = 38;
      bool encoded_leg_issuer_len = 39;
      bool encoded_leg_issuer = 40;
      bool leg_security_desc = 41;
      bool encoded_leg_security_desc_len = 42;
      bool encoded_leg_security_desc = 43;
      bool leg_ratio_qty = 44;
      bool leg_side = 45;
      bool leg_currency = 46;
      bool leg_pool = 47;
      bool leg_dated_date = 48;
      bool leg_contract_settl_month = 49;
      bool leg_interest_accrual_date = 50;
      bool leg_put_or_call = 51;
      bool leg_option_ratio = 52;
      bool leg_price = 53;
      bool leg_qty = 54;
      bool leg_order_qty = 55;
      bool leg_swap_type = 56;
      bool leg_settl_type = 57;
      bool leg_settl_date = 58;
      bool leg_price_type = 59;
      bool leg_bid_px = 60;
      bool leg_offer_px = 61;
      bool leg_benchmark_curve_currency = 62;
      bool leg_benchmark_curve_name = 63;
      bool leg_benchmark_curve_point = 64;
      bool leg_benchmark_price = 65;
      bool leg_benchmark_price_type = 66;
      bool leg_ref_id = 67;
      bool leg_bid_forward_points = 68;
      bool leg_offer_forward_points = 69;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
    string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
    string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
    string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
    int32 leg_product = 6;  // tag 607, name LegProduct, type INT
    string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
    string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
    string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
    string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
    string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
    string leg_maturity_time = 12;  // tag 1212, name LegMaturityTime, type TZTIMEONLY
    string leg_coupon_payment_date = 13;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
    string leg_issue_date = 14;  // tag 249, name LegIssueDate, type LOCALMKTDATE
    string leg_repo_collateral_security_type = 15;  // tag 250, name LegRepoCollateralSecurityType, type STRING
    int32 leg_repurchase_term = 16;  // tag 251, name LegRepurchaseTerm, type INT
    double leg_repurchase_rate = 17;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
    double leg_factor = 18;  // tag 253, name LegFactor, type FLOAT
    string leg_credit_rating = 19;  // tag 257, name LegCreditRating, type STRING
    string leg_instr_registry = 20;  // tag 599, name LegInstrRegistry, type STRING
    string leg_country_of_issue = 21;  // tag 596, name LegCountryOfIssue, type COUNTRY
    string leg_state_or_province_of_issue = 22;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
    string leg_locale_of_issue = 23;  // tag 598, name LegLocaleOfIssue, type STRING
    string leg_redemption_date = 24;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
    double leg_strike_price = 25;  // tag 612, name LegStrikePrice, type PRICE
    string leg_strike_currency = 26;  // tag 942, name LegStrikeCurrency, type CURRENCY
    int32 leg_opt_attribute = 27;  // tag 613, name LegOptAttribute, type CHAR
    double leg_contract_multiplier = 28;  // tag 614, name LegContractMultiplier, type FLOAT
    int32 leg_contract_multiplier_unit = 29;  // tag 1436, name LegContractMultiplierUnit, type INT
    int32 leg_flow_schedule_type = 30;  // tag 1440, name LegFlowScheduleType, type INT
    string leg_unit_of_measure = 31;  // tag 999, name LegUnitOfMeasure, type STRING
    double leg_unit_of_measure_qty = 32;  // tag 1224, name LegUnitOfMeasureQty, type QTY
    string leg_price_unit_of_measure = 33;  // tag 1421, name LegPriceUnitOfMeasure, type STRING
    double leg_price_unit_of_measure_qty = 34;  // tag 1422, name LegPriceUnitOfMeasureQty, type QTY
    string leg_time_unit = 35;  // tag 1001, name LegTimeUnit, type STRING
    int32 leg_exercise_style = 36;  // tag 1420, name LegExerciseStyle, type INT
    double leg_coupon_rate = 37;  // tag 615, name LegCouponRate, type PERCENTAGE
    string leg_security_exchange = 38;  // tag 616, name LegSecurityExchange, type EXCHANGE
    string leg_issuer = 39;  // tag 617, name LegIssuer, type STRING
    int32 encoded_leg_issuer_len = 40;  // tag 618, name EncodedLegIssuerLen, type LENGTH
    string encoded_leg_issuer = 41;  // tag 619, name EncodedLegIssuer, type DATA
    string leg_security_desc = 42;  // tag 620, name LegSecurityDesc, type STRING
    int32 encoded_leg_security_desc_len = 43;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
    string encoded_leg_security_desc = 44;  // tag 622, name EncodedLegSecurityDesc, type DATA
    double leg_ratio_qty = 45;  // tag 623, name LegRatioQty, type FLOAT
    int32 leg_side = 46;  // tag 624, name LegSide, type CHAR
    string leg_currency = 47;  // tag 556, name LegCurrency, type CURRENCY
    string leg_pool = 48;  // tag 740, name LegPool, type STRING
    string leg_dated_date = 49;  // tag 739, name LegDatedDate, type LOCALMKTDATE
    string leg_contract_settl_month = 50;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
    string leg_interest_accrual_date = 51;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
    int32 leg_put_or_call = 52;  // tag 1358, name LegPutOrCall, type INT
    double leg_option_ratio = 53;  // tag 1017, name LegOptionRatio, type FLOAT
    double leg_price = 54;  // tag 566, name LegPrice, type PRICE
    double leg_qty = 55;  // tag 687, name LegQty, type QTY
    double leg_order_qty = 56;  // tag 685, name LegOrderQty, type QTY
    int32 leg_swap_type = 57;  // tag 690, name LegSwapType, type INT
    int32 leg_settl_type = 58;  // tag 587, name LegSettlType, type CHAR
    string leg_settl_date = 59;  // tag 588, name LegSettlDate, type LOCALMKTDATE
    int32 leg_price_type = 60;  // tag 686, name LegPriceType, type INT
    double leg_bid_px = 61;  // tag 681, name LegBidPx, type PRICE
    double leg_offer_px = 62;  // tag 684, name LegOfferPx, type PRICE
    string leg_benchmark_curve_currency = 63;  // tag 676, name LegBenchmarkCurveCurrency, type CURRENCY
    string leg_benchmark_curve_name = 64;  // tag 677, name LegBenchmarkCurveName, type STRING
    string leg_benchmark_curve_point = 65;  // tag 678, name LegBenchmarkCurvePoint, type STRING
    double leg_benchmark_price = 66;  // tag 679, name LegBenchmarkPrice, type PRICE
    int32 leg_benchmark_price_type = 67;  // tag 680, name LegBenchmarkPriceType, type INT
    string leg_ref_id = 68;  // tag 654, name LegRefID, type STRING
    double leg_bid_forward_points = 69;  // tag 1067, name LegBidForwardPoints, type PRICEOFFSET
    double leg_offer_forward_points = 70;  // tag 1068, name LegOfferForwardPoints, type PRICEOFFSET
  
  // GROUPS
    repeated NoLegSecurityAltId no_leg_security_alt_id = 71;
    repeated NoLegStipulations no_leg_stipulations = 72;
    repeated NoNestedPartyIds no_nested_party_ids = 73;
  }

  message FieldPresence {
    bool quote_req_id = 1;
    bool quote_id = 2;
    bool quote_msg_id = 3;
    bool quote_resp_id = 4;
    bool quote_type = 5;
    bool private_quote = 6;
    bool quote_response_level = 7;
    bool trading_session_id = 8;
    bool trading_session_sub_id = 9;
    bool symbol = 10;
    bool symbol_sfx = 11;
    bool security_id = 12;
    bool security_id_source = 13;
    bool product = 14;
    bool product_complex = 15;
    bool security_group = 16;
    bool cfi_code = 17;
    bool security_type = 18;
    bool security_sub_type = 19;
    bool maturity_month_year = 20;
    bool maturity_date = 21;
    bool maturity_time = 22;
    bool settle_on_open_flag = 23;
    bool instrmt_assignment_method = 24;
    bool security_status = 25;
    bool coupon_payment_date = 26;
    bool restructuring_type = 27;
    bool seniority = 28;
    bool notional_percentage_outstanding = 29;
    bool original_notional_percentage_outstanding = 30;
    bool attachment_point = 31;
    bool detachment_point = 32;
    bool issue_date = 33;
    bool repo_collateral_security_type = 34;
    bool repurchase_term = 35;
    bool repurchase_rate = 36;
    bool factor = 37;
    bool credit_rating = 38;
    bool instr_registry = 39;
    bool country_of_issue = 40;
    bool state_or_province_of_issue = 41;
    bool locale_of_issue = 42;
    bool redemption_date = 43;
    bool strike_price = 44;
    bool strike_currency = 45;
    bool strike_multiplier = 46;
    bool strike_value = 47;
    bool strike_price_determination_method = 48;
    bool strike_price_boundary_method = 49;
    bool strike_price_boundary_precision = 50;
    bool underlying_price_determination_method = 51;
    bool opt_attribute = 52;
    bool contract_multiplier = 53;
    bool contract_multiplier_unit = 54;
    bool flow_schedule_type = 55;
    bool min_price_increment = 56;
    bool min_price_increment_amount = 57;
    bool unit_of_measure = 58;
    bool unit_of_measure_qty = 59;
    bool price_unit_of_measure = 60;
    bool price_unit_of_measure_qty = 61;
    bool settl_method = 62;
    bool exercise_style = 63;
    bool opt_payout_type = 64;
    bool opt_payout_amount = 65;
    bool price_quote_method = 66;
    bool valuation_method = 67;
    bool list_method = 68;
    bool cap_price = 69;
    bool floor_price = 70;
    bool put_or_call = 71;
    bool flexible_indicator = 72;
    bool flex_product_eligibility_indicator = 73;
    bool time_unit = 74;
    bool coupon_rate = 75;
    bool security_exchange = 76;
    bool position_limit = 77;
    bool nt_position_limit = 78;
    bool issuer = 79;
    bool encoded_issuer_len = 80;
    bool encoded_issuer = 81;
    bool security_desc = 82;
    bool encoded_security_desc_len = 83;
    bool encoded_security_desc = 84;
    bool security_xml_len = 85;
    bool security_xml_data = 86;
    bool security_xml_schema = 87;
    bool pool = 88;
    bool contract_settl_month = 89;
    bool cp_program = 90;
    bool cp_reg_type = 91;
    bool dated_date = 92;
    bool interest_accrual_date = 93;
    bool agreement_desc = 94;
    bool agreement_id = 95;
    bool agreement_date = 96;
    bool agreement_currency = 97;
    bool termination_type = 98;
    bool start_date = 99;
    bool end_date = 100;
    bool delivery_type = 101;
    bool margin_ratio = 102;
    bool side = 103;
    bool order_qty = 104;
    bool cash_order_qty = 105;
    bool order_percent = 106;
    bool rounding_direction = 107;
    bool rounding_modulus = 108;
    bool settl_type = 109;
    bool settl_date = 110;
    bool settl_date2 = 111;
    bool order_qty2 = 112;
    bool currency = 113;
    bool settl_currency = 114;
    bool account = 115;
    bool acct_id_source = 116;
    bool account_type = 117;
    bool bid_px = 118;
    bool offer_px = 119;
    bool mkt_bid_px = 120;
    bool mkt_offer_px = 121;
    bool min_bid_size = 122;
    bool bid_size = 123;
    bool min_offer_size = 124;
    bool offer_size = 125;
    bool min_qty = 126;
    bool valid_until_time = 127;
    bool bid_spot_rate = 128;
    bool offer_spot_rate = 129;
    bool bid_forward_points = 130;
    bool offer_forward_points = 131;
    bool bid_swap_points = 132;
    bool offer_swap_points = 133;
    bool mid_px = 134;
    bool bid_yield = 135;
    bool mid_yield = 136;
    bool offer_yield = 137;
    bool transact_time = 138;
    bool ord_type = 139;
    bool bid_forward_points2 = 140;
    bool offer_forward_points2 = 141;
    bool settl_curr_bid_fx_rate = 142;
    bool settl_curr_offer_fx_rate = 143;
    bool settl_curr_fx_rate_calc = 144;
    bool comm_type = 145;
    bool commission = 146;
    bool cust_order_capacity = 147;
    bool ex_destination = 148;
    bool ex_destination_id_source = 149;
    bool booking_type = 150;
    bool order_capacity = 151;
    bool order_restrictions = 152;
    bool price_type = 153;
    bool spread = 154;
    bool benchmark_curve_currency = 155;
    bool benchmark_curve_name = 156;
    bool benchmark_curve_point = 157;
    bool benchmark_price = 158;
    bool benchmark_price_type = 159;
    bool benchmark_security_id = 160;
    bool benchmark_security_id_source = 161;
    bool yield_type = 162;
    bool yield = 163;
    bool yield_calc_date = 164;
    bool yield_redemption_date = 165;
    bool yield_redemption_price = 166;
    bool yield_redemption_price_type = 167;
    bool text = 168;
    bool encoded_text_len = 169;
    bool encoded_text = 170;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string quote_req_id = 5;  // tag 131, name QuoteReqID, type STRING
  string quote_id = 6;  // tag 117, name QuoteID, type STRING
  string quote_msg_id = 7;  // tag 1166, name QuoteMsgID, type STRING
  string quote_resp_id = 8;  // tag 693, name QuoteRespID, type STRING
  int32 quote_type = 9;  // tag 537, name QuoteType, type INT
  bool private_quote = 10;  // tag 1171, name PrivateQuote, type BOOLEAN
  int32 quote_response_level = 11;  // tag 301, name QuoteResponseLevel, type INT
  string trading_session_id = 12;  // tag 336, name TradingSessionID, type STRING
  string trading_session_sub_id = 13;  // tag 625, name TradingSessionSubID, type STRING
  string symbol = 14;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 15;  // tag 65, name SymbolSfx, type STRING
  string security_id = 16;  // tag 48, name SecurityID, type STRING
  string security_id_source = 17;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 18;  // tag 460, name Product, type INT
  string product_complex = 19;  // tag 1227, name ProductComplex, type STRING
  string security_group = 20;  // tag 1151, name SecurityGroup, type STRING
  string cfi_code = 21;  // tag 461, name CFICode, type STRING
  string security_type = 22;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 23;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 24;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 25;  // tag 541, name MaturityDate, type LOCALMKTDATE
  string maturity_time = 26;  // tag 1079, name MaturityTime, type TZTIMEONLY
  string settle_on_open_flag = 27;  // tag 966, name SettleOnOpenFlag, type STRING
  int32 instrmt_assignment_method = 28;  // tag 1049, name InstrmtAssignmentMethod, type CHAR
  string security_status = 29;  // tag 965, name SecurityStatus, type STRING
  string coupon_payment_date = 30;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string restructuring_type = 31;  // tag 1449, name RestructuringType, type STRING
  string seniority = 32;  // tag 1450, name Seniority, type STRING
  double notional_percentage_outstanding = 33;  // tag 1451, name NotionalPercentageOutstanding, type PERCENTAGE
  double original_notional_percentage_outstanding = 34;  // tag 1452, name OriginalNotionalPercentageOutstanding, type PERCENTAGE
  double attachment_point = 35;  // tag 1457, name AttachmentPoint, type PERCENTAGE
  double detachment_point = 36;  // tag 1458, name DetachmentPoint, type PERCENTAGE
  string issue_date = 37;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 38;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 39;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 40;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 41;  // tag 228, name Factor, type FLOAT
  string credit_rating = 42;  // tag 255, name CreditRating, type STRING
  string instr_registry = 43;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 44;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 45;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 46;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 47;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 48;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 49;  // tag 947, name StrikeCurrency, type CURRENCY
  double strike_multiplier = 50;  // tag 967, name StrikeMultiplier, type FLOAT
  double strike_value = 51;  // tag 968, name StrikeValue, type FLOAT
  int32 strike_price_determination_method = 52;  // tag 1478, name StrikePriceDeterminationMethod, type INT
  int32 strike_price_boundary_method = 53;  // tag 1479, name StrikePriceBoundaryMethod, type INT
  double strike_price_boundary_precision = 54;  // tag 1480, name StrikePriceBoundaryPrecision, type PERCENTAGE
  int32 underlying_price_determination_method = 55;  // tag 1481, name UnderlyingPriceDeterminationMethod, type INT
  int32 opt_attribute = 56;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 57;  // tag 231, name ContractMultiplier, type FLOAT
  int32 contract_multiplier_unit = 58;  // tag 1435, name ContractMultiplierUnit, type INT
  int32 flow_schedule_type = 59;  // tag 1439, name FlowScheduleType, type INT
  double min_price_increment = 60;  // tag 969, name MinPriceIncrement, type FLOAT
  double min_price_increment_amount = 61;  // tag 1146, name MinPriceIncrementAmount, type AMT
  string unit_of_measure = 62;  // tag 996, name UnitOfMeasure, type STRING
  double unit_of_measure_qty = 63;  // tag 1147, name UnitOfMeasureQty, type QTY
  string price_unit_of_measure = 64;  // tag 1191, name PriceUnitOfMeasure, type STRING
  double price_unit_of_measure_qty = 65;  // tag 1192, name PriceUnitOfMeasureQty, type QTY
  int32 settl_method = 66;  // tag 1193, name SettlMethod, type CHAR
  int32 exercise_style = 67;  // tag 1194, name ExerciseStyle, type INT
  int32 opt_payout_type = 68;  // tag 1482, name OptPayoutType, type INT
  double opt_payout_amount = 69;  // tag 1195, name OptPayoutAmount, type AMT
  string price_quote_method = 70;  // tag 1196, name PriceQuoteMethod, type STRING
  string valuation_method = 71;  // tag 1197, name ValuationMethod, type STRING
  int32 list_method = 72;  // tag 1198, name ListMethod, type INT
  double cap_price = 73;  // tag 1199, name CapPrice, type PRICE
  double floor_price = 74;  // tag 1200, name FloorPrice, type PRICE
  int32 put_or_call = 75;  // tag 201, name PutOrCall, type INT
  bool flexible_indicator = 76;  // tag 1244, name FlexibleIndicator, type BOOLEAN
  bool flex_product_eligibility_indicator = 77;  // tag 1242, name FlexProductEligibilityIndicator, type BOOLEAN
  string time_unit = 78;  // tag 997, name TimeUnit, type STRING
  double coupon_rate = 79;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 80;  // tag 207, name SecurityExchange, type EXCHANGE
  int32 position_limit = 81;  // tag 970, name PositionLimit, type INT
  int32 nt_position_limit = 82;  // tag 971, name NTPositionLimit, type INT
  string issuer = 83;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 84;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 85;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 86;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 87;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 88;  // tag 351, name EncodedSecurityDesc, type DATA
  int32 security_xml_len = 89;  // tag 1184, name SecurityXMLLen, type LENGTH
  string security_xml_data = 90;  // tag 1185, name SecurityXMLData, type XMLDATA
  string security_xml_schema = 91;  // tag 1186, name SecurityXMLSchema, type STRING
  string pool = 92;  // tag 691, name Pool, type STRING
  string contract_settl_month = 93;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 94;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 95;  // tag 876, name CPRegType, type STRING
  string dated_date = 96;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 97;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 98;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 99;  // tag 914, name AgreementID, type STRING
  string agreement_date = 100;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 101;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 102;  // tag 788, name TerminationType, type INT
  string start_date = 103;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 104;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 105;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 106;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 107;  // tag 54, name Side, type CHAR
  double order_qty = 108;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 109;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 110;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 111;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 112;  // tag 469, name RoundingModulus, type FLOAT
  string settl_type = 113;  // tag 63, name SettlType, type STRING
  string settl_date = 114;  // tag 64, name SettlDate, type LOCALMKTDATE
  string settl_date2 = 115;  // tag 193, name SettlDate2, type LOCALMKTDATE
  double order_qty2 = 116;  // tag 192, name OrderQty2, type QTY
  string currency = 117;  // tag 15, name Currency, type CURRENCY
  string settl_currency = 118;  // tag 120, name SettlCurrency, type CURRENCY
  string account = 119;  // tag 1, name Account, type STRING
  int32 acct_id_source = 120;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 121;  // tag 581, name AccountType, type INT
  double bid_px = 122;  // tag 132, name BidPx, type PRICE
  double offer_px = 123;  // tag 133, name OfferPx, type PRICE
  double mkt_bid_px = 124;  // tag 645, name MktBidPx, type PRICE
  double mkt_offer_px = 125;  // tag 646, name MktOfferPx, type PRICE
  double min_bid_size = 126;  // tag 647, name MinBidSize, type QTY
  double bid_size = 127;  // tag 134, name BidSize, type QTY
  double min_offer_size = 128;  // tag 648, name MinOfferSize, type QTY
  double offer_size = 129;  // tag 135, name OfferSize, type QTY
  double min_qty = 130;  // tag 110, name MinQty, type QTY
  uint64 valid_until_time = 131;  // tag 62, name ValidUntilTime, type UTCTIMESTAMP
  double bid_spot_rate = 132;  // tag 188, name BidSpotRate, type PRICE
  double offer_spot_rate = 133;  // tag 190, name OfferSpotRate, type PRICE
  double bid_forward_points = 134;  // tag 189, name BidForwardPoints, type PRICEOFFSET
  double offer_forward_points = 135;  // tag 191, name OfferForwardPoints, type PRICEOFFSET
  double bid_swap_points = 136;  // tag 1065, name BidSwapPoints, type PRICEOFFSET
  double offer_swap_points = 137;  // tag 1066, name OfferSwapPoints, type PRICEOFFSET
  double mid_px = 138;  // tag 631, name MidPx, type PRICE
  double bid_yield = 139;  // tag 632, name BidYield, type PERCENTAGE
  double mid_yield = 140;  // tag 633, name MidYield, type PERCENTAGE
  double offer_yield = 141;  // tag 634, name OfferYield, type PERCENTAGE
  uint64 transact_time = 142;  // tag 60, name TransactTime, type UTCTIMESTAMP
  int32 ord_type = 143;  // tag 40, name OrdType, type CHAR
  double bid_forward_points2 = 144;  // tag 642, name BidForwardPoints2, type PRICEOFFSET
  double offer_forward_points2 = 145;  // tag 643, name OfferForwardPoints2, type PRICEOFFSET
  double settl_curr_bid_fx_rate = 146;  // tag 656, name SettlCurrBidFxRate, type FLOAT
  double settl_curr_offer_fx_rate = 147;  // tag 657, name SettlCurrOfferFxRate, type FLOAT
  int32 settl_curr_fx_rate_calc = 148;  // tag 156, name SettlCurrFxRateCalc, type CHAR
  int32 comm_type = 149;  // tag 13, name CommType, type CHAR
  double commission = 150;  // tag 12, name Commission, type AMT
  int32 cust_order_capacity = 151;  // tag 582, name CustOrderCapacity, type INT
  string ex_destination = 152;  // tag 100, name ExDestination, type EXCHANGE
  int32 ex_destination_id_source = 153;  // tag 1133, name ExDestinationIDSource, type CHAR
  int32 booking_type = 154;  // tag 775, name BookingType, type INT
  int32 order_capacity = 155;  // tag 528, name OrderCapacity, type CHAR
  string order_restrictions = 156;  // tag 529, name OrderRestrictions, type MULTIPLECHARVALUE
  int32 price_type = 157;  // tag 423, name PriceType, type INT
  double spread = 158;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 159;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 160;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 161;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 162;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 163;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 164;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 165;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 166;  // tag 235, name YieldType, type STRING
  double yield = 167;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 168;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 169;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 170;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 171;  // tag 698, name YieldRedemptionPriceType, type INT
  string text = 172;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 173;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 174;  // tag 355, name EncodedText, type DATA

  // GROUPS
  repeated NoQuoteQualifiers no_quote_qualifiers = 175;
  repeated NoPartyIds no_party_ids = 176;
  repeated NoSecurityAltId no_security_alt_id = 177;
  repeated NoEvents no_events = 178;
  repeated NoInstrumentParties no_instrument_parties = 179;
  repeated NoComplexEvents no_complex_events = 180;
  repeated NoUnderlyings no_underlyings = 181;
  repeated NoRateSources no_rate_sources = 182;
  repeated NoStipulations no_stipulations = 183;
  repeated NoLegs no_legs = 184;
}

