syntax = "proto3";

//
// THIS FILE WAS AUTOMATICALLY GENERATED -- DO NOT EDIT!!!
//
// 2023-05-31 - 00:26:00.042089800
//

package fix44.proto;
option java_multiple_files = false;
option java_package = "garden_leave.fix44.proto";
option java_outer_classname = "FIX44Protos";
option optimize_for = LITE_RUNTIME;

import "google/protobuf/timestamp.proto";

message Header {
  message NoHops {
    message FieldPresence {
      bool hop_comp_id = 1;
      bool hop_sending_time = 2;
      bool hop_ref_id = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string hop_comp_id = 2;  // tag 628, name HopCompID, type STRING
    uint64 hop_sending_time = 3;  // tag 629, name HopSendingTime, type UTCTIMESTAMP
    int32 hop_ref_id = 4;  // tag 630, name HopRefID, type SEQNUM
  }

  message FieldPresence {
    bool begin_string = 1;
    bool body_length = 2;
    bool msg_type = 3;
    bool sender_comp_id = 4;
    bool target_comp_id = 5;
    bool on_behalf_of_comp_id = 6;
    bool deliver_to_comp_id = 7;
    bool secure_data_len = 8;
    bool secure_data = 9;
    bool msg_seq_num = 10;
    bool sender_sub_id = 11;
    bool sender_location_id = 12;
    bool target_sub_id = 13;
    bool target_location_id = 14;
    bool on_behalf_of_sub_id = 15;
    bool on_behalf_of_location_id = 16;
    bool deliver_to_sub_id = 17;
    bool deliver_to_location_id = 18;
    bool poss_dup_flag = 19;
    bool poss_resend = 20;
    bool sending_time = 21;
    bool orig_sending_time = 22;
    bool xml_data_len = 23;
    bool xml_data = 24;
    bool message_encoding = 25;
    bool last_msg_seq_num_processed = 26;
  }

  // FIELDS
  FieldPresence field_presence = 1;
  string begin_string = 2;  // tag 8, name BeginString, type STRING
  int32 body_length = 3;  // tag 9, name BodyLength, type LENGTH
  string msg_type = 4;  // tag 35, name MsgType, type STRING
  string sender_comp_id = 5;  // tag 49, name SenderCompID, type STRING
  string target_comp_id = 6;  // tag 56, name TargetCompID, type STRING
  string on_behalf_of_comp_id = 7;  // tag 115, name OnBehalfOfCompID, type STRING
  string deliver_to_comp_id = 8;  // tag 128, name DeliverToCompID, type STRING
  int32 secure_data_len = 9;  // tag 90, name SecureDataLen, type LENGTH
  string secure_data = 10;  // tag 91, name SecureData, type DATA
  int32 msg_seq_num = 11;  // tag 34, name MsgSeqNum, type SEQNUM
  string sender_sub_id = 12;  // tag 50, name SenderSubID, type STRING
  string sender_location_id = 13;  // tag 142, name SenderLocationID, type STRING
  string target_sub_id = 14;  // tag 57, name TargetSubID, type STRING
  string target_location_id = 15;  // tag 143, name TargetLocationID, type STRING
  string on_behalf_of_sub_id = 16;  // tag 116, name OnBehalfOfSubID, type STRING
  string on_behalf_of_location_id = 17;  // tag 144, name OnBehalfOfLocationID, type STRING
  string deliver_to_sub_id = 18;  // tag 129, name DeliverToSubID, type STRING
  string deliver_to_location_id = 19;  // tag 145, name DeliverToLocationID, type STRING
  bool poss_dup_flag = 20;  // tag 43, name PossDupFlag, type BOOLEAN
  bool poss_resend = 21;  // tag 97, name PossResend, type BOOLEAN
  uint64 sending_time = 22;  // tag 52, name SendingTime, type UTCTIMESTAMP
  uint64 orig_sending_time = 23;  // tag 122, name OrigSendingTime, type UTCTIMESTAMP
  int32 xml_data_len = 24;  // tag 212, name XmlDataLen, type LENGTH
  string xml_data = 25;  // tag 213, name XmlData, type DATA
  string message_encoding = 26;  // tag 347, name MessageEncoding, type STRING
  int32 last_msg_seq_num_processed = 27;  // tag 369, name LastMsgSeqNumProcessed, type SEQNUM

  // GROUPS
  repeated NoHops no_hops = 28;
}

// MESSAGES
//
message SequenceReset {
  message FieldPresence {
    bool gap_fill_flag = 1;
    bool new_seq_no = 2;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  bool gap_fill_flag = 5;  // tag 123, name GapFillFlag, type BOOLEAN
  int32 new_seq_no = 6;  // tag 36, name NewSeqNo, type SEQNUM
}

message Reject {
  message FieldPresence {
    bool ref_seq_num = 1;
    bool ref_tag_id = 2;
    bool ref_msg_type = 3;
    bool session_reject_reason = 4;
    bool text = 5;
    bool encoded_text_len = 6;
    bool encoded_text = 7;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  int32 ref_seq_num = 5;  // tag 45, name RefSeqNum, type SEQNUM
  int32 ref_tag_id = 6;  // tag 371, name RefTagID, type INT
  string ref_msg_type = 7;  // tag 372, name RefMsgType, type STRING
  int32 session_reject_reason = 8;  // tag 373, name SessionRejectReason, type INT
  string text = 9;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 10;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 11;  // tag 355, name EncodedText, type DATA
}

message QuoteResponse {
  message NoQuoteQualifiers {
    message FieldPresence {
      bool quote_qualifier = 1;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 quote_qualifier = 2;  // tag 695, name QuoteQualifier, type CHAR
  }

  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_px = 3;
      bool event_text = 4;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    double event_px = 4;  // tag 867, name EventPx, type PRICE
    string event_text = 5;  // tag 868, name EventText, type STRING
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_put_or_call = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_issue_date = 13;
      bool underlying_repo_collateral_security_type = 14;
      bool underlying_repurchase_term = 15;
      bool underlying_repurchase_rate = 16;
      bool underlying_factor = 17;
      bool underlying_credit_rating = 18;
      bool underlying_instr_registry = 19;
      bool underlying_country_of_issue = 20;
      bool underlying_state_or_province_of_issue = 21;
      bool underlying_locale_of_issue = 22;
      bool underlying_redemption_date = 23;
      bool underlying_strike_price = 24;
      bool underlying_strike_currency = 25;
      bool underlying_opt_attribute = 26;
      bool underlying_contract_multiplier = 27;
      bool underlying_coupon_rate = 28;
      bool underlying_security_exchange = 29;
      bool underlying_issuer = 30;
      bool encoded_underlying_issuer_len = 31;
      bool encoded_underlying_issuer = 32;
      bool underlying_security_desc = 33;
      bool encoded_underlying_security_desc_len = 34;
      bool encoded_underlying_security_desc = 35;
      bool underlying_cp_program = 36;
      bool underlying_cp_reg_type = 37;
      bool underlying_currency = 38;
      bool underlying_qty = 39;
      bool underlying_px = 40;
      bool underlying_dirty_price = 41;
      bool underlying_end_price = 42;
      bool underlying_start_value = 43;
      bool underlying_current_value = 44;
      bool underlying_end_value = 45;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
    string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
    double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
    repeated NoUnderlyingStips no_underlying_stips = 48;
  }

  message NoStipulations {
    message FieldPresence {
      bool stipulation_type = 1;
      bool stipulation_value = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
    string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
  }

  message NoLegs {
    message NoLegSecurityAltId {
      message FieldPresence {
        bool leg_security_alt_id = 1;
        bool leg_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
      string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
    }

    message NoLegStipulations {
      message FieldPresence {
        bool leg_stipulation_type = 1;
        bool leg_stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
      string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
    }

    message NoNestedPartyIds {
      message NoNestedPartySubIds {
        message FieldPresence {
          bool nested_party_sub_id = 1;
          bool nested_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
        int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
      }

      message FieldPresence {
        bool nested_party_id = 1;
        bool nested_party_id_source = 2;
        bool nested_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
      int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
      int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
    
  // GROUPS
      repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
    }

    message FieldPresence {
      bool leg_symbol = 1;
      bool leg_symbol_sfx = 2;
      bool leg_security_id = 3;
      bool leg_security_id_source = 4;
      bool leg_product = 5;
      bool leg_cfi_code = 6;
      bool leg_security_type = 7;
      bool leg_security_sub_type = 8;
      bool leg_maturity_month_year = 9;
      bool leg_maturity_date = 10;
      bool leg_coupon_payment_date = 11;
      bool leg_issue_date = 12;
      bool leg_repo_collateral_security_type = 13;
      bool leg_repurchase_term = 14;
      bool leg_repurchase_rate = 15;
      bool leg_factor = 16;
      bool leg_credit_rating = 17;
      bool leg_instr_registry = 18;
      bool leg_country_of_issue = 19;
      bool leg_state_or_province_of_issue = 20;
      bool leg_locale_of_issue = 21;
      bool leg_redemption_date = 22;
      bool leg_strike_price = 23;
      bool leg_strike_currency = 24;
      bool leg_opt_attribute = 25;
      bool leg_contract_multiplier = 26;
      bool leg_coupon_rate = 27;
      bool leg_security_exchange = 28;
      bool leg_issuer = 29;
      bool encoded_leg_issuer_len = 30;
      bool encoded_leg_issuer = 31;
      bool leg_security_desc = 32;
      bool encoded_leg_security_desc_len = 33;
      bool encoded_leg_security_desc = 34;
      bool leg_ratio_qty = 35;
      bool leg_side = 36;
      bool leg_currency = 37;
      bool leg_pool = 38;
      bool leg_dated_date = 39;
      bool leg_contract_settl_month = 40;
      bool leg_interest_accrual_date = 41;
      bool leg_qty = 42;
      bool leg_swap_type = 43;
      bool leg_settl_type = 44;
      bool leg_settl_date = 45;
      bool leg_price_type = 46;
      bool leg_bid_px = 47;
      bool leg_offer_px = 48;
      bool leg_benchmark_curve_currency = 49;
      bool leg_benchmark_curve_name = 50;
      bool leg_benchmark_curve_point = 51;
      bool leg_benchmark_price = 52;
      bool leg_benchmark_price_type = 53;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
    string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
    string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
    string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
    int32 leg_product = 6;  // tag 607, name LegProduct, type INT
    string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
    string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
    string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
    string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
    string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
    string leg_coupon_payment_date = 12;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
    string leg_issue_date = 13;  // tag 249, name LegIssueDate, type LOCALMKTDATE
    string leg_repo_collateral_security_type = 14;  // tag 250, name LegRepoCollateralSecurityType, type STRING
    int32 leg_repurchase_term = 15;  // tag 251, name LegRepurchaseTerm, type INT
    double leg_repurchase_rate = 16;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
    double leg_factor = 17;  // tag 253, name LegFactor, type FLOAT
    string leg_credit_rating = 18;  // tag 257, name LegCreditRating, type STRING
    string leg_instr_registry = 19;  // tag 599, name LegInstrRegistry, type STRING
    string leg_country_of_issue = 20;  // tag 596, name LegCountryOfIssue, type COUNTRY
    string leg_state_or_province_of_issue = 21;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
    string leg_locale_of_issue = 22;  // tag 598, name LegLocaleOfIssue, type STRING
    string leg_redemption_date = 23;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
    double leg_strike_price = 24;  // tag 612, name LegStrikePrice, type PRICE
    string leg_strike_currency = 25;  // tag 942, name LegStrikeCurrency, type CURRENCY
    int32 leg_opt_attribute = 26;  // tag 613, name LegOptAttribute, type CHAR
    double leg_contract_multiplier = 27;  // tag 614, name LegContractMultiplier, type FLOAT
    double leg_coupon_rate = 28;  // tag 615, name LegCouponRate, type PERCENTAGE
    string leg_security_exchange = 29;  // tag 616, name LegSecurityExchange, type EXCHANGE
    string leg_issuer = 30;  // tag 617, name LegIssuer, type STRING
    int32 encoded_leg_issuer_len = 31;  // tag 618, name EncodedLegIssuerLen, type LENGTH
    string encoded_leg_issuer = 32;  // tag 619, name EncodedLegIssuer, type DATA
    string leg_security_desc = 33;  // tag 620, name LegSecurityDesc, type STRING
    int32 encoded_leg_security_desc_len = 34;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
    string encoded_leg_security_desc = 35;  // tag 622, name EncodedLegSecurityDesc, type DATA
    double leg_ratio_qty = 36;  // tag 623, name LegRatioQty, type FLOAT
    int32 leg_side = 37;  // tag 624, name LegSide, type CHAR
    string leg_currency = 38;  // tag 556, name LegCurrency, type CURRENCY
    string leg_pool = 39;  // tag 740, name LegPool, type STRING
    string leg_dated_date = 40;  // tag 739, name LegDatedDate, type LOCALMKTDATE
    string leg_contract_settl_month = 41;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
    string leg_interest_accrual_date = 42;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
    double leg_qty = 43;  // tag 687, name LegQty, type QTY
    int32 leg_swap_type = 44;  // tag 690, name LegSwapType, type INT
    int32 leg_settl_type = 45;  // tag 587, name LegSettlType, type CHAR
    string leg_settl_date = 46;  // tag 588, name LegSettlDate, type LOCALMKTDATE
    int32 leg_price_type = 47;  // tag 686, name LegPriceType, type INT
    double leg_bid_px = 48;  // tag 681, name LegBidPx, type PRICE
    double leg_offer_px = 49;  // tag 684, name LegOfferPx, type PRICE
    string leg_benchmark_curve_currency = 50;  // tag 676, name LegBenchmarkCurveCurrency, type CURRENCY
    string leg_benchmark_curve_name = 51;  // tag 677, name LegBenchmarkCurveName, type STRING
    string leg_benchmark_curve_point = 52;  // tag 678, name LegBenchmarkCurvePoint, type STRING
    double leg_benchmark_price = 53;  // tag 679, name LegBenchmarkPrice, type PRICE
    int32 leg_benchmark_price_type = 54;  // tag 680, name LegBenchmarkPriceType, type INT
  
  // GROUPS
    repeated NoLegSecurityAltId no_leg_security_alt_id = 55;
    repeated NoLegStipulations no_leg_stipulations = 56;
    repeated NoNestedPartyIds no_nested_party_ids = 57;
  }

  message FieldPresence {
    bool quote_resp_id = 1;
    bool quote_id = 2;
    bool quote_resp_type = 3;
    bool cl_ord_id = 4;
    bool order_capacity = 5;
    bool ioi_id = 6;
    bool quote_type = 7;
    bool trading_session_id = 8;
    bool trading_session_sub_id = 9;
    bool symbol = 10;
    bool symbol_sfx = 11;
    bool security_id = 12;
    bool security_id_source = 13;
    bool product = 14;
    bool cfi_code = 15;
    bool security_type = 16;
    bool security_sub_type = 17;
    bool maturity_month_year = 18;
    bool maturity_date = 19;
    bool put_or_call = 20;
    bool coupon_payment_date = 21;
    bool issue_date = 22;
    bool repo_collateral_security_type = 23;
    bool repurchase_term = 24;
    bool repurchase_rate = 25;
    bool factor = 26;
    bool credit_rating = 27;
    bool instr_registry = 28;
    bool country_of_issue = 29;
    bool state_or_province_of_issue = 30;
    bool locale_of_issue = 31;
    bool redemption_date = 32;
    bool strike_price = 33;
    bool strike_currency = 34;
    bool opt_attribute = 35;
    bool contract_multiplier = 36;
    bool coupon_rate = 37;
    bool security_exchange = 38;
    bool issuer = 39;
    bool encoded_issuer_len = 40;
    bool encoded_issuer = 41;
    bool security_desc = 42;
    bool encoded_security_desc_len = 43;
    bool encoded_security_desc = 44;
    bool pool = 45;
    bool contract_settl_month = 46;
    bool cp_program = 47;
    bool cp_reg_type = 48;
    bool dated_date = 49;
    bool interest_accrual_date = 50;
    bool agreement_desc = 51;
    bool agreement_id = 52;
    bool agreement_date = 53;
    bool agreement_currency = 54;
    bool termination_type = 55;
    bool start_date = 56;
    bool end_date = 57;
    bool delivery_type = 58;
    bool margin_ratio = 59;
    bool side = 60;
    bool order_qty = 61;
    bool cash_order_qty = 62;
    bool order_percent = 63;
    bool rounding_direction = 64;
    bool rounding_modulus = 65;
    bool settl_type = 66;
    bool settl_date = 67;
    bool settl_date2 = 68;
    bool order_qty2 = 69;
    bool currency = 70;
    bool account = 71;
    bool acct_id_source = 72;
    bool account_type = 73;
    bool bid_px = 74;
    bool offer_px = 75;
    bool mkt_bid_px = 76;
    bool mkt_offer_px = 77;
    bool min_bid_size = 78;
    bool bid_size = 79;
    bool min_offer_size = 80;
    bool offer_size = 81;
    bool valid_until_time = 82;
    bool bid_spot_rate = 83;
    bool offer_spot_rate = 84;
    bool bid_forward_points = 85;
    bool offer_forward_points = 86;
    bool mid_px = 87;
    bool bid_yield = 88;
    bool mid_yield = 89;
    bool offer_yield = 90;
    bool transact_time = 91;
    bool ord_type = 92;
    bool bid_forward_points2 = 93;
    bool offer_forward_points2 = 94;
    bool settl_curr_bid_fx_rate = 95;
    bool settl_curr_offer_fx_rate = 96;
    bool settl_curr_fx_rate_calc = 97;
    bool commission = 98;
    bool comm_type = 99;
    bool cust_order_capacity = 100;
    bool ex_destination = 101;
    bool text = 102;
    bool encoded_text_len = 103;
    bool encoded_text = 104;
    bool price = 105;
    bool price_type = 106;
    bool spread = 107;
    bool benchmark_curve_currency = 108;
    bool benchmark_curve_name = 109;
    bool benchmark_curve_point = 110;
    bool benchmark_price = 111;
    bool benchmark_price_type = 112;
    bool benchmark_security_id = 113;
    bool benchmark_security_id_source = 114;
    bool yield_type = 115;
    bool yield = 116;
    bool yield_calc_date = 117;
    bool yield_redemption_date = 118;
    bool yield_redemption_price = 119;
    bool yield_redemption_price_type = 120;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string quote_resp_id = 5;  // tag 693, name QuoteRespID, type STRING
  string quote_id = 6;  // tag 117, name QuoteID, type STRING
  int32 quote_resp_type = 7;  // tag 694, name QuoteRespType, type INT
  string cl_ord_id = 8;  // tag 11, name ClOrdID, type STRING
  int32 order_capacity = 9;  // tag 528, name OrderCapacity, type CHAR
  string ioi_id = 10;  // tag 23, name IOIID, type STRING
  int32 quote_type = 11;  // tag 537, name QuoteType, type INT
  string trading_session_id = 12;  // tag 336, name TradingSessionID, type STRING
  string trading_session_sub_id = 13;  // tag 625, name TradingSessionSubID, type STRING
  string symbol = 14;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 15;  // tag 65, name SymbolSfx, type STRING
  string security_id = 16;  // tag 48, name SecurityID, type STRING
  string security_id_source = 17;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 18;  // tag 460, name Product, type INT
  string cfi_code = 19;  // tag 461, name CFICode, type STRING
  string security_type = 20;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 21;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 22;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 23;  // tag 541, name MaturityDate, type LOCALMKTDATE
  int32 put_or_call = 24;  // tag 201, name PutOrCall, type INT
  string coupon_payment_date = 25;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string issue_date = 26;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 27;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 28;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 29;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 30;  // tag 228, name Factor, type FLOAT
  string credit_rating = 31;  // tag 255, name CreditRating, type STRING
  string instr_registry = 32;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 33;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 34;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 35;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 36;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 37;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 38;  // tag 947, name StrikeCurrency, type CURRENCY
  int32 opt_attribute = 39;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 40;  // tag 231, name ContractMultiplier, type FLOAT
  double coupon_rate = 41;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 42;  // tag 207, name SecurityExchange, type EXCHANGE
  string issuer = 43;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 44;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 45;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 46;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 47;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 48;  // tag 351, name EncodedSecurityDesc, type DATA
  string pool = 49;  // tag 691, name Pool, type STRING
  string contract_settl_month = 50;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 51;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 52;  // tag 876, name CPRegType, type STRING
  string dated_date = 53;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 54;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 55;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 56;  // tag 914, name AgreementID, type STRING
  string agreement_date = 57;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 58;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 59;  // tag 788, name TerminationType, type INT
  string start_date = 60;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 61;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 62;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 63;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 64;  // tag 54, name Side, type CHAR
  double order_qty = 65;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 66;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 67;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 68;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 69;  // tag 469, name RoundingModulus, type FLOAT
  int32 settl_type = 70;  // tag 63, name SettlType, type CHAR
  string settl_date = 71;  // tag 64, name SettlDate, type LOCALMKTDATE
  string settl_date2 = 72;  // tag 193, name SettlDate2, type LOCALMKTDATE
  double order_qty2 = 73;  // tag 192, name OrderQty2, type QTY
  string currency = 74;  // tag 15, name Currency, type CURRENCY
  string account = 75;  // tag 1, name Account, type STRING
  int32 acct_id_source = 76;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 77;  // tag 581, name AccountType, type INT
  double bid_px = 78;  // tag 132, name BidPx, type PRICE
  double offer_px = 79;  // tag 133, name OfferPx, type PRICE
  double mkt_bid_px = 80;  // tag 645, name MktBidPx, type PRICE
  double mkt_offer_px = 81;  // tag 646, name MktOfferPx, type PRICE
  double min_bid_size = 82;  // tag 647, name MinBidSize, type QTY
  double bid_size = 83;  // tag 134, name BidSize, type QTY
  double min_offer_size = 84;  // tag 648, name MinOfferSize, type QTY
  double offer_size = 85;  // tag 135, name OfferSize, type QTY
  uint64 valid_until_time = 86;  // tag 62, name ValidUntilTime, type UTCTIMESTAMP
  double bid_spot_rate = 87;  // tag 188, name BidSpotRate, type PRICE
  double offer_spot_rate = 88;  // tag 190, name OfferSpotRate, type PRICE
  double bid_forward_points = 89;  // tag 189, name BidForwardPoints, type PRICEOFFSET
  double offer_forward_points = 90;  // tag 191, name OfferForwardPoints, type PRICEOFFSET
  double mid_px = 91;  // tag 631, name MidPx, type PRICE
  double bid_yield = 92;  // tag 632, name BidYield, type PERCENTAGE
  double mid_yield = 93;  // tag 633, name MidYield, type PERCENTAGE
  double offer_yield = 94;  // tag 634, name OfferYield, type PERCENTAGE
  uint64 transact_time = 95;  // tag 60, name TransactTime, type UTCTIMESTAMP
  int32 ord_type = 96;  // tag 40, name OrdType, type CHAR
  double bid_forward_points2 = 97;  // tag 642, name BidForwardPoints2, type PRICEOFFSET
  double offer_forward_points2 = 98;  // tag 643, name OfferForwardPoints2, type PRICEOFFSET
  double settl_curr_bid_fx_rate = 99;  // tag 656, name SettlCurrBidFxRate, type FLOAT
  double settl_curr_offer_fx_rate = 100;  // tag 657, name SettlCurrOfferFxRate, type FLOAT
  int32 settl_curr_fx_rate_calc = 101;  // tag 156, name SettlCurrFxRateCalc, type CHAR
  double commission = 102;  // tag 12, name Commission, type AMT
  int32 comm_type = 103;  // tag 13, name CommType, type CHAR
  int32 cust_order_capacity = 104;  // tag 582, name CustOrderCapacity, type INT
  string ex_destination = 105;  // tag 100, name ExDestination, type EXCHANGE
  string text = 106;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 107;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 108;  // tag 355, name EncodedText, type DATA
  double price = 109;  // tag 44, name Price, type PRICE
  int32 price_type = 110;  // tag 423, name PriceType, type INT
  double spread = 111;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 112;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 113;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 114;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 115;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 116;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 117;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 118;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 119;  // tag 235, name YieldType, type STRING
  double yield = 120;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 121;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 122;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 123;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 124;  // tag 698, name YieldRedemptionPriceType, type INT

  // GROUPS
  repeated NoQuoteQualifiers no_quote_qualifiers = 125;
  repeated NoPartyIds no_party_ids = 126;
  repeated NoSecurityAltId no_security_alt_id = 127;
  repeated NoEvents no_events = 128;
  repeated NoUnderlyings no_underlyings = 129;
  repeated NoStipulations no_stipulations = 130;
  repeated NoLegs no_legs = 131;
}

message MarketDataIncrementalRefresh {
  message NoMdEntries {
    message NoSecurityAltId {
      message FieldPresence {
        bool security_alt_id = 1;
        bool security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
      string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
    }

    message NoEvents {
      message FieldPresence {
        bool event_type = 1;
        bool event_date = 2;
        bool event_px = 3;
        bool event_text = 4;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 event_type = 2;  // tag 865, name EventType, type INT
      string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
      double event_px = 4;  // tag 867, name EventPx, type PRICE
      string event_text = 5;  // tag 868, name EventText, type STRING
    }

    message NoUnderlyings {
      message NoUnderlyingSecurityAltId {
        message FieldPresence {
          bool underlying_security_alt_id = 1;
          bool underlying_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
        string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
      }

      message NoUnderlyingStips {
        message FieldPresence {
          bool underlying_stip_type = 1;
          bool underlying_stip_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
        string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
      }

      message FieldPresence {
        bool underlying_symbol = 1;
        bool underlying_symbol_sfx = 2;
        bool underlying_security_id = 3;
        bool underlying_security_id_source = 4;
        bool underlying_product = 5;
        bool underlying_cfi_code = 6;
        bool underlying_security_type = 7;
        bool underlying_security_sub_type = 8;
        bool underlying_maturity_month_year = 9;
        bool underlying_maturity_date = 10;
        bool underlying_put_or_call = 11;
        bool underlying_coupon_payment_date = 12;
        bool underlying_issue_date = 13;
        bool underlying_repo_collateral_security_type = 14;
        bool underlying_repurchase_term = 15;
        bool underlying_repurchase_rate = 16;
        bool underlying_factor = 17;
        bool underlying_credit_rating = 18;
        bool underlying_instr_registry = 19;
        bool underlying_country_of_issue = 20;
        bool underlying_state_or_province_of_issue = 21;
        bool underlying_locale_of_issue = 22;
        bool underlying_redemption_date = 23;
        bool underlying_strike_price = 24;
        bool underlying_strike_currency = 25;
        bool underlying_opt_attribute = 26;
        bool underlying_contract_multiplier = 27;
        bool underlying_coupon_rate = 28;
        bool underlying_security_exchange = 29;
        bool underlying_issuer = 30;
        bool encoded_underlying_issuer_len = 31;
        bool encoded_underlying_issuer = 32;
        bool underlying_security_desc = 33;
        bool encoded_underlying_security_desc_len = 34;
        bool encoded_underlying_security_desc = 35;
        bool underlying_cp_program = 36;
        bool underlying_cp_reg_type = 37;
        bool underlying_currency = 38;
        bool underlying_qty = 39;
        bool underlying_px = 40;
        bool underlying_dirty_price = 41;
        bool underlying_end_price = 42;
        bool underlying_start_value = 43;
        bool underlying_current_value = 44;
        bool underlying_end_value = 45;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
      string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
      string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
      string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
      int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
      string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
      string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
      string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
      string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
      string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
      int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
      string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
      string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
      string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
      int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
      double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
      double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
      string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
      string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
      string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
      string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
      string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
      string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
      double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
      string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
      int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
      double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
      double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
      string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
      string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
      int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
      string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
      string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
      int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
      string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
      string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
      string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
      string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
      double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
      double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
      double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
      double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
      double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
      double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
      double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
    
  // GROUPS
      repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
      repeated NoUnderlyingStips no_underlying_stips = 48;
    }

    message NoLegs {
      message NoLegSecurityAltId {
        message FieldPresence {
          bool leg_security_alt_id = 1;
          bool leg_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
        string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
      }

      message FieldPresence {
        bool leg_symbol = 1;
        bool leg_symbol_sfx = 2;
        bool leg_security_id = 3;
        bool leg_security_id_source = 4;
        bool leg_product = 5;
        bool leg_cfi_code = 6;
        bool leg_security_type = 7;
        bool leg_security_sub_type = 8;
        bool leg_maturity_month_year = 9;
        bool leg_maturity_date = 10;
        bool leg_coupon_payment_date = 11;
        bool leg_issue_date = 12;
        bool leg_repo_collateral_security_type = 13;
        bool leg_repurchase_term = 14;
        bool leg_repurchase_rate = 15;
        bool leg_factor = 16;
        bool leg_credit_rating = 17;
        bool leg_instr_registry = 18;
        bool leg_country_of_issue = 19;
        bool leg_state_or_province_of_issue = 20;
        bool leg_locale_of_issue = 21;
        bool leg_redemption_date = 22;
        bool leg_strike_price = 23;
        bool leg_strike_currency = 24;
        bool leg_opt_attribute = 25;
        bool leg_contract_multiplier = 26;
        bool leg_coupon_rate = 27;
        bool leg_security_exchange = 28;
        bool leg_issuer = 29;
        bool encoded_leg_issuer_len = 30;
        bool encoded_leg_issuer = 31;
        bool leg_security_desc = 32;
        bool encoded_leg_security_desc_len = 33;
        bool encoded_leg_security_desc = 34;
        bool leg_ratio_qty = 35;
        bool leg_side = 36;
        bool leg_currency = 37;
        bool leg_pool = 38;
        bool leg_dated_date = 39;
        bool leg_contract_settl_month = 40;
        bool leg_interest_accrual_date = 41;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
      string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
      string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
      string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
      int32 leg_product = 6;  // tag 607, name LegProduct, type INT
      string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
      string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
      string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
      string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
      string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
      string leg_coupon_payment_date = 12;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
      string leg_issue_date = 13;  // tag 249, name LegIssueDate, type LOCALMKTDATE
      string leg_repo_collateral_security_type = 14;  // tag 250, name LegRepoCollateralSecurityType, type STRING
      int32 leg_repurchase_term = 15;  // tag 251, name LegRepurchaseTerm, type INT
      double leg_repurchase_rate = 16;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
      double leg_factor = 17;  // tag 253, name LegFactor, type FLOAT
      string leg_credit_rating = 18;  // tag 257, name LegCreditRating, type STRING
      string leg_instr_registry = 19;  // tag 599, name LegInstrRegistry, type STRING
      string leg_country_of_issue = 20;  // tag 596, name LegCountryOfIssue, type COUNTRY
      string leg_state_or_province_of_issue = 21;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
      string leg_locale_of_issue = 22;  // tag 598, name LegLocaleOfIssue, type STRING
      string leg_redemption_date = 23;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
      double leg_strike_price = 24;  // tag 612, name LegStrikePrice, type PRICE
      string leg_strike_currency = 25;  // tag 942, name LegStrikeCurrency, type CURRENCY
      int32 leg_opt_attribute = 26;  // tag 613, name LegOptAttribute, type CHAR
      double leg_contract_multiplier = 27;  // tag 614, name LegContractMultiplier, type FLOAT
      double leg_coupon_rate = 28;  // tag 615, name LegCouponRate, type PERCENTAGE
      string leg_security_exchange = 29;  // tag 616, name LegSecurityExchange, type EXCHANGE
      string leg_issuer = 30;  // tag 617, name LegIssuer, type STRING
      int32 encoded_leg_issuer_len = 31;  // tag 618, name EncodedLegIssuerLen, type LENGTH
      string encoded_leg_issuer = 32;  // tag 619, name EncodedLegIssuer, type DATA
      string leg_security_desc = 33;  // tag 620, name LegSecurityDesc, type STRING
      int32 encoded_leg_security_desc_len = 34;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
      string encoded_leg_security_desc = 35;  // tag 622, name EncodedLegSecurityDesc, type DATA
      double leg_ratio_qty = 36;  // tag 623, name LegRatioQty, type FLOAT
      int32 leg_side = 37;  // tag 624, name LegSide, type CHAR
      string leg_currency = 38;  // tag 556, name LegCurrency, type CURRENCY
      string leg_pool = 39;  // tag 740, name LegPool, type STRING
      string leg_dated_date = 40;  // tag 739, name LegDatedDate, type LOCALMKTDATE
      string leg_contract_settl_month = 41;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
      string leg_interest_accrual_date = 42;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
    
  // GROUPS
      repeated NoLegSecurityAltId no_leg_security_alt_id = 43;
    }

    message FieldPresence {
      bool md_update_action = 1;
      bool delete_reason = 2;
      bool md_entry_type = 3;
      bool md_entry_id = 4;
      bool md_entry_ref_id = 5;
      bool symbol = 6;
      bool symbol_sfx = 7;
      bool security_id = 8;
      bool security_id_source = 9;
      bool product = 10;
      bool cfi_code = 11;
      bool security_type = 12;
      bool security_sub_type = 13;
      bool maturity_month_year = 14;
      bool maturity_date = 15;
      bool put_or_call = 16;
      bool coupon_payment_date = 17;
      bool issue_date = 18;
      bool repo_collateral_security_type = 19;
      bool repurchase_term = 20;
      bool repurchase_rate = 21;
      bool factor = 22;
      bool credit_rating = 23;
      bool instr_registry = 24;
      bool country_of_issue = 25;
      bool state_or_province_of_issue = 26;
      bool locale_of_issue = 27;
      bool redemption_date = 28;
      bool strike_price = 29;
      bool strike_currency = 30;
      bool opt_attribute = 31;
      bool contract_multiplier = 32;
      bool coupon_rate = 33;
      bool security_exchange = 34;
      bool issuer = 35;
      bool encoded_issuer_len = 36;
      bool encoded_issuer = 37;
      bool security_desc = 38;
      bool encoded_security_desc_len = 39;
      bool encoded_security_desc = 40;
      bool pool = 41;
      bool contract_settl_month = 42;
      bool cp_program = 43;
      bool cp_reg_type = 44;
      bool dated_date = 45;
      bool interest_accrual_date = 46;
      bool financial_status = 47;
      bool corporate_action = 48;
      bool md_entry_px = 49;
      bool currency = 50;
      bool md_entry_size = 51;
      bool md_entry_date = 52;
      bool md_entry_time = 53;
      bool tick_direction = 54;
      bool md_mkt = 55;
      bool trading_session_id = 56;
      bool trading_session_sub_id = 57;
      bool quote_condition = 58;
      bool trade_condition = 59;
      bool md_entry_originator = 60;
      bool location_id = 61;
      bool desk_id = 62;
      bool open_close_settl_flag = 63;
      bool time_in_force = 64;
      bool expire_date = 65;
      bool expire_time = 66;
      bool min_qty = 67;
      bool exec_inst = 68;
      bool seller_days = 69;
      bool order_id = 70;
      bool quote_entry_id = 71;
      bool md_entry_buyer = 72;
      bool md_entry_seller = 73;
      bool number_of_orders = 74;
      bool md_entry_position_no = 75;
      bool scope = 76;
      bool price_delta = 77;
      bool net_chg_prev_day = 78;
      bool text = 79;
      bool encoded_text_len = 80;
      bool encoded_text = 81;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 md_update_action = 2;  // tag 279, name MDUpdateAction, type CHAR
    int32 delete_reason = 3;  // tag 285, name DeleteReason, type CHAR
    int32 md_entry_type = 4;  // tag 269, name MDEntryType, type CHAR
    string md_entry_id = 5;  // tag 278, name MDEntryID, type STRING
    string md_entry_ref_id = 6;  // tag 280, name MDEntryRefID, type STRING
    string symbol = 7;  // tag 55, name Symbol, type STRING
    string symbol_sfx = 8;  // tag 65, name SymbolSfx, type STRING
    string security_id = 9;  // tag 48, name SecurityID, type STRING
    string security_id_source = 10;  // tag 22, name SecurityIDSource, type STRING
    int32 product = 11;  // tag 460, name Product, type INT
    string cfi_code = 12;  // tag 461, name CFICode, type STRING
    string security_type = 13;  // tag 167, name SecurityType, type STRING
    string security_sub_type = 14;  // tag 762, name SecuritySubType, type STRING
    string maturity_month_year = 15;  // tag 200, name MaturityMonthYear, type MONTHYEAR
    string maturity_date = 16;  // tag 541, name MaturityDate, type LOCALMKTDATE
    int32 put_or_call = 17;  // tag 201, name PutOrCall, type INT
    string coupon_payment_date = 18;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
    string issue_date = 19;  // tag 225, name IssueDate, type LOCALMKTDATE
    string repo_collateral_security_type = 20;  // tag 239, name RepoCollateralSecurityType, type STRING
    int32 repurchase_term = 21;  // tag 226, name RepurchaseTerm, type INT
    double repurchase_rate = 22;  // tag 227, name RepurchaseRate, type PERCENTAGE
    double factor = 23;  // tag 228, name Factor, type FLOAT
    string credit_rating = 24;  // tag 255, name CreditRating, type STRING
    string instr_registry = 25;  // tag 543, name InstrRegistry, type STRING
    string country_of_issue = 26;  // tag 470, name CountryOfIssue, type COUNTRY
    string state_or_province_of_issue = 27;  // tag 471, name StateOrProvinceOfIssue, type STRING
    string locale_of_issue = 28;  // tag 472, name LocaleOfIssue, type STRING
    string redemption_date = 29;  // tag 240, name RedemptionDate, type LOCALMKTDATE
    double strike_price = 30;  // tag 202, name StrikePrice, type PRICE
    string strike_currency = 31;  // tag 947, name StrikeCurrency, type CURRENCY
    int32 opt_attribute = 32;  // tag 206, name OptAttribute, type CHAR
    double contract_multiplier = 33;  // tag 231, name ContractMultiplier, type FLOAT
    double coupon_rate = 34;  // tag 223, name CouponRate, type PERCENTAGE
    string security_exchange = 35;  // tag 207, name SecurityExchange, type EXCHANGE
    string issuer = 36;  // tag 106, name Issuer, type STRING
    int32 encoded_issuer_len = 37;  // tag 348, name EncodedIssuerLen, type LENGTH
    string encoded_issuer = 38;  // tag 349, name EncodedIssuer, type DATA
    string security_desc = 39;  // tag 107, name SecurityDesc, type STRING
    int32 encoded_security_desc_len = 40;  // tag 350, name EncodedSecurityDescLen, type LENGTH
    string encoded_security_desc = 41;  // tag 351, name EncodedSecurityDesc, type DATA
    string pool = 42;  // tag 691, name Pool, type STRING
    string contract_settl_month = 43;  // tag 667, name ContractSettlMonth, type MONTHYEAR
    int32 cp_program = 44;  // tag 875, name CPProgram, type INT
    string cp_reg_type = 45;  // tag 876, name CPRegType, type STRING
    string dated_date = 46;  // tag 873, name DatedDate, type LOCALMKTDATE
    string interest_accrual_date = 47;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
    string financial_status = 48;  // tag 291, name FinancialStatus, type MULTIPLEVALUESTRING
    string corporate_action = 49;  // tag 292, name CorporateAction, type MULTIPLEVALUESTRING
    double md_entry_px = 50;  // tag 270, name MDEntryPx, type PRICE
    string currency = 51;  // tag 15, name Currency, type CURRENCY
    double md_entry_size = 52;  // tag 271, name MDEntrySize, type QTY
    uint64 md_entry_date = 53;  // tag 272, name MDEntryDate, type UTCDATEONLY
    uint64 md_entry_time = 54;  // tag 273, name MDEntryTime, type UTCTIMEONLY
    int32 tick_direction = 55;  // tag 274, name TickDirection, type CHAR
    string md_mkt = 56;  // tag 275, name MDMkt, type EXCHANGE
    string trading_session_id = 57;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 58;  // tag 625, name TradingSessionSubID, type STRING
    string quote_condition = 59;  // tag 276, name QuoteCondition, type MULTIPLEVALUESTRING
    string trade_condition = 60;  // tag 277, name TradeCondition, type MULTIPLEVALUESTRING
    string md_entry_originator = 61;  // tag 282, name MDEntryOriginator, type STRING
    string location_id = 62;  // tag 283, name LocationID, type STRING
    string desk_id = 63;  // tag 284, name DeskID, type STRING
    string open_close_settl_flag = 64;  // tag 286, name OpenCloseSettlFlag, type MULTIPLEVALUESTRING
    int32 time_in_force = 65;  // tag 59, name TimeInForce, type CHAR
    string expire_date = 66;  // tag 432, name ExpireDate, type LOCALMKTDATE
    uint64 expire_time = 67;  // tag 126, name ExpireTime, type UTCTIMESTAMP
    double min_qty = 68;  // tag 110, name MinQty, type QTY
    string exec_inst = 69;  // tag 18, name ExecInst, type MULTIPLEVALUESTRING
    int32 seller_days = 70;  // tag 287, name SellerDays, type INT
    string order_id = 71;  // tag 37, name OrderID, type STRING
    string quote_entry_id = 72;  // tag 299, name QuoteEntryID, type STRING
    string md_entry_buyer = 73;  // tag 288, name MDEntryBuyer, type STRING
    string md_entry_seller = 74;  // tag 289, name MDEntrySeller, type STRING
    int32 number_of_orders = 75;  // tag 346, name NumberOfOrders, type INT
    int32 md_entry_position_no = 76;  // tag 290, name MDEntryPositionNo, type INT
    string scope = 77;  // tag 546, name Scope, type MULTIPLEVALUESTRING
    double price_delta = 78;  // tag 811, name PriceDelta, type FLOAT
    double net_chg_prev_day = 79;  // tag 451, name NetChgPrevDay, type PRICEOFFSET
    string text = 80;  // tag 58, name Text, type STRING
    int32 encoded_text_len = 81;  // tag 354, name EncodedTextLen, type LENGTH
    string encoded_text = 82;  // tag 355, name EncodedText, type DATA
  
  // GROUPS
    repeated NoSecurityAltId no_security_alt_id = 83;
    repeated NoEvents no_events = 84;
    repeated NoUnderlyings no_underlyings = 85;
    repeated NoLegs no_legs = 86;
  }

  message FieldPresence {
    bool md_req_id = 1;
    bool appl_queue_depth = 2;
    bool appl_queue_resolution = 3;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string md_req_id = 5;  // tag 262, name MDReqID, type STRING
  int32 appl_queue_depth = 6;  // tag 813, name ApplQueueDepth, type INT
  int32 appl_queue_resolution = 7;  // tag 814, name ApplQueueResolution, type INT

  // GROUPS
  repeated NoMdEntries no_md_entries = 8;
}

message ResendRequest {
  message FieldPresence {
    bool begin_seq_no = 1;
    bool end_seq_no = 2;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  int32 begin_seq_no = 5;  // tag 7, name BeginSeqNo, type SEQNUM
  int32 end_seq_no = 6;  // tag 16, name EndSeqNo, type SEQNUM
}

message QuoteCancel {
  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoQuoteEntries {
    message NoSecurityAltId {
      message FieldPresence {
        bool security_alt_id = 1;
        bool security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
      string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
    }

    message NoEvents {
      message FieldPresence {
        bool event_type = 1;
        bool event_date = 2;
        bool event_px = 3;
        bool event_text = 4;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 event_type = 2;  // tag 865, name EventType, type INT
      string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
      double event_px = 4;  // tag 867, name EventPx, type PRICE
      string event_text = 5;  // tag 868, name EventText, type STRING
    }

    message NoUnderlyings {
      message NoUnderlyingSecurityAltId {
        message FieldPresence {
          bool underlying_security_alt_id = 1;
          bool underlying_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
        string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
      }

      message NoUnderlyingStips {
        message FieldPresence {
          bool underlying_stip_type = 1;
          bool underlying_stip_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
        string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
      }

      message FieldPresence {
        bool underlying_symbol = 1;
        bool underlying_symbol_sfx = 2;
        bool underlying_security_id = 3;
        bool underlying_security_id_source = 4;
        bool underlying_product = 5;
        bool underlying_cfi_code = 6;
        bool underlying_security_type = 7;
        bool underlying_security_sub_type = 8;
        bool underlying_maturity_month_year = 9;
        bool underlying_maturity_date = 10;
        bool underlying_put_or_call = 11;
        bool underlying_coupon_payment_date = 12;
        bool underlying_issue_date = 13;
        bool underlying_repo_collateral_security_type = 14;
        bool underlying_repurchase_term = 15;
        bool underlying_repurchase_rate = 16;
        bool underlying_factor = 17;
        bool underlying_credit_rating = 18;
        bool underlying_instr_registry = 19;
        bool underlying_country_of_issue = 20;
        bool underlying_state_or_province_of_issue = 21;
        bool underlying_locale_of_issue = 22;
        bool underlying_redemption_date = 23;
        bool underlying_strike_price = 24;
        bool underlying_strike_currency = 25;
        bool underlying_opt_attribute = 26;
        bool underlying_contract_multiplier = 27;
        bool underlying_coupon_rate = 28;
        bool underlying_security_exchange = 29;
        bool underlying_issuer = 30;
        bool encoded_underlying_issuer_len = 31;
        bool encoded_underlying_issuer = 32;
        bool underlying_security_desc = 33;
        bool encoded_underlying_security_desc_len = 34;
        bool encoded_underlying_security_desc = 35;
        bool underlying_cp_program = 36;
        bool underlying_cp_reg_type = 37;
        bool underlying_currency = 38;
        bool underlying_qty = 39;
        bool underlying_px = 40;
        bool underlying_dirty_price = 41;
        bool underlying_end_price = 42;
        bool underlying_start_value = 43;
        bool underlying_current_value = 44;
        bool underlying_end_value = 45;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
      string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
      string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
      string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
      int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
      string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
      string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
      string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
      string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
      string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
      int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
      string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
      string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
      string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
      int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
      double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
      double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
      string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
      string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
      string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
      string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
      string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
      string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
      double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
      string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
      int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
      double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
      double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
      string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
      string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
      int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
      string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
      string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
      int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
      string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
      string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
      string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
      string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
      double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
      double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
      double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
      double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
      double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
      double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
      double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
    
  // GROUPS
      repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
      repeated NoUnderlyingStips no_underlying_stips = 48;
    }

    message NoLegs {
      message NoLegSecurityAltId {
        message FieldPresence {
          bool leg_security_alt_id = 1;
          bool leg_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
        string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
      }

      message FieldPresence {
        bool leg_symbol = 1;
        bool leg_symbol_sfx = 2;
        bool leg_security_id = 3;
        bool leg_security_id_source = 4;
        bool leg_product = 5;
        bool leg_cfi_code = 6;
        bool leg_security_type = 7;
        bool leg_security_sub_type = 8;
        bool leg_maturity_month_year = 9;
        bool leg_maturity_date = 10;
        bool leg_coupon_payment_date = 11;
        bool leg_issue_date = 12;
        bool leg_repo_collateral_security_type = 13;
        bool leg_repurchase_term = 14;
        bool leg_repurchase_rate = 15;
        bool leg_factor = 16;
        bool leg_credit_rating = 17;
        bool leg_instr_registry = 18;
        bool leg_country_of_issue = 19;
        bool leg_state_or_province_of_issue = 20;
        bool leg_locale_of_issue = 21;
        bool leg_redemption_date = 22;
        bool leg_strike_price = 23;
        bool leg_strike_currency = 24;
        bool leg_opt_attribute = 25;
        bool leg_contract_multiplier = 26;
        bool leg_coupon_rate = 27;
        bool leg_security_exchange = 28;
        bool leg_issuer = 29;
        bool encoded_leg_issuer_len = 30;
        bool encoded_leg_issuer = 31;
        bool leg_security_desc = 32;
        bool encoded_leg_security_desc_len = 33;
        bool encoded_leg_security_desc = 34;
        bool leg_ratio_qty = 35;
        bool leg_side = 36;
        bool leg_currency = 37;
        bool leg_pool = 38;
        bool leg_dated_date = 39;
        bool leg_contract_settl_month = 40;
        bool leg_interest_accrual_date = 41;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
      string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
      string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
      string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
      int32 leg_product = 6;  // tag 607, name LegProduct, type INT
      string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
      string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
      string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
      string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
      string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
      string leg_coupon_payment_date = 12;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
      string leg_issue_date = 13;  // tag 249, name LegIssueDate, type LOCALMKTDATE
      string leg_repo_collateral_security_type = 14;  // tag 250, name LegRepoCollateralSecurityType, type STRING
      int32 leg_repurchase_term = 15;  // tag 251, name LegRepurchaseTerm, type INT
      double leg_repurchase_rate = 16;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
      double leg_factor = 17;  // tag 253, name LegFactor, type FLOAT
      string leg_credit_rating = 18;  // tag 257, name LegCreditRating, type STRING
      string leg_instr_registry = 19;  // tag 599, name LegInstrRegistry, type STRING
      string leg_country_of_issue = 20;  // tag 596, name LegCountryOfIssue, type COUNTRY
      string leg_state_or_province_of_issue = 21;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
      string leg_locale_of_issue = 22;  // tag 598, name LegLocaleOfIssue, type STRING
      string leg_redemption_date = 23;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
      double leg_strike_price = 24;  // tag 612, name LegStrikePrice, type PRICE
      string leg_strike_currency = 25;  // tag 942, name LegStrikeCurrency, type CURRENCY
      int32 leg_opt_attribute = 26;  // tag 613, name LegOptAttribute, type CHAR
      double leg_contract_multiplier = 27;  // tag 614, name LegContractMultiplier, type FLOAT
      double leg_coupon_rate = 28;  // tag 615, name LegCouponRate, type PERCENTAGE
      string leg_security_exchange = 29;  // tag 616, name LegSecurityExchange, type EXCHANGE
      string leg_issuer = 30;  // tag 617, name LegIssuer, type STRING
      int32 encoded_leg_issuer_len = 31;  // tag 618, name EncodedLegIssuerLen, type LENGTH
      string encoded_leg_issuer = 32;  // tag 619, name EncodedLegIssuer, type DATA
      string leg_security_desc = 33;  // tag 620, name LegSecurityDesc, type STRING
      int32 encoded_leg_security_desc_len = 34;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
      string encoded_leg_security_desc = 35;  // tag 622, name EncodedLegSecurityDesc, type DATA
      double leg_ratio_qty = 36;  // tag 623, name LegRatioQty, type FLOAT
      int32 leg_side = 37;  // tag 624, name LegSide, type CHAR
      string leg_currency = 38;  // tag 556, name LegCurrency, type CURRENCY
      string leg_pool = 39;  // tag 740, name LegPool, type STRING
      string leg_dated_date = 40;  // tag 739, name LegDatedDate, type LOCALMKTDATE
      string leg_contract_settl_month = 41;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
      string leg_interest_accrual_date = 42;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
    
  // GROUPS
      repeated NoLegSecurityAltId no_leg_security_alt_id = 43;
    }

    message FieldPresence {
      bool symbol = 1;
      bool symbol_sfx = 2;
      bool security_id = 3;
      bool security_id_source = 4;
      bool product = 5;
      bool cfi_code = 6;
      bool security_type = 7;
      bool security_sub_type = 8;
      bool maturity_month_year = 9;
      bool maturity_date = 10;
      bool put_or_call = 11;
      bool coupon_payment_date = 12;
      bool issue_date = 13;
      bool repo_collateral_security_type = 14;
      bool repurchase_term = 15;
      bool repurchase_rate = 16;
      bool factor = 17;
      bool credit_rating = 18;
      bool instr_registry = 19;
      bool country_of_issue = 20;
      bool state_or_province_of_issue = 21;
      bool locale_of_issue = 22;
      bool redemption_date = 23;
      bool strike_price = 24;
      bool strike_currency = 25;
      bool opt_attribute = 26;
      bool contract_multiplier = 27;
      bool coupon_rate = 28;
      bool security_exchange = 29;
      bool issuer = 30;
      bool encoded_issuer_len = 31;
      bool encoded_issuer = 32;
      bool security_desc = 33;
      bool encoded_security_desc_len = 34;
      bool encoded_security_desc = 35;
      bool pool = 36;
      bool contract_settl_month = 37;
      bool cp_program = 38;
      bool cp_reg_type = 39;
      bool dated_date = 40;
      bool interest_accrual_date = 41;
      bool agreement_desc = 42;
      bool agreement_id = 43;
      bool agreement_date = 44;
      bool agreement_currency = 45;
      bool termination_type = 46;
      bool start_date = 47;
      bool end_date = 48;
      bool delivery_type = 49;
      bool margin_ratio = 50;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string symbol = 2;  // tag 55, name Symbol, type STRING
    string symbol_sfx = 3;  // tag 65, name SymbolSfx, type STRING
    string security_id = 4;  // tag 48, name SecurityID, type STRING
    string security_id_source = 5;  // tag 22, name SecurityIDSource, type STRING
    int32 product = 6;  // tag 460, name Product, type INT
    string cfi_code = 7;  // tag 461, name CFICode, type STRING
    string security_type = 8;  // tag 167, name SecurityType, type STRING
    string security_sub_type = 9;  // tag 762, name SecuritySubType, type STRING
    string maturity_month_year = 10;  // tag 200, name MaturityMonthYear, type MONTHYEAR
    string maturity_date = 11;  // tag 541, name MaturityDate, type LOCALMKTDATE
    int32 put_or_call = 12;  // tag 201, name PutOrCall, type INT
    string coupon_payment_date = 13;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
    string issue_date = 14;  // tag 225, name IssueDate, type LOCALMKTDATE
    string repo_collateral_security_type = 15;  // tag 239, name RepoCollateralSecurityType, type STRING
    int32 repurchase_term = 16;  // tag 226, name RepurchaseTerm, type INT
    double repurchase_rate = 17;  // tag 227, name RepurchaseRate, type PERCENTAGE
    double factor = 18;  // tag 228, name Factor, type FLOAT
    string credit_rating = 19;  // tag 255, name CreditRating, type STRING
    string instr_registry = 20;  // tag 543, name InstrRegistry, type STRING
    string country_of_issue = 21;  // tag 470, name CountryOfIssue, type COUNTRY
    string state_or_province_of_issue = 22;  // tag 471, name StateOrProvinceOfIssue, type STRING
    string locale_of_issue = 23;  // tag 472, name LocaleOfIssue, type STRING
    string redemption_date = 24;  // tag 240, name RedemptionDate, type LOCALMKTDATE
    double strike_price = 25;  // tag 202, name StrikePrice, type PRICE
    string strike_currency = 26;  // tag 947, name StrikeCurrency, type CURRENCY
    int32 opt_attribute = 27;  // tag 206, name OptAttribute, type CHAR
    double contract_multiplier = 28;  // tag 231, name ContractMultiplier, type FLOAT
    double coupon_rate = 29;  // tag 223, name CouponRate, type PERCENTAGE
    string security_exchange = 30;  // tag 207, name SecurityExchange, type EXCHANGE
    string issuer = 31;  // tag 106, name Issuer, type STRING
    int32 encoded_issuer_len = 32;  // tag 348, name EncodedIssuerLen, type LENGTH
    string encoded_issuer = 33;  // tag 349, name EncodedIssuer, type DATA
    string security_desc = 34;  // tag 107, name SecurityDesc, type STRING
    int32 encoded_security_desc_len = 35;  // tag 350, name EncodedSecurityDescLen, type LENGTH
    string encoded_security_desc = 36;  // tag 351, name EncodedSecurityDesc, type DATA
    string pool = 37;  // tag 691, name Pool, type STRING
    string contract_settl_month = 38;  // tag 667, name ContractSettlMonth, type MONTHYEAR
    int32 cp_program = 39;  // tag 875, name CPProgram, type INT
    string cp_reg_type = 40;  // tag 876, name CPRegType, type STRING
    string dated_date = 41;  // tag 873, name DatedDate, type LOCALMKTDATE
    string interest_accrual_date = 42;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
    string agreement_desc = 43;  // tag 913, name AgreementDesc, type STRING
    string agreement_id = 44;  // tag 914, name AgreementID, type STRING
    string agreement_date = 45;  // tag 915, name AgreementDate, type LOCALMKTDATE
    string agreement_currency = 46;  // tag 918, name AgreementCurrency, type CURRENCY
    int32 termination_type = 47;  // tag 788, name TerminationType, type INT
    string start_date = 48;  // tag 916, name StartDate, type LOCALMKTDATE
    string end_date = 49;  // tag 917, name EndDate, type LOCALMKTDATE
    int32 delivery_type = 50;  // tag 919, name DeliveryType, type INT
    double margin_ratio = 51;  // tag 898, name MarginRatio, type PERCENTAGE
  
  // GROUPS
    repeated NoSecurityAltId no_security_alt_id = 52;
    repeated NoEvents no_events = 53;
    repeated NoUnderlyings no_underlyings = 54;
    repeated NoLegs no_legs = 55;
  }

  message FieldPresence {
    bool quote_req_id = 1;
    bool quote_id = 2;
    bool quote_cancel_type = 3;
    bool quote_response_level = 4;
    bool account = 5;
    bool acct_id_source = 6;
    bool account_type = 7;
    bool trading_session_id = 8;
    bool trading_session_sub_id = 9;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string quote_req_id = 5;  // tag 131, name QuoteReqID, type STRING
  string quote_id = 6;  // tag 117, name QuoteID, type STRING
  int32 quote_cancel_type = 7;  // tag 298, name QuoteCancelType, type INT
  int32 quote_response_level = 8;  // tag 301, name QuoteResponseLevel, type INT
  string account = 9;  // tag 1, name Account, type STRING
  int32 acct_id_source = 10;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 11;  // tag 581, name AccountType, type INT
  string trading_session_id = 12;  // tag 336, name TradingSessionID, type STRING
  string trading_session_sub_id = 13;  // tag 625, name TradingSessionSubID, type STRING

  // GROUPS
  repeated NoPartyIds no_party_ids = 14;
  repeated NoQuoteEntries no_quote_entries = 15;
}

message QuoteRequestReject {
  message NoRelatedSym {
    message NoSecurityAltId {
      message FieldPresence {
        bool security_alt_id = 1;
        bool security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
      string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
    }

    message NoEvents {
      message FieldPresence {
        bool event_type = 1;
        bool event_date = 2;
        bool event_px = 3;
        bool event_text = 4;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 event_type = 2;  // tag 865, name EventType, type INT
      string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
      double event_px = 4;  // tag 867, name EventPx, type PRICE
      string event_text = 5;  // tag 868, name EventText, type STRING
    }

    message NoUnderlyings {
      message NoUnderlyingSecurityAltId {
        message FieldPresence {
          bool underlying_security_alt_id = 1;
          bool underlying_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
        string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
      }

      message NoUnderlyingStips {
        message FieldPresence {
          bool underlying_stip_type = 1;
          bool underlying_stip_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
        string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
      }

      message FieldPresence {
        bool underlying_symbol = 1;
        bool underlying_symbol_sfx = 2;
        bool underlying_security_id = 3;
        bool underlying_security_id_source = 4;
        bool underlying_product = 5;
        bool underlying_cfi_code = 6;
        bool underlying_security_type = 7;
        bool underlying_security_sub_type = 8;
        bool underlying_maturity_month_year = 9;
        bool underlying_maturity_date = 10;
        bool underlying_put_or_call = 11;
        bool underlying_coupon_payment_date = 12;
        bool underlying_issue_date = 13;
        bool underlying_repo_collateral_security_type = 14;
        bool underlying_repurchase_term = 15;
        bool underlying_repurchase_rate = 16;
        bool underlying_factor = 17;
        bool underlying_credit_rating = 18;
        bool underlying_instr_registry = 19;
        bool underlying_country_of_issue = 20;
        bool underlying_state_or_province_of_issue = 21;
        bool underlying_locale_of_issue = 22;
        bool underlying_redemption_date = 23;
        bool underlying_strike_price = 24;
        bool underlying_strike_currency = 25;
        bool underlying_opt_attribute = 26;
        bool underlying_contract_multiplier = 27;
        bool underlying_coupon_rate = 28;
        bool underlying_security_exchange = 29;
        bool underlying_issuer = 30;
        bool encoded_underlying_issuer_len = 31;
        bool encoded_underlying_issuer = 32;
        bool underlying_security_desc = 33;
        bool encoded_underlying_security_desc_len = 34;
        bool encoded_underlying_security_desc = 35;
        bool underlying_cp_program = 36;
        bool underlying_cp_reg_type = 37;
        bool underlying_currency = 38;
        bool underlying_qty = 39;
        bool underlying_px = 40;
        bool underlying_dirty_price = 41;
        bool underlying_end_price = 42;
        bool underlying_start_value = 43;
        bool underlying_current_value = 44;
        bool underlying_end_value = 45;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
      string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
      string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
      string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
      int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
      string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
      string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
      string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
      string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
      string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
      int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
      string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
      string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
      string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
      int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
      double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
      double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
      string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
      string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
      string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
      string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
      string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
      string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
      double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
      string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
      int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
      double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
      double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
      string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
      string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
      int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
      string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
      string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
      int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
      string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
      string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
      string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
      string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
      double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
      double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
      double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
      double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
      double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
      double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
      double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
    
  // GROUPS
      repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
      repeated NoUnderlyingStips no_underlying_stips = 48;
    }

    message NoStipulations {
      message FieldPresence {
        bool stipulation_type = 1;
        bool stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
      string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
    }

    message NoLegs {
      message NoLegSecurityAltId {
        message FieldPresence {
          bool leg_security_alt_id = 1;
          bool leg_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
        string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
      }

      message NoLegStipulations {
        message FieldPresence {
          bool leg_stipulation_type = 1;
          bool leg_stipulation_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
        string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
      }

      message NoNestedPartyIds {
        message NoNestedPartySubIds {
          message FieldPresence {
            bool nested_party_sub_id = 1;
            bool nested_party_sub_id_type = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
          int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
        }

        message FieldPresence {
          bool nested_party_id = 1;
          bool nested_party_id_source = 2;
          bool nested_party_role = 3;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
        int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
        int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
      
  // GROUPS
        repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
      }

      message FieldPresence {
        bool leg_symbol = 1;
        bool leg_symbol_sfx = 2;
        bool leg_security_id = 3;
        bool leg_security_id_source = 4;
        bool leg_product = 5;
        bool leg_cfi_code = 6;
        bool leg_security_type = 7;
        bool leg_security_sub_type = 8;
        bool leg_maturity_month_year = 9;
        bool leg_maturity_date = 10;
        bool leg_coupon_payment_date = 11;
        bool leg_issue_date = 12;
        bool leg_repo_collateral_security_type = 13;
        bool leg_repurchase_term = 14;
        bool leg_repurchase_rate = 15;
        bool leg_factor = 16;
        bool leg_credit_rating = 17;
        bool leg_instr_registry = 18;
        bool leg_country_of_issue = 19;
        bool leg_state_or_province_of_issue = 20;
        bool leg_locale_of_issue = 21;
        bool leg_redemption_date = 22;
        bool leg_strike_price = 23;
        bool leg_strike_currency = 24;
        bool leg_opt_attribute = 25;
        bool leg_contract_multiplier = 26;
        bool leg_coupon_rate = 27;
        bool leg_security_exchange = 28;
        bool leg_issuer = 29;
        bool encoded_leg_issuer_len = 30;
        bool encoded_leg_issuer = 31;
        bool leg_security_desc = 32;
        bool encoded_leg_security_desc_len = 33;
        bool encoded_leg_security_desc = 34;
        bool leg_ratio_qty = 35;
        bool leg_side = 36;
        bool leg_currency = 37;
        bool leg_pool = 38;
        bool leg_dated_date = 39;
        bool leg_contract_settl_month = 40;
        bool leg_interest_accrual_date = 41;
        bool leg_qty = 42;
        bool leg_swap_type = 43;
        bool leg_settl_type = 44;
        bool leg_settl_date = 45;
        bool leg_benchmark_curve_currency = 46;
        bool leg_benchmark_curve_name = 47;
        bool leg_benchmark_curve_point = 48;
        bool leg_benchmark_price = 49;
        bool leg_benchmark_price_type = 50;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
      string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
      string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
      string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
      int32 leg_product = 6;  // tag 607, name LegProduct, type INT
      string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
      string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
      string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
      string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
      string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
      string leg_coupon_payment_date = 12;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
      string leg_issue_date = 13;  // tag 249, name LegIssueDate, type LOCALMKTDATE
      string leg_repo_collateral_security_type = 14;  // tag 250, name LegRepoCollateralSecurityType, type STRING
      int32 leg_repurchase_term = 15;  // tag 251, name LegRepurchaseTerm, type INT
      double leg_repurchase_rate = 16;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
      double leg_factor = 17;  // tag 253, name LegFactor, type FLOAT
      string leg_credit_rating = 18;  // tag 257, name LegCreditRating, type STRING
      string leg_instr_registry = 19;  // tag 599, name LegInstrRegistry, type STRING
      string leg_country_of_issue = 20;  // tag 596, name LegCountryOfIssue, type COUNTRY
      string leg_state_or_province_of_issue = 21;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
      string leg_locale_of_issue = 22;  // tag 598, name LegLocaleOfIssue, type STRING
      string leg_redemption_date = 23;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
      double leg_strike_price = 24;  // tag 612, name LegStrikePrice, type PRICE
      string leg_strike_currency = 25;  // tag 942, name LegStrikeCurrency, type CURRENCY
      int32 leg_opt_attribute = 26;  // tag 613, name LegOptAttribute, type CHAR
      double leg_contract_multiplier = 27;  // tag 614, name LegContractMultiplier, type FLOAT
      double leg_coupon_rate = 28;  // tag 615, name LegCouponRate, type PERCENTAGE
      string leg_security_exchange = 29;  // tag 616, name LegSecurityExchange, type EXCHANGE
      string leg_issuer = 30;  // tag 617, name LegIssuer, type STRING
      int32 encoded_leg_issuer_len = 31;  // tag 618, name EncodedLegIssuerLen, type LENGTH
      string encoded_leg_issuer = 32;  // tag 619, name EncodedLegIssuer, type DATA
      string leg_security_desc = 33;  // tag 620, name LegSecurityDesc, type STRING
      int32 encoded_leg_security_desc_len = 34;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
      string encoded_leg_security_desc = 35;  // tag 622, name EncodedLegSecurityDesc, type DATA
      double leg_ratio_qty = 36;  // tag 623, name LegRatioQty, type FLOAT
      int32 leg_side = 37;  // tag 624, name LegSide, type CHAR
      string leg_currency = 38;  // tag 556, name LegCurrency, type CURRENCY
      string leg_pool = 39;  // tag 740, name LegPool, type STRING
      string leg_dated_date = 40;  // tag 739, name LegDatedDate, type LOCALMKTDATE
      string leg_contract_settl_month = 41;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
      string leg_interest_accrual_date = 42;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
      double leg_qty = 43;  // tag 687, name LegQty, type QTY
      int32 leg_swap_type = 44;  // tag 690, name LegSwapType, type INT
      int32 leg_settl_type = 45;  // tag 587, name LegSettlType, type CHAR
      string leg_settl_date = 46;  // tag 588, name LegSettlDate, type LOCALMKTDATE
      string leg_benchmark_curve_currency = 47;  // tag 676, name LegBenchmarkCurveCurrency, type CURRENCY
      string leg_benchmark_curve_name = 48;  // tag 677, name LegBenchmarkCurveName, type STRING
      string leg_benchmark_curve_point = 49;  // tag 678, name LegBenchmarkCurvePoint, type STRING
      double leg_benchmark_price = 50;  // tag 679, name LegBenchmarkPrice, type PRICE
      int32 leg_benchmark_price_type = 51;  // tag 680, name LegBenchmarkPriceType, type INT
    
  // GROUPS
      repeated NoLegSecurityAltId no_leg_security_alt_id = 52;
      repeated NoLegStipulations no_leg_stipulations = 53;
      repeated NoNestedPartyIds no_nested_party_ids = 54;
    }

    message FieldPresence {
      bool symbol = 1;
      bool symbol_sfx = 2;
      bool security_id = 3;
      bool security_id_source = 4;
      bool product = 5;
      bool cfi_code = 6;
      bool security_type = 7;
      bool security_sub_type = 8;
      bool maturity_month_year = 9;
      bool maturity_date = 10;
      bool put_or_call = 11;
      bool coupon_payment_date = 12;
      bool issue_date = 13;
      bool repo_collateral_security_type = 14;
      bool repurchase_term = 15;
      bool repurchase_rate = 16;
      bool factor = 17;
      bool credit_rating = 18;
      bool instr_registry = 19;
      bool country_of_issue = 20;
      bool state_or_province_of_issue = 21;
      bool locale_of_issue = 22;
      bool redemption_date = 23;
      bool strike_price = 24;
      bool strike_currency = 25;
      bool opt_attribute = 26;
      bool contract_multiplier = 27;
      bool coupon_rate = 28;
      bool security_exchange = 29;
      bool issuer = 30;
      bool encoded_issuer_len = 31;
      bool encoded_issuer = 32;
      bool security_desc = 33;
      bool encoded_security_desc_len = 34;
      bool encoded_security_desc = 35;
      bool pool = 36;
      bool contract_settl_month = 37;
      bool cp_program = 38;
      bool cp_reg_type = 39;
      bool dated_date = 40;
      bool interest_accrual_date = 41;
      bool agreement_desc = 42;
      bool agreement_id = 43;
      bool agreement_date = 44;
      bool agreement_currency = 45;
      bool termination_type = 46;
      bool start_date = 47;
      bool end_date = 48;
      bool delivery_type = 49;
      bool margin_ratio = 50;
      bool prev_close_px = 51;
      bool quote_request_type = 52;
      bool quote_type = 53;
      bool trading_session_id = 54;
      bool trading_session_sub_id = 55;
      bool trade_origination_date = 56;
      bool side = 57;
      bool qty_type = 58;
      bool order_qty = 59;
      bool cash_order_qty = 60;
      bool order_percent = 61;
      bool rounding_direction = 62;
      bool rounding_modulus = 63;
      bool settl_type = 64;
      bool settl_date = 65;
      bool settl_date2 = 66;
      bool order_qty2 = 67;
      bool currency = 68;
      bool account = 69;
      bool acct_id_source = 70;
      bool account_type = 71;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string symbol = 2;  // tag 55, name Symbol, type STRING
    string symbol_sfx = 3;  // tag 65, name SymbolSfx, type STRING
    string security_id = 4;  // tag 48, name SecurityID, type STRING
    string security_id_source = 5;  // tag 22, name SecurityIDSource, type STRING
    int32 product = 6;  // tag 460, name Product, type INT
    string cfi_code = 7;  // tag 461, name CFICode, type STRING
    string security_type = 8;  // tag 167, name SecurityType, type STRING
    string security_sub_type = 9;  // tag 762, name SecuritySubType, type STRING
    string maturity_month_year = 10;  // tag 200, name MaturityMonthYear, type MONTHYEAR
    string maturity_date = 11;  // tag 541, name MaturityDate, type LOCALMKTDATE
    int32 put_or_call = 12;  // tag 201, name PutOrCall, type INT
    string coupon_payment_date = 13;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
    string issue_date = 14;  // tag 225, name IssueDate, type LOCALMKTDATE
    string repo_collateral_security_type = 15;  // tag 239, name RepoCollateralSecurityType, type STRING
    int32 repurchase_term = 16;  // tag 226, name RepurchaseTerm, type INT
    double repurchase_rate = 17;  // tag 227, name RepurchaseRate, type PERCENTAGE
    double factor = 18;  // tag 228, name Factor, type FLOAT
    string credit_rating = 19;  // tag 255, name CreditRating, type STRING
    string instr_registry = 20;  // tag 543, name InstrRegistry, type STRING
    string country_of_issue = 21;  // tag 470, name CountryOfIssue, type COUNTRY
    string state_or_province_of_issue = 22;  // tag 471, name StateOrProvinceOfIssue, type STRING
    string locale_of_issue = 23;  // tag 472, name LocaleOfIssue, type STRING
    string redemption_date = 24;  // tag 240, name RedemptionDate, type LOCALMKTDATE
    double strike_price = 25;  // tag 202, name StrikePrice, type PRICE
    string strike_currency = 26;  // tag 947, name StrikeCurrency, type CURRENCY
    int32 opt_attribute = 27;  // tag 206, name OptAttribute, type CHAR
    double contract_multiplier = 28;  // tag 231, name ContractMultiplier, type FLOAT
    double coupon_rate = 29;  // tag 223, name CouponRate, type PERCENTAGE
    string security_exchange = 30;  // tag 207, name SecurityExchange, type EXCHANGE
    string issuer = 31;  // tag 106, name Issuer, type STRING
    int32 encoded_issuer_len = 32;  // tag 348, name EncodedIssuerLen, type LENGTH
    string encoded_issuer = 33;  // tag 349, name EncodedIssuer, type DATA
    string security_desc = 34;  // tag 107, name SecurityDesc, type STRING
    int32 encoded_security_desc_len = 35;  // tag 350, name EncodedSecurityDescLen, type LENGTH
    string encoded_security_desc = 36;  // tag 351, name EncodedSecurityDesc, type DATA
    string pool = 37;  // tag 691, name Pool, type STRING
    string contract_settl_month = 38;  // tag 667, name ContractSettlMonth, type MONTHYEAR
    int32 cp_program = 39;  // tag 875, name CPProgram, type INT
    string cp_reg_type = 40;  // tag 876, name CPRegType, type STRING
    string dated_date = 41;  // tag 873, name DatedDate, type LOCALMKTDATE
    string interest_accrual_date = 42;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
    string agreement_desc = 43;  // tag 913, name AgreementDesc, type STRING
    string agreement_id = 44;  // tag 914, name AgreementID, type STRING
    string agreement_date = 45;  // tag 915, name AgreementDate, type LOCALMKTDATE
    string agreement_currency = 46;  // tag 918, name AgreementCurrency, type CURRENCY
    int32 termination_type = 47;  // tag 788, name TerminationType, type INT
    string start_date = 48;  // tag 916, name StartDate, type LOCALMKTDATE
    string end_date = 49;  // tag 917, name EndDate, type LOCALMKTDATE
    int32 delivery_type = 50;  // tag 919, name DeliveryType, type INT
    double margin_ratio = 51;  // tag 898, name MarginRatio, type PERCENTAGE
    double prev_close_px = 52;  // tag 140, name PrevClosePx, type PRICE
    int32 quote_request_type = 53;  // tag 303, name QuoteRequestType, type INT
    int32 quote_type = 54;  // tag 537, name QuoteType, type INT
    string trading_session_id = 55;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 56;  // tag 625, name TradingSessionSubID, type STRING
    string trade_origination_date = 57;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
    int32 side = 58;  // tag 54, name Side, type CHAR
    int32 qty_type = 59;  // tag 854, name QtyType, type INT
    double order_qty = 60;  // tag 38, name OrderQty, type QTY
    double cash_order_qty = 61;  // tag 152, name CashOrderQty, type QTY
    double order_percent = 62;  // tag 516, name OrderPercent, type PERCENTAGE
    int32 rounding_direction = 63;  // tag 468, name RoundingDirection, type CHAR
    double rounding_modulus = 64;  // tag 469, name RoundingModulus, type FLOAT
    int32 settl_type = 65;  // tag 63, name SettlType, type CHAR
    string settl_date = 66;  // tag 64, name SettlDate, type LOCALMKTDATE
    string settl_date2 = 67;  // tag 193, name SettlDate2, type LOCALMKTDATE
    double order_qty2 = 68;  // tag 192, name OrderQty2, type QTY
    string currency = 69;  // tag 15, name Currency, type CURRENCY
    string account = 70;  // tag 1, name Account, type STRING
    int32 acct_id_source = 71;  // tag 660, name AcctIDSource, type INT
    int32 account_type = 72;  // tag 581, name AccountType, type INT
  
  // GROUPS
    repeated NoSecurityAltId no_security_alt_id = 73;
    repeated NoEvents no_events = 74;
    repeated NoUnderlyings no_underlyings = 75;
    repeated NoStipulations no_stipulations = 76;
    repeated NoLegs no_legs = 77;
  }

  message NoQuoteQualifiers {
    message FieldPresence {
      bool quote_qualifier = 1;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 quote_qualifier = 2;  // tag 695, name QuoteQualifier, type CHAR
  }

  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message FieldPresence {
    bool quote_req_id = 1;
    bool rfq_req_id = 2;
    bool quote_request_reject_reason = 3;
    bool quote_price_type = 4;
    bool ord_type = 5;
    bool expire_time = 6;
    bool transact_time = 7;
    bool spread = 8;
    bool benchmark_curve_currency = 9;
    bool benchmark_curve_name = 10;
    bool benchmark_curve_point = 11;
    bool benchmark_price = 12;
    bool benchmark_price_type = 13;
    bool benchmark_security_id = 14;
    bool benchmark_security_id_source = 15;
    bool price_type = 16;
    bool price = 17;
    bool price2 = 18;
    bool yield_type = 19;
    bool yield = 20;
    bool yield_calc_date = 21;
    bool yield_redemption_date = 22;
    bool yield_redemption_price = 23;
    bool yield_redemption_price_type = 24;
    bool text = 25;
    bool encoded_text_len = 26;
    bool encoded_text = 27;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string quote_req_id = 5;  // tag 131, name QuoteReqID, type STRING
  string rfq_req_id = 6;  // tag 644, name RFQReqID, type STRING
  int32 quote_request_reject_reason = 7;  // tag 658, name QuoteRequestRejectReason, type INT
  int32 quote_price_type = 8;  // tag 692, name QuotePriceType, type INT
  int32 ord_type = 9;  // tag 40, name OrdType, type CHAR
  uint64 expire_time = 10;  // tag 126, name ExpireTime, type UTCTIMESTAMP
  uint64 transact_time = 11;  // tag 60, name TransactTime, type UTCTIMESTAMP
  double spread = 12;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 13;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 14;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 15;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 16;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 17;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 18;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 19;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  int32 price_type = 20;  // tag 423, name PriceType, type INT
  double price = 21;  // tag 44, name Price, type PRICE
  double price2 = 22;  // tag 640, name Price2, type PRICE
  string yield_type = 23;  // tag 235, name YieldType, type STRING
  double yield = 24;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 25;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 26;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 27;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 28;  // tag 698, name YieldRedemptionPriceType, type INT
  string text = 29;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 30;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 31;  // tag 355, name EncodedText, type DATA

  // GROUPS
  repeated NoRelatedSym no_related_sym = 32;
  repeated NoQuoteQualifiers no_quote_qualifiers = 33;
  repeated NoPartyIds no_party_ids = 34;
}

message TestRequest {
  message FieldPresence {
    bool test_req_id = 1;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string test_req_id = 5;  // tag 112, name TestReqID, type STRING
}

message Heartbeat {
  message FieldPresence {
    bool test_req_id = 1;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string test_req_id = 5;  // tag 112, name TestReqID, type STRING
}

message MarketDataSnapshotFullRefresh {
  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_px = 3;
      bool event_text = 4;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    double event_px = 4;  // tag 867, name EventPx, type PRICE
    string event_text = 5;  // tag 868, name EventText, type STRING
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_put_or_call = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_issue_date = 13;
      bool underlying_repo_collateral_security_type = 14;
      bool underlying_repurchase_term = 15;
      bool underlying_repurchase_rate = 16;
      bool underlying_factor = 17;
      bool underlying_credit_rating = 18;
      bool underlying_instr_registry = 19;
      bool underlying_country_of_issue = 20;
      bool underlying_state_or_province_of_issue = 21;
      bool underlying_locale_of_issue = 22;
      bool underlying_redemption_date = 23;
      bool underlying_strike_price = 24;
      bool underlying_strike_currency = 25;
      bool underlying_opt_attribute = 26;
      bool underlying_contract_multiplier = 27;
      bool underlying_coupon_rate = 28;
      bool underlying_security_exchange = 29;
      bool underlying_issuer = 30;
      bool encoded_underlying_issuer_len = 31;
      bool encoded_underlying_issuer = 32;
      bool underlying_security_desc = 33;
      bool encoded_underlying_security_desc_len = 34;
      bool encoded_underlying_security_desc = 35;
      bool underlying_cp_program = 36;
      bool underlying_cp_reg_type = 37;
      bool underlying_currency = 38;
      bool underlying_qty = 39;
      bool underlying_px = 40;
      bool underlying_dirty_price = 41;
      bool underlying_end_price = 42;
      bool underlying_start_value = 43;
      bool underlying_current_value = 44;
      bool underlying_end_value = 45;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
    string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
    double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
    repeated NoUnderlyingStips no_underlying_stips = 48;
  }

  message NoLegs {
    message NoLegSecurityAltId {
      message FieldPresence {
        bool leg_security_alt_id = 1;
        bool leg_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
      string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
    }

    message FieldPresence {
      bool leg_symbol = 1;
      bool leg_symbol_sfx = 2;
      bool leg_security_id = 3;
      bool leg_security_id_source = 4;
      bool leg_product = 5;
      bool leg_cfi_code = 6;
      bool leg_security_type = 7;
      bool leg_security_sub_type = 8;
      bool leg_maturity_month_year = 9;
      bool leg_maturity_date = 10;
      bool leg_coupon_payment_date = 11;
      bool leg_issue_date = 12;
      bool leg_repo_collateral_security_type = 13;
      bool leg_repurchase_term = 14;
      bool leg_repurchase_rate = 15;
      bool leg_factor = 16;
      bool leg_credit_rating = 17;
      bool leg_instr_registry = 18;
      bool leg_country_of_issue = 19;
      bool leg_state_or_province_of_issue = 20;
      bool leg_locale_of_issue = 21;
      bool leg_redemption_date = 22;
      bool leg_strike_price = 23;
      bool leg_strike_currency = 24;
      bool leg_opt_attribute = 25;
      bool leg_contract_multiplier = 26;
      bool leg_coupon_rate = 27;
      bool leg_security_exchange = 28;
      bool leg_issuer = 29;
      bool encoded_leg_issuer_len = 30;
      bool encoded_leg_issuer = 31;
      bool leg_security_desc = 32;
      bool encoded_leg_security_desc_len = 33;
      bool encoded_leg_security_desc = 34;
      bool leg_ratio_qty = 35;
      bool leg_side = 36;
      bool leg_currency = 37;
      bool leg_pool = 38;
      bool leg_dated_date = 39;
      bool leg_contract_settl_month = 40;
      bool leg_interest_accrual_date = 41;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
    string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
    string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
    string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
    int32 leg_product = 6;  // tag 607, name LegProduct, type INT
    string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
    string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
    string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
    string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
    string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
    string leg_coupon_payment_date = 12;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
    string leg_issue_date = 13;  // tag 249, name LegIssueDate, type LOCALMKTDATE
    string leg_repo_collateral_security_type = 14;  // tag 250, name LegRepoCollateralSecurityType, type STRING
    int32 leg_repurchase_term = 15;  // tag 251, name LegRepurchaseTerm, type INT
    double leg_repurchase_rate = 16;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
    double leg_factor = 17;  // tag 253, name LegFactor, type FLOAT
    string leg_credit_rating = 18;  // tag 257, name LegCreditRating, type STRING
    string leg_instr_registry = 19;  // tag 599, name LegInstrRegistry, type STRING
    string leg_country_of_issue = 20;  // tag 596, name LegCountryOfIssue, type COUNTRY
    string leg_state_or_province_of_issue = 21;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
    string leg_locale_of_issue = 22;  // tag 598, name LegLocaleOfIssue, type STRING
    string leg_redemption_date = 23;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
    double leg_strike_price = 24;  // tag 612, name LegStrikePrice, type PRICE
    string leg_strike_currency = 25;  // tag 942, name LegStrikeCurrency, type CURRENCY
    int32 leg_opt_attribute = 26;  // tag 613, name LegOptAttribute, type CHAR
    double leg_contract_multiplier = 27;  // tag 614, name LegContractMultiplier, type FLOAT
    double leg_coupon_rate = 28;  // tag 615, name LegCouponRate, type PERCENTAGE
    string leg_security_exchange = 29;  // tag 616, name LegSecurityExchange, type EXCHANGE
    string leg_issuer = 30;  // tag 617, name LegIssuer, type STRING
    int32 encoded_leg_issuer_len = 31;  // tag 618, name EncodedLegIssuerLen, type LENGTH
    string encoded_leg_issuer = 32;  // tag 619, name EncodedLegIssuer, type DATA
    string leg_security_desc = 33;  // tag 620, name LegSecurityDesc, type STRING
    int32 encoded_leg_security_desc_len = 34;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
    string encoded_leg_security_desc = 35;  // tag 622, name EncodedLegSecurityDesc, type DATA
    double leg_ratio_qty = 36;  // tag 623, name LegRatioQty, type FLOAT
    int32 leg_side = 37;  // tag 624, name LegSide, type CHAR
    string leg_currency = 38;  // tag 556, name LegCurrency, type CURRENCY
    string leg_pool = 39;  // tag 740, name LegPool, type STRING
    string leg_dated_date = 40;  // tag 739, name LegDatedDate, type LOCALMKTDATE
    string leg_contract_settl_month = 41;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
    string leg_interest_accrual_date = 42;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
  
  // GROUPS
    repeated NoLegSecurityAltId no_leg_security_alt_id = 43;
  }

  message NoMdEntries {
    message FieldPresence {
      bool md_entry_type = 1;
      bool md_entry_px = 2;
      bool currency = 3;
      bool md_entry_size = 4;
      bool md_entry_date = 5;
      bool md_entry_time = 6;
      bool tick_direction = 7;
      bool md_mkt = 8;
      bool trading_session_id = 9;
      bool trading_session_sub_id = 10;
      bool quote_condition = 11;
      bool trade_condition = 12;
      bool md_entry_originator = 13;
      bool location_id = 14;
      bool desk_id = 15;
      bool open_close_settl_flag = 16;
      bool time_in_force = 17;
      bool expire_date = 18;
      bool expire_time = 19;
      bool min_qty = 20;
      bool exec_inst = 21;
      bool seller_days = 22;
      bool order_id = 23;
      bool quote_entry_id = 24;
      bool md_entry_buyer = 25;
      bool md_entry_seller = 26;
      bool number_of_orders = 27;
      bool md_entry_position_no = 28;
      bool scope = 29;
      bool price_delta = 30;
      bool text = 31;
      bool encoded_text_len = 32;
      bool encoded_text = 33;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 md_entry_type = 2;  // tag 269, name MDEntryType, type CHAR
    double md_entry_px = 3;  // tag 270, name MDEntryPx, type PRICE
    string currency = 4;  // tag 15, name Currency, type CURRENCY
    double md_entry_size = 5;  // tag 271, name MDEntrySize, type QTY
    uint64 md_entry_date = 6;  // tag 272, name MDEntryDate, type UTCDATEONLY
    uint64 md_entry_time = 7;  // tag 273, name MDEntryTime, type UTCTIMEONLY
    int32 tick_direction = 8;  // tag 274, name TickDirection, type CHAR
    string md_mkt = 9;  // tag 275, name MDMkt, type EXCHANGE
    string trading_session_id = 10;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 11;  // tag 625, name TradingSessionSubID, type STRING
    string quote_condition = 12;  // tag 276, name QuoteCondition, type MULTIPLEVALUESTRING
    string trade_condition = 13;  // tag 277, name TradeCondition, type MULTIPLEVALUESTRING
    string md_entry_originator = 14;  // tag 282, name MDEntryOriginator, type STRING
    string location_id = 15;  // tag 283, name LocationID, type STRING
    string desk_id = 16;  // tag 284, name DeskID, type STRING
    string open_close_settl_flag = 17;  // tag 286, name OpenCloseSettlFlag, type MULTIPLEVALUESTRING
    int32 time_in_force = 18;  // tag 59, name TimeInForce, type CHAR
    string expire_date = 19;  // tag 432, name ExpireDate, type LOCALMKTDATE
    uint64 expire_time = 20;  // tag 126, name ExpireTime, type UTCTIMESTAMP
    double min_qty = 21;  // tag 110, name MinQty, type QTY
    string exec_inst = 22;  // tag 18, name ExecInst, type MULTIPLEVALUESTRING
    int32 seller_days = 23;  // tag 287, name SellerDays, type INT
    string order_id = 24;  // tag 37, name OrderID, type STRING
    string quote_entry_id = 25;  // tag 299, name QuoteEntryID, type STRING
    string md_entry_buyer = 26;  // tag 288, name MDEntryBuyer, type STRING
    string md_entry_seller = 27;  // tag 289, name MDEntrySeller, type STRING
    int32 number_of_orders = 28;  // tag 346, name NumberOfOrders, type INT
    int32 md_entry_position_no = 29;  // tag 290, name MDEntryPositionNo, type INT
    string scope = 30;  // tag 546, name Scope, type MULTIPLEVALUESTRING
    double price_delta = 31;  // tag 811, name PriceDelta, type FLOAT
    string text = 32;  // tag 58, name Text, type STRING
    int32 encoded_text_len = 33;  // tag 354, name EncodedTextLen, type LENGTH
    string encoded_text = 34;  // tag 355, name EncodedText, type DATA
  }

  message FieldPresence {
    bool md_req_id = 1;
    bool symbol = 2;
    bool symbol_sfx = 3;
    bool security_id = 4;
    bool security_id_source = 5;
    bool product = 6;
    bool cfi_code = 7;
    bool security_type = 8;
    bool security_sub_type = 9;
    bool maturity_month_year = 10;
    bool maturity_date = 11;
    bool put_or_call = 12;
    bool coupon_payment_date = 13;
    bool issue_date = 14;
    bool repo_collateral_security_type = 15;
    bool repurchase_term = 16;
    bool repurchase_rate = 17;
    bool factor = 18;
    bool credit_rating = 19;
    bool instr_registry = 20;
    bool country_of_issue = 21;
    bool state_or_province_of_issue = 22;
    bool locale_of_issue = 23;
    bool redemption_date = 24;
    bool strike_price = 25;
    bool strike_currency = 26;
    bool opt_attribute = 27;
    bool contract_multiplier = 28;
    bool coupon_rate = 29;
    bool security_exchange = 30;
    bool issuer = 31;
    bool encoded_issuer_len = 32;
    bool encoded_issuer = 33;
    bool security_desc = 34;
    bool encoded_security_desc_len = 35;
    bool encoded_security_desc = 36;
    bool pool = 37;
    bool contract_settl_month = 38;
    bool cp_program = 39;
    bool cp_reg_type = 40;
    bool dated_date = 41;
    bool interest_accrual_date = 42;
    bool financial_status = 43;
    bool corporate_action = 44;
    bool net_chg_prev_day = 45;
    bool appl_queue_depth = 46;
    bool appl_queue_resolution = 47;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string md_req_id = 5;  // tag 262, name MDReqID, type STRING
  string symbol = 6;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 7;  // tag 65, name SymbolSfx, type STRING
  string security_id = 8;  // tag 48, name SecurityID, type STRING
  string security_id_source = 9;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 10;  // tag 460, name Product, type INT
  string cfi_code = 11;  // tag 461, name CFICode, type STRING
  string security_type = 12;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 13;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 14;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 15;  // tag 541, name MaturityDate, type LOCALMKTDATE
  int32 put_or_call = 16;  // tag 201, name PutOrCall, type INT
  string coupon_payment_date = 17;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string issue_date = 18;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 19;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 20;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 21;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 22;  // tag 228, name Factor, type FLOAT
  string credit_rating = 23;  // tag 255, name CreditRating, type STRING
  string instr_registry = 24;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 25;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 26;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 27;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 28;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 29;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 30;  // tag 947, name StrikeCurrency, type CURRENCY
  int32 opt_attribute = 31;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 32;  // tag 231, name ContractMultiplier, type FLOAT
  double coupon_rate = 33;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 34;  // tag 207, name SecurityExchange, type EXCHANGE
  string issuer = 35;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 36;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 37;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 38;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 39;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 40;  // tag 351, name EncodedSecurityDesc, type DATA
  string pool = 41;  // tag 691, name Pool, type STRING
  string contract_settl_month = 42;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 43;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 44;  // tag 876, name CPRegType, type STRING
  string dated_date = 45;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 46;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string financial_status = 47;  // tag 291, name FinancialStatus, type MULTIPLEVALUESTRING
  string corporate_action = 48;  // tag 292, name CorporateAction, type MULTIPLEVALUESTRING
  double net_chg_prev_day = 49;  // tag 451, name NetChgPrevDay, type PRICEOFFSET
  int32 appl_queue_depth = 50;  // tag 813, name ApplQueueDepth, type INT
  int32 appl_queue_resolution = 51;  // tag 814, name ApplQueueResolution, type INT

  // GROUPS
  repeated NoSecurityAltId no_security_alt_id = 52;
  repeated NoEvents no_events = 53;
  repeated NoUnderlyings no_underlyings = 54;
  repeated NoLegs no_legs = 55;
  repeated NoMdEntries no_md_entries = 56;
}

message NewOrderSingle {
  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoAllocs {
    message NoNestedPartyIds {
      message NoNestedPartySubIds {
        message FieldPresence {
          bool nested_party_sub_id = 1;
          bool nested_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
        int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
      }

      message FieldPresence {
        bool nested_party_id = 1;
        bool nested_party_id_source = 2;
        bool nested_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
      int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
      int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
    
  // GROUPS
      repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
    }

    message FieldPresence {
      bool alloc_account = 1;
      bool alloc_acct_id_source = 2;
      bool alloc_settl_currency = 3;
      bool individual_alloc_id = 4;
      bool alloc_qty = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string alloc_account = 2;  // tag 79, name AllocAccount, type STRING
    int32 alloc_acct_id_source = 3;  // tag 661, name AllocAcctIDSource, type INT
    string alloc_settl_currency = 4;  // tag 736, name AllocSettlCurrency, type CURRENCY
    string individual_alloc_id = 5;  // tag 467, name IndividualAllocID, type STRING
    double alloc_qty = 6;  // tag 80, name AllocQty, type QTY
  
  // GROUPS
    repeated NoNestedPartyIds no_nested_party_ids = 7;
  }

  message NoTradingSessions {
    message FieldPresence {
      bool trading_session_id = 1;
      bool trading_session_sub_id = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string trading_session_id = 2;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 3;  // tag 625, name TradingSessionSubID, type STRING
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_px = 3;
      bool event_text = 4;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    double event_px = 4;  // tag 867, name EventPx, type PRICE
    string event_text = 5;  // tag 868, name EventText, type STRING
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_put_or_call = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_issue_date = 13;
      bool underlying_repo_collateral_security_type = 14;
      bool underlying_repurchase_term = 15;
      bool underlying_repurchase_rate = 16;
      bool underlying_factor = 17;
      bool underlying_credit_rating = 18;
      bool underlying_instr_registry = 19;
      bool underlying_country_of_issue = 20;
      bool underlying_state_or_province_of_issue = 21;
      bool underlying_locale_of_issue = 22;
      bool underlying_redemption_date = 23;
      bool underlying_strike_price = 24;
      bool underlying_strike_currency = 25;
      bool underlying_opt_attribute = 26;
      bool underlying_contract_multiplier = 27;
      bool underlying_coupon_rate = 28;
      bool underlying_security_exchange = 29;
      bool underlying_issuer = 30;
      bool encoded_underlying_issuer_len = 31;
      bool encoded_underlying_issuer = 32;
      bool underlying_security_desc = 33;
      bool encoded_underlying_security_desc_len = 34;
      bool encoded_underlying_security_desc = 35;
      bool underlying_cp_program = 36;
      bool underlying_cp_reg_type = 37;
      bool underlying_currency = 38;
      bool underlying_qty = 39;
      bool underlying_px = 40;
      bool underlying_dirty_price = 41;
      bool underlying_end_price = 42;
      bool underlying_start_value = 43;
      bool underlying_current_value = 44;
      bool underlying_end_value = 45;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
    string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
    double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
    repeated NoUnderlyingStips no_underlying_stips = 48;
  }

  message NoStipulations {
    message FieldPresence {
      bool stipulation_type = 1;
      bool stipulation_value = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
    string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
  }

  message FieldPresence {
    bool cl_ord_id = 1;
    bool secondary_cl_ord_id = 2;
    bool cl_ord_link_id = 3;
    bool trade_origination_date = 4;
    bool trade_date = 5;
    bool account = 6;
    bool acct_id_source = 7;
    bool account_type = 8;
    bool day_booking_inst = 9;
    bool booking_unit = 10;
    bool prealloc_method = 11;
    bool alloc_id = 12;
    bool settl_type = 13;
    bool settl_date = 14;
    bool cash_margin = 15;
    bool clearing_fee_indicator = 16;
    bool handl_inst = 17;
    bool exec_inst = 18;
    bool min_qty = 19;
    bool max_floor = 20;
    bool ex_destination = 21;
    bool process_code = 22;
    bool symbol = 23;
    bool symbol_sfx = 24;
    bool security_id = 25;
    bool security_id_source = 26;
    bool product = 27;
    bool cfi_code = 28;
    bool security_type = 29;
    bool security_sub_type = 30;
    bool maturity_month_year = 31;
    bool maturity_date = 32;
    bool put_or_call = 33;
    bool coupon_payment_date = 34;
    bool issue_date = 35;
    bool repo_collateral_security_type = 36;
    bool repurchase_term = 37;
    bool repurchase_rate = 38;
    bool factor = 39;
    bool credit_rating = 40;
    bool instr_registry = 41;
    bool country_of_issue = 42;
    bool state_or_province_of_issue = 43;
    bool locale_of_issue = 44;
    bool redemption_date = 45;
    bool strike_price = 46;
    bool strike_currency = 47;
    bool opt_attribute = 48;
    bool contract_multiplier = 49;
    bool coupon_rate = 50;
    bool security_exchange = 51;
    bool issuer = 52;
    bool encoded_issuer_len = 53;
    bool encoded_issuer = 54;
    bool security_desc = 55;
    bool encoded_security_desc_len = 56;
    bool encoded_security_desc = 57;
    bool pool = 58;
    bool contract_settl_month = 59;
    bool cp_program = 60;
    bool cp_reg_type = 61;
    bool dated_date = 62;
    bool interest_accrual_date = 63;
    bool agreement_desc = 64;
    bool agreement_id = 65;
    bool agreement_date = 66;
    bool agreement_currency = 67;
    bool termination_type = 68;
    bool start_date = 69;
    bool end_date = 70;
    bool delivery_type = 71;
    bool margin_ratio = 72;
    bool prev_close_px = 73;
    bool side = 74;
    bool locate_reqd = 75;
    bool transact_time = 76;
    bool qty_type = 77;
    bool order_qty = 78;
    bool cash_order_qty = 79;
    bool order_percent = 80;
    bool rounding_direction = 81;
    bool rounding_modulus = 82;
    bool ord_type = 83;
    bool price_type = 84;
    bool price = 85;
    bool stop_px = 86;
    bool spread = 87;
    bool benchmark_curve_currency = 88;
    bool benchmark_curve_name = 89;
    bool benchmark_curve_point = 90;
    bool benchmark_price = 91;
    bool benchmark_price_type = 92;
    bool benchmark_security_id = 93;
    bool benchmark_security_id_source = 94;
    bool yield_type = 95;
    bool yield = 96;
    bool yield_calc_date = 97;
    bool yield_redemption_date = 98;
    bool yield_redemption_price = 99;
    bool yield_redemption_price_type = 100;
    bool currency = 101;
    bool compliance_id = 102;
    bool solicited_flag = 103;
    bool ioi_id = 104;
    bool quote_id = 105;
    bool time_in_force = 106;
    bool effective_time = 107;
    bool expire_date = 108;
    bool expire_time = 109;
    bool gt_booking_inst = 110;
    bool commission = 111;
    bool comm_type = 112;
    bool comm_currency = 113;
    bool fund_renew_waiv = 114;
    bool order_capacity = 115;
    bool order_restrictions = 116;
    bool cust_order_capacity = 117;
    bool forex_req = 118;
    bool settl_currency = 119;
    bool booking_type = 120;
    bool text = 121;
    bool encoded_text_len = 122;
    bool encoded_text = 123;
    bool settl_date2 = 124;
    bool order_qty2 = 125;
    bool price2 = 126;
    bool position_effect = 127;
    bool covered_or_uncovered = 128;
    bool max_show = 129;
    bool peg_offset_value = 130;
    bool peg_move_type = 131;
    bool peg_offset_type = 132;
    bool peg_limit_type = 133;
    bool peg_round_direction = 134;
    bool peg_scope = 135;
    bool discretion_inst = 136;
    bool discretion_offset_value = 137;
    bool discretion_move_type = 138;
    bool discretion_offset_type = 139;
    bool discretion_limit_type = 140;
    bool discretion_round_direction = 141;
    bool discretion_scope = 142;
    bool target_strategy = 143;
    bool target_strategy_parameters = 144;
    bool participation_rate = 145;
    bool cancellation_rights = 146;
    bool money_laundering_status = 147;
    bool regist_id = 148;
    bool designation = 149;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string cl_ord_id = 5;  // tag 11, name ClOrdID, type STRING
  string secondary_cl_ord_id = 6;  // tag 526, name SecondaryClOrdID, type STRING
  string cl_ord_link_id = 7;  // tag 583, name ClOrdLinkID, type STRING
  string trade_origination_date = 8;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
  string trade_date = 9;  // tag 75, name TradeDate, type LOCALMKTDATE
  string account = 10;  // tag 1, name Account, type STRING
  int32 acct_id_source = 11;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 12;  // tag 581, name AccountType, type INT
  int32 day_booking_inst = 13;  // tag 589, name DayBookingInst, type CHAR
  int32 booking_unit = 14;  // tag 590, name BookingUnit, type CHAR
  int32 prealloc_method = 15;  // tag 591, name PreallocMethod, type CHAR
  string alloc_id = 16;  // tag 70, name AllocID, type STRING
  int32 settl_type = 17;  // tag 63, name SettlType, type CHAR
  string settl_date = 18;  // tag 64, name SettlDate, type LOCALMKTDATE
  int32 cash_margin = 19;  // tag 544, name CashMargin, type CHAR
  string clearing_fee_indicator = 20;  // tag 635, name ClearingFeeIndicator, type STRING
  int32 handl_inst = 21;  // tag 21, name HandlInst, type CHAR
  string exec_inst = 22;  // tag 18, name ExecInst, type MULTIPLEVALUESTRING
  double min_qty = 23;  // tag 110, name MinQty, type QTY
  double max_floor = 24;  // tag 111, name MaxFloor, type QTY
  string ex_destination = 25;  // tag 100, name ExDestination, type EXCHANGE
  int32 process_code = 26;  // tag 81, name ProcessCode, type CHAR
  string symbol = 27;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 28;  // tag 65, name SymbolSfx, type STRING
  string security_id = 29;  // tag 48, name SecurityID, type STRING
  string security_id_source = 30;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 31;  // tag 460, name Product, type INT
  string cfi_code = 32;  // tag 461, name CFICode, type STRING
  string security_type = 33;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 34;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 35;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 36;  // tag 541, name MaturityDate, type LOCALMKTDATE
  int32 put_or_call = 37;  // tag 201, name PutOrCall, type INT
  string coupon_payment_date = 38;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string issue_date = 39;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 40;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 41;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 42;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 43;  // tag 228, name Factor, type FLOAT
  string credit_rating = 44;  // tag 255, name CreditRating, type STRING
  string instr_registry = 45;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 46;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 47;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 48;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 49;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 50;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 51;  // tag 947, name StrikeCurrency, type CURRENCY
  int32 opt_attribute = 52;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 53;  // tag 231, name ContractMultiplier, type FLOAT
  double coupon_rate = 54;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 55;  // tag 207, name SecurityExchange, type EXCHANGE
  string issuer = 56;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 57;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 58;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 59;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 60;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 61;  // tag 351, name EncodedSecurityDesc, type DATA
  string pool = 62;  // tag 691, name Pool, type STRING
  string contract_settl_month = 63;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 64;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 65;  // tag 876, name CPRegType, type STRING
  string dated_date = 66;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 67;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 68;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 69;  // tag 914, name AgreementID, type STRING
  string agreement_date = 70;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 71;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 72;  // tag 788, name TerminationType, type INT
  string start_date = 73;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 74;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 75;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 76;  // tag 898, name MarginRatio, type PERCENTAGE
  double prev_close_px = 77;  // tag 140, name PrevClosePx, type PRICE
  int32 side = 78;  // tag 54, name Side, type CHAR
  bool locate_reqd = 79;  // tag 114, name LocateReqd, type BOOLEAN
  uint64 transact_time = 80;  // tag 60, name TransactTime, type UTCTIMESTAMP
  int32 qty_type = 81;  // tag 854, name QtyType, type INT
  double order_qty = 82;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 83;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 84;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 85;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 86;  // tag 469, name RoundingModulus, type FLOAT
  int32 ord_type = 87;  // tag 40, name OrdType, type CHAR
  int32 price_type = 88;  // tag 423, name PriceType, type INT
  double price = 89;  // tag 44, name Price, type PRICE
  double stop_px = 90;  // tag 99, name StopPx, type PRICE
  double spread = 91;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 92;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 93;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 94;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 95;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 96;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 97;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 98;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 99;  // tag 235, name YieldType, type STRING
  double yield = 100;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 101;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 102;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 103;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 104;  // tag 698, name YieldRedemptionPriceType, type INT
  string currency = 105;  // tag 15, name Currency, type CURRENCY
  string compliance_id = 106;  // tag 376, name ComplianceID, type STRING
  bool solicited_flag = 107;  // tag 377, name SolicitedFlag, type BOOLEAN
  string ioi_id = 108;  // tag 23, name IOIID, type STRING
  string quote_id = 109;  // tag 117, name QuoteID, type STRING
  int32 time_in_force = 110;  // tag 59, name TimeInForce, type CHAR
  uint64 effective_time = 111;  // tag 168, name EffectiveTime, type UTCTIMESTAMP
  string expire_date = 112;  // tag 432, name ExpireDate, type LOCALMKTDATE
  uint64 expire_time = 113;  // tag 126, name ExpireTime, type UTCTIMESTAMP
  int32 gt_booking_inst = 114;  // tag 427, name GTBookingInst, type INT
  double commission = 115;  // tag 12, name Commission, type AMT
  int32 comm_type = 116;  // tag 13, name CommType, type CHAR
  string comm_currency = 117;  // tag 479, name CommCurrency, type CURRENCY
  int32 fund_renew_waiv = 118;  // tag 497, name FundRenewWaiv, type CHAR
  int32 order_capacity = 119;  // tag 528, name OrderCapacity, type CHAR
  string order_restrictions = 120;  // tag 529, name OrderRestrictions, type MULTIPLEVALUESTRING
  int32 cust_order_capacity = 121;  // tag 582, name CustOrderCapacity, type INT
  bool forex_req = 122;  // tag 121, name ForexReq, type BOOLEAN
  string settl_currency = 123;  // tag 120, name SettlCurrency, type CURRENCY
  int32 booking_type = 124;  // tag 775, name BookingType, type INT
  string text = 125;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 126;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 127;  // tag 355, name EncodedText, type DATA
  string settl_date2 = 128;  // tag 193, name SettlDate2, type LOCALMKTDATE
  double order_qty2 = 129;  // tag 192, name OrderQty2, type QTY
  double price2 = 130;  // tag 640, name Price2, type PRICE
  int32 position_effect = 131;  // tag 77, name PositionEffect, type CHAR
  int32 covered_or_uncovered = 132;  // tag 203, name CoveredOrUncovered, type INT
  double max_show = 133;  // tag 210, name MaxShow, type QTY
  double peg_offset_value = 134;  // tag 211, name PegOffsetValue, type FLOAT
  int32 peg_move_type = 135;  // tag 835, name PegMoveType, type INT
  int32 peg_offset_type = 136;  // tag 836, name PegOffsetType, type INT
  int32 peg_limit_type = 137;  // tag 837, name PegLimitType, type INT
  int32 peg_round_direction = 138;  // tag 838, name PegRoundDirection, type INT
  int32 peg_scope = 139;  // tag 840, name PegScope, type INT
  int32 discretion_inst = 140;  // tag 388, name DiscretionInst, type CHAR
  double discretion_offset_value = 141;  // tag 389, name DiscretionOffsetValue, type FLOAT
  int32 discretion_move_type = 142;  // tag 841, name DiscretionMoveType, type INT
  int32 discretion_offset_type = 143;  // tag 842, name DiscretionOffsetType, type INT
  int32 discretion_limit_type = 144;  // tag 843, name DiscretionLimitType, type INT
  int32 discretion_round_direction = 145;  // tag 844, name DiscretionRoundDirection, type INT
  int32 discretion_scope = 146;  // tag 846, name DiscretionScope, type INT
  int32 target_strategy = 147;  // tag 847, name TargetStrategy, type INT
  string target_strategy_parameters = 148;  // tag 848, name TargetStrategyParameters, type STRING
  double participation_rate = 149;  // tag 849, name ParticipationRate, type PERCENTAGE
  int32 cancellation_rights = 150;  // tag 480, name CancellationRights, type CHAR
  int32 money_laundering_status = 151;  // tag 481, name MoneyLaunderingStatus, type CHAR
  string regist_id = 152;  // tag 513, name RegistID, type STRING
  string designation = 153;  // tag 494, name Designation, type STRING

  // GROUPS
  repeated NoPartyIds no_party_ids = 154;
  repeated NoAllocs no_allocs = 155;
  repeated NoTradingSessions no_trading_sessions = 156;
  repeated NoSecurityAltId no_security_alt_id = 157;
  repeated NoEvents no_events = 158;
  repeated NoUnderlyings no_underlyings = 159;
  repeated NoStipulations no_stipulations = 160;
}

message OrderCancelReject {
  message FieldPresence {
    bool order_id = 1;
    bool secondary_order_id = 2;
    bool secondary_cl_ord_id = 3;
    bool cl_ord_id = 4;
    bool cl_ord_link_id = 5;
    bool orig_cl_ord_id = 6;
    bool ord_status = 7;
    bool working_indicator = 8;
    bool orig_ord_mod_time = 9;
    bool list_id = 10;
    bool account = 11;
    bool acct_id_source = 12;
    bool account_type = 13;
    bool trade_origination_date = 14;
    bool trade_date = 15;
    bool transact_time = 16;
    bool cxl_rej_response_to = 17;
    bool cxl_rej_reason = 18;
    bool text = 19;
    bool encoded_text_len = 20;
    bool encoded_text = 21;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string order_id = 5;  // tag 37, name OrderID, type STRING
  string secondary_order_id = 6;  // tag 198, name SecondaryOrderID, type STRING
  string secondary_cl_ord_id = 7;  // tag 526, name SecondaryClOrdID, type STRING
  string cl_ord_id = 8;  // tag 11, name ClOrdID, type STRING
  string cl_ord_link_id = 9;  // tag 583, name ClOrdLinkID, type STRING
  string orig_cl_ord_id = 10;  // tag 41, name OrigClOrdID, type STRING
  int32 ord_status = 11;  // tag 39, name OrdStatus, type CHAR
  bool working_indicator = 12;  // tag 636, name WorkingIndicator, type BOOLEAN
  uint64 orig_ord_mod_time = 13;  // tag 586, name OrigOrdModTime, type UTCTIMESTAMP
  string list_id = 14;  // tag 66, name ListID, type STRING
  string account = 15;  // tag 1, name Account, type STRING
  int32 acct_id_source = 16;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 17;  // tag 581, name AccountType, type INT
  string trade_origination_date = 18;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
  string trade_date = 19;  // tag 75, name TradeDate, type LOCALMKTDATE
  uint64 transact_time = 20;  // tag 60, name TransactTime, type UTCTIMESTAMP
  int32 cxl_rej_response_to = 21;  // tag 434, name CxlRejResponseTo, type CHAR
  int32 cxl_rej_reason = 22;  // tag 102, name CxlRejReason, type INT
  string text = 23;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 24;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 25;  // tag 355, name EncodedText, type DATA
}

message ExecutionReport {
  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoContraBrokers {
    message FieldPresence {
      bool contra_broker = 1;
      bool contra_trader = 2;
      bool contra_trade_qty = 3;
      bool contra_trade_time = 4;
      bool contra_leg_ref_id = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string contra_broker = 2;  // tag 375, name ContraBroker, type STRING
    string contra_trader = 3;  // tag 337, name ContraTrader, type STRING
    double contra_trade_qty = 4;  // tag 437, name ContraTradeQty, type QTY
    uint64 contra_trade_time = 5;  // tag 438, name ContraTradeTime, type UTCTIMESTAMP
    string contra_leg_ref_id = 6;  // tag 655, name ContraLegRefID, type STRING
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_px = 3;
      bool event_text = 4;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    double event_px = 4;  // tag 867, name EventPx, type PRICE
    string event_text = 5;  // tag 868, name EventText, type STRING
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_put_or_call = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_issue_date = 13;
      bool underlying_repo_collateral_security_type = 14;
      bool underlying_repurchase_term = 15;
      bool underlying_repurchase_rate = 16;
      bool underlying_factor = 17;
      bool underlying_credit_rating = 18;
      bool underlying_instr_registry = 19;
      bool underlying_country_of_issue = 20;
      bool underlying_state_or_province_of_issue = 21;
      bool underlying_locale_of_issue = 22;
      bool underlying_redemption_date = 23;
      bool underlying_strike_price = 24;
      bool underlying_strike_currency = 25;
      bool underlying_opt_attribute = 26;
      bool underlying_contract_multiplier = 27;
      bool underlying_coupon_rate = 28;
      bool underlying_security_exchange = 29;
      bool underlying_issuer = 30;
      bool encoded_underlying_issuer_len = 31;
      bool encoded_underlying_issuer = 32;
      bool underlying_security_desc = 33;
      bool encoded_underlying_security_desc_len = 34;
      bool encoded_underlying_security_desc = 35;
      bool underlying_cp_program = 36;
      bool underlying_cp_reg_type = 37;
      bool underlying_currency = 38;
      bool underlying_qty = 39;
      bool underlying_px = 40;
      bool underlying_dirty_price = 41;
      bool underlying_end_price = 42;
      bool underlying_start_value = 43;
      bool underlying_current_value = 44;
      bool underlying_end_value = 45;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
    string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
    double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
    repeated NoUnderlyingStips no_underlying_stips = 48;
  }

  message NoStipulations {
    message FieldPresence {
      bool stipulation_type = 1;
      bool stipulation_value = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
    string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
  }

  message NoContAmts {
    message FieldPresence {
      bool cont_amt_type = 1;
      bool cont_amt_value = 2;
      bool cont_amt_curr = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 cont_amt_type = 2;  // tag 519, name ContAmtType, type INT
    double cont_amt_value = 3;  // tag 520, name ContAmtValue, type FLOAT
    string cont_amt_curr = 4;  // tag 521, name ContAmtCurr, type CURRENCY
  }

  message NoLegs {
    message NoLegSecurityAltId {
      message FieldPresence {
        bool leg_security_alt_id = 1;
        bool leg_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
      string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
    }

    message NoLegStipulations {
      message FieldPresence {
        bool leg_stipulation_type = 1;
        bool leg_stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
      string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
    }

    message NoNestedPartyIds {
      message NoNestedPartySubIds {
        message FieldPresence {
          bool nested_party_sub_id = 1;
          bool nested_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
        int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
      }

      message FieldPresence {
        bool nested_party_id = 1;
        bool nested_party_id_source = 2;
        bool nested_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
      int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
      int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
    
  // GROUPS
      repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
    }

    message FieldPresence {
      bool leg_symbol = 1;
      bool leg_symbol_sfx = 2;
      bool leg_security_id = 3;
      bool leg_security_id_source = 4;
      bool leg_product = 5;
      bool leg_cfi_code = 6;
      bool leg_security_type = 7;
      bool leg_security_sub_type = 8;
      bool leg_maturity_month_year = 9;
      bool leg_maturity_date = 10;
      bool leg_coupon_payment_date = 11;
      bool leg_issue_date = 12;
      bool leg_repo_collateral_security_type = 13;
      bool leg_repurchase_term = 14;
      bool leg_repurchase_rate = 15;
      bool leg_factor = 16;
      bool leg_credit_rating = 17;
      bool leg_instr_registry = 18;
      bool leg_country_of_issue = 19;
      bool leg_state_or_province_of_issue = 20;
      bool leg_locale_of_issue = 21;
      bool leg_redemption_date = 22;
      bool leg_strike_price = 23;
      bool leg_strike_currency = 24;
      bool leg_opt_attribute = 25;
      bool leg_contract_multiplier = 26;
      bool leg_coupon_rate = 27;
      bool leg_security_exchange = 28;
      bool leg_issuer = 29;
      bool encoded_leg_issuer_len = 30;
      bool encoded_leg_issuer = 31;
      bool leg_security_desc = 32;
      bool encoded_leg_security_desc_len = 33;
      bool encoded_leg_security_desc = 34;
      bool leg_ratio_qty = 35;
      bool leg_side = 36;
      bool leg_currency = 37;
      bool leg_pool = 38;
      bool leg_dated_date = 39;
      bool leg_contract_settl_month = 40;
      bool leg_interest_accrual_date = 41;
      bool leg_qty = 42;
      bool leg_swap_type = 43;
      bool leg_position_effect = 44;
      bool leg_covered_or_uncovered = 45;
      bool leg_ref_id = 46;
      bool leg_price = 47;
      bool leg_settl_type = 48;
      bool leg_settl_date = 49;
      bool leg_last_px = 50;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
    string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
    string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
    string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
    int32 leg_product = 6;  // tag 607, name LegProduct, type INT
    string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
    string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
    string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
    string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
    string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
    string leg_coupon_payment_date = 12;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
    string leg_issue_date = 13;  // tag 249, name LegIssueDate, type LOCALMKTDATE
    string leg_repo_collateral_security_type = 14;  // tag 250, name LegRepoCollateralSecurityType, type STRING
    int32 leg_repurchase_term = 15;  // tag 251, name LegRepurchaseTerm, type INT
    double leg_repurchase_rate = 16;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
    double leg_factor = 17;  // tag 253, name LegFactor, type FLOAT
    string leg_credit_rating = 18;  // tag 257, name LegCreditRating, type STRING
    string leg_instr_registry = 19;  // tag 599, name LegInstrRegistry, type STRING
    string leg_country_of_issue = 20;  // tag 596, name LegCountryOfIssue, type COUNTRY
    string leg_state_or_province_of_issue = 21;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
    string leg_locale_of_issue = 22;  // tag 598, name LegLocaleOfIssue, type STRING
    string leg_redemption_date = 23;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
    double leg_strike_price = 24;  // tag 612, name LegStrikePrice, type PRICE
    string leg_strike_currency = 25;  // tag 942, name LegStrikeCurrency, type CURRENCY
    int32 leg_opt_attribute = 26;  // tag 613, name LegOptAttribute, type CHAR
    double leg_contract_multiplier = 27;  // tag 614, name LegContractMultiplier, type FLOAT
    double leg_coupon_rate = 28;  // tag 615, name LegCouponRate, type PERCENTAGE
    string leg_security_exchange = 29;  // tag 616, name LegSecurityExchange, type EXCHANGE
    string leg_issuer = 30;  // tag 617, name LegIssuer, type STRING
    int32 encoded_leg_issuer_len = 31;  // tag 618, name EncodedLegIssuerLen, type LENGTH
    string encoded_leg_issuer = 32;  // tag 619, name EncodedLegIssuer, type DATA
    string leg_security_desc = 33;  // tag 620, name LegSecurityDesc, type STRING
    int32 encoded_leg_security_desc_len = 34;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
    string encoded_leg_security_desc = 35;  // tag 622, name EncodedLegSecurityDesc, type DATA
    double leg_ratio_qty = 36;  // tag 623, name LegRatioQty, type FLOAT
    int32 leg_side = 37;  // tag 624, name LegSide, type CHAR
    string leg_currency = 38;  // tag 556, name LegCurrency, type CURRENCY
    string leg_pool = 39;  // tag 740, name LegPool, type STRING
    string leg_dated_date = 40;  // tag 739, name LegDatedDate, type LOCALMKTDATE
    string leg_contract_settl_month = 41;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
    string leg_interest_accrual_date = 42;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
    double leg_qty = 43;  // tag 687, name LegQty, type QTY
    int32 leg_swap_type = 44;  // tag 690, name LegSwapType, type INT
    int32 leg_position_effect = 45;  // tag 564, name LegPositionEffect, type CHAR
    int32 leg_covered_or_uncovered = 46;  // tag 565, name LegCoveredOrUncovered, type INT
    string leg_ref_id = 47;  // tag 654, name LegRefID, type STRING
    double leg_price = 48;  // tag 566, name LegPrice, type PRICE
    int32 leg_settl_type = 49;  // tag 587, name LegSettlType, type CHAR
    string leg_settl_date = 50;  // tag 588, name LegSettlDate, type LOCALMKTDATE
    double leg_last_px = 51;  // tag 637, name LegLastPx, type PRICE
  
  // GROUPS
    repeated NoLegSecurityAltId no_leg_security_alt_id = 52;
    repeated NoLegStipulations no_leg_stipulations = 53;
    repeated NoNestedPartyIds no_nested_party_ids = 54;
  }

  message NoMiscFees {
    message FieldPresence {
      bool misc_fee_amt = 1;
      bool misc_fee_curr = 2;
      bool misc_fee_type = 3;
      bool misc_fee_basis = 4;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    double misc_fee_amt = 2;  // tag 137, name MiscFeeAmt, type AMT
    string misc_fee_curr = 3;  // tag 138, name MiscFeeCurr, type CURRENCY
    int32 misc_fee_type = 4;  // tag 139, name MiscFeeType, type CHAR
    int32 misc_fee_basis = 5;  // tag 891, name MiscFeeBasis, type INT
  }

  message FieldPresence {
    bool order_id = 1;
    bool secondary_order_id = 2;
    bool secondary_cl_ord_id = 3;
    bool secondary_exec_id = 4;
    bool cl_ord_id = 5;
    bool orig_cl_ord_id = 6;
    bool cl_ord_link_id = 7;
    bool quote_resp_id = 8;
    bool ord_status_req_id = 9;
    bool mass_status_req_id = 10;
    bool tot_num_reports = 11;
    bool last_rpt_requested = 12;
    bool trade_origination_date = 13;
    bool list_id = 14;
    bool cross_id = 15;
    bool orig_cross_id = 16;
    bool cross_type = 17;
    bool exec_id = 18;
    bool exec_ref_id = 19;
    bool exec_type = 20;
    bool ord_status = 21;
    bool working_indicator = 22;
    bool ord_rej_reason = 23;
    bool exec_restatement_reason = 24;
    bool account = 25;
    bool acct_id_source = 26;
    bool account_type = 27;
    bool day_booking_inst = 28;
    bool booking_unit = 29;
    bool prealloc_method = 30;
    bool settl_type = 31;
    bool settl_date = 32;
    bool cash_margin = 33;
    bool clearing_fee_indicator = 34;
    bool symbol = 35;
    bool symbol_sfx = 36;
    bool security_id = 37;
    bool security_id_source = 38;
    bool product = 39;
    bool cfi_code = 40;
    bool security_type = 41;
    bool security_sub_type = 42;
    bool maturity_month_year = 43;
    bool maturity_date = 44;
    bool put_or_call = 45;
    bool coupon_payment_date = 46;
    bool issue_date = 47;
    bool repo_collateral_security_type = 48;
    bool repurchase_term = 49;
    bool repurchase_rate = 50;
    bool factor = 51;
    bool credit_rating = 52;
    bool instr_registry = 53;
    bool country_of_issue = 54;
    bool state_or_province_of_issue = 55;
    bool locale_of_issue = 56;
    bool redemption_date = 57;
    bool strike_price = 58;
    bool strike_currency = 59;
    bool opt_attribute = 60;
    bool contract_multiplier = 61;
    bool coupon_rate = 62;
    bool security_exchange = 63;
    bool issuer = 64;
    bool encoded_issuer_len = 65;
    bool encoded_issuer = 66;
    bool security_desc = 67;
    bool encoded_security_desc_len = 68;
    bool encoded_security_desc = 69;
    bool pool = 70;
    bool contract_settl_month = 71;
    bool cp_program = 72;
    bool cp_reg_type = 73;
    bool dated_date = 74;
    bool interest_accrual_date = 75;
    bool agreement_desc = 76;
    bool agreement_id = 77;
    bool agreement_date = 78;
    bool agreement_currency = 79;
    bool termination_type = 80;
    bool start_date = 81;
    bool end_date = 82;
    bool delivery_type = 83;
    bool margin_ratio = 84;
    bool side = 85;
    bool qty_type = 86;
    bool order_qty = 87;
    bool cash_order_qty = 88;
    bool order_percent = 89;
    bool rounding_direction = 90;
    bool rounding_modulus = 91;
    bool ord_type = 92;
    bool price_type = 93;
    bool price = 94;
    bool stop_px = 95;
    bool peg_offset_value = 96;
    bool peg_move_type = 97;
    bool peg_offset_type = 98;
    bool peg_limit_type = 99;
    bool peg_round_direction = 100;
    bool peg_scope = 101;
    bool discretion_inst = 102;
    bool discretion_offset_value = 103;
    bool discretion_move_type = 104;
    bool discretion_offset_type = 105;
    bool discretion_limit_type = 106;
    bool discretion_round_direction = 107;
    bool discretion_scope = 108;
    bool pegged_price = 109;
    bool discretion_price = 110;
    bool target_strategy = 111;
    bool target_strategy_parameters = 112;
    bool participation_rate = 113;
    bool target_strategy_performance = 114;
    bool currency = 115;
    bool compliance_id = 116;
    bool solicited_flag = 117;
    bool time_in_force = 118;
    bool effective_time = 119;
    bool expire_date = 120;
    bool expire_time = 121;
    bool exec_inst = 122;
    bool order_capacity = 123;
    bool order_restrictions = 124;
    bool cust_order_capacity = 125;
    bool last_qty = 126;
    bool underlying_last_qty = 127;
    bool last_px = 128;
    bool underlying_last_px = 129;
    bool last_par_px = 130;
    bool last_spot_rate = 131;
    bool last_forward_points = 132;
    bool last_mkt = 133;
    bool trading_session_id = 134;
    bool trading_session_sub_id = 135;
    bool time_bracket = 136;
    bool last_capacity = 137;
    bool leaves_qty = 138;
    bool cum_qty = 139;
    bool avg_px = 140;
    bool day_order_qty = 141;
    bool day_cum_qty = 142;
    bool day_avg_px = 143;
    bool gt_booking_inst = 144;
    bool trade_date = 145;
    bool transact_time = 146;
    bool report_to_exch = 147;
    bool commission = 148;
    bool comm_type = 149;
    bool comm_currency = 150;
    bool fund_renew_waiv = 151;
    bool spread = 152;
    bool benchmark_curve_currency = 153;
    bool benchmark_curve_name = 154;
    bool benchmark_curve_point = 155;
    bool benchmark_price = 156;
    bool benchmark_price_type = 157;
    bool benchmark_security_id = 158;
    bool benchmark_security_id_source = 159;
    bool yield_type = 160;
    bool yield = 161;
    bool yield_calc_date = 162;
    bool yield_redemption_date = 163;
    bool yield_redemption_price = 164;
    bool yield_redemption_price_type = 165;
    bool gross_trade_amt = 166;
    bool num_days_interest = 167;
    bool ex_date = 168;
    bool accrued_interest_rate = 169;
    bool accrued_interest_amt = 170;
    bool interest_at_maturity = 171;
    bool end_accrued_interest_amt = 172;
    bool start_cash = 173;
    bool end_cash = 174;
    bool traded_flat_switch = 175;
    bool basis_feature_date = 176;
    bool basis_feature_price = 177;
    bool concession = 178;
    bool total_takedown = 179;
    bool net_money = 180;
    bool settl_curr_amt = 181;
    bool settl_currency = 182;
    bool settl_curr_fx_rate = 183;
    bool settl_curr_fx_rate_calc = 184;
    bool handl_inst = 185;
    bool min_qty = 186;
    bool max_floor = 187;
    bool position_effect = 188;
    bool max_show = 189;
    bool booking_type = 190;
    bool text = 191;
    bool encoded_text_len = 192;
    bool encoded_text = 193;
    bool settl_date2 = 194;
    bool order_qty2 = 195;
    bool last_forward_points2 = 196;
    bool multi_leg_reporting_type = 197;
    bool cancellation_rights = 198;
    bool money_laundering_status = 199;
    bool regist_id = 200;
    bool designation = 201;
    bool trans_bkd_time = 202;
    bool exec_valuation_point = 203;
    bool exec_price_type = 204;
    bool exec_price_adjustment = 205;
    bool priority_indicator = 206;
    bool price_improvement = 207;
    bool last_liquidity_ind = 208;
    bool copy_msg_indicator = 209;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string order_id = 5;  // tag 37, name OrderID, type STRING
  string secondary_order_id = 6;  // tag 198, name SecondaryOrderID, type STRING
  string secondary_cl_ord_id = 7;  // tag 526, name SecondaryClOrdID, type STRING
  string secondary_exec_id = 8;  // tag 527, name SecondaryExecID, type STRING
  string cl_ord_id = 9;  // tag 11, name ClOrdID, type STRING
  string orig_cl_ord_id = 10;  // tag 41, name OrigClOrdID, type STRING
  string cl_ord_link_id = 11;  // tag 583, name ClOrdLinkID, type STRING
  string quote_resp_id = 12;  // tag 693, name QuoteRespID, type STRING
  string ord_status_req_id = 13;  // tag 790, name OrdStatusReqID, type STRING
  string mass_status_req_id = 14;  // tag 584, name MassStatusReqID, type STRING
  int32 tot_num_reports = 15;  // tag 911, name TotNumReports, type INT
  bool last_rpt_requested = 16;  // tag 912, name LastRptRequested, type BOOLEAN
  string trade_origination_date = 17;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
  string list_id = 18;  // tag 66, name ListID, type STRING
  string cross_id = 19;  // tag 548, name CrossID, type STRING
  string orig_cross_id = 20;  // tag 551, name OrigCrossID, type STRING
  int32 cross_type = 21;  // tag 549, name CrossType, type INT
  string exec_id = 22;  // tag 17, name ExecID, type STRING
  string exec_ref_id = 23;  // tag 19, name ExecRefID, type STRING
  int32 exec_type = 24;  // tag 150, name ExecType, type CHAR
  int32 ord_status = 25;  // tag 39, name OrdStatus, type CHAR
  bool working_indicator = 26;  // tag 636, name WorkingIndicator, type BOOLEAN
  int32 ord_rej_reason = 27;  // tag 103, name OrdRejReason, type INT
  int32 exec_restatement_reason = 28;  // tag 378, name ExecRestatementReason, type INT
  string account = 29;  // tag 1, name Account, type STRING
  int32 acct_id_source = 30;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 31;  // tag 581, name AccountType, type INT
  int32 day_booking_inst = 32;  // tag 589, name DayBookingInst, type CHAR
  int32 booking_unit = 33;  // tag 590, name BookingUnit, type CHAR
  int32 prealloc_method = 34;  // tag 591, name PreallocMethod, type CHAR
  int32 settl_type = 35;  // tag 63, name SettlType, type CHAR
  string settl_date = 36;  // tag 64, name SettlDate, type LOCALMKTDATE
  int32 cash_margin = 37;  // tag 544, name CashMargin, type CHAR
  string clearing_fee_indicator = 38;  // tag 635, name ClearingFeeIndicator, type STRING
  string symbol = 39;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 40;  // tag 65, name SymbolSfx, type STRING
  string security_id = 41;  // tag 48, name SecurityID, type STRING
  string security_id_source = 42;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 43;  // tag 460, name Product, type INT
  string cfi_code = 44;  // tag 461, name CFICode, type STRING
  string security_type = 45;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 46;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 47;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 48;  // tag 541, name MaturityDate, type LOCALMKTDATE
  int32 put_or_call = 49;  // tag 201, name PutOrCall, type INT
  string coupon_payment_date = 50;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string issue_date = 51;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 52;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 53;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 54;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 55;  // tag 228, name Factor, type FLOAT
  string credit_rating = 56;  // tag 255, name CreditRating, type STRING
  string instr_registry = 57;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 58;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 59;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 60;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 61;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 62;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 63;  // tag 947, name StrikeCurrency, type CURRENCY
  int32 opt_attribute = 64;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 65;  // tag 231, name ContractMultiplier, type FLOAT
  double coupon_rate = 66;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 67;  // tag 207, name SecurityExchange, type EXCHANGE
  string issuer = 68;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 69;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 70;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 71;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 72;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 73;  // tag 351, name EncodedSecurityDesc, type DATA
  string pool = 74;  // tag 691, name Pool, type STRING
  string contract_settl_month = 75;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 76;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 77;  // tag 876, name CPRegType, type STRING
  string dated_date = 78;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 79;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 80;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 81;  // tag 914, name AgreementID, type STRING
  string agreement_date = 82;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 83;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 84;  // tag 788, name TerminationType, type INT
  string start_date = 85;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 86;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 87;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 88;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 89;  // tag 54, name Side, type CHAR
  int32 qty_type = 90;  // tag 854, name QtyType, type INT
  double order_qty = 91;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 92;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 93;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 94;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 95;  // tag 469, name RoundingModulus, type FLOAT
  int32 ord_type = 96;  // tag 40, name OrdType, type CHAR
  int32 price_type = 97;  // tag 423, name PriceType, type INT
  double price = 98;  // tag 44, name Price, type PRICE
  double stop_px = 99;  // tag 99, name StopPx, type PRICE
  double peg_offset_value = 100;  // tag 211, name PegOffsetValue, type FLOAT
  int32 peg_move_type = 101;  // tag 835, name PegMoveType, type INT
  int32 peg_offset_type = 102;  // tag 836, name PegOffsetType, type INT
  int32 peg_limit_type = 103;  // tag 837, name PegLimitType, type INT
  int32 peg_round_direction = 104;  // tag 838, name PegRoundDirection, type INT
  int32 peg_scope = 105;  // tag 840, name PegScope, type INT
  int32 discretion_inst = 106;  // tag 388, name DiscretionInst, type CHAR
  double discretion_offset_value = 107;  // tag 389, name DiscretionOffsetValue, type FLOAT
  int32 discretion_move_type = 108;  // tag 841, name DiscretionMoveType, type INT
  int32 discretion_offset_type = 109;  // tag 842, name DiscretionOffsetType, type INT
  int32 discretion_limit_type = 110;  // tag 843, name DiscretionLimitType, type INT
  int32 discretion_round_direction = 111;  // tag 844, name DiscretionRoundDirection, type INT
  int32 discretion_scope = 112;  // tag 846, name DiscretionScope, type INT
  double pegged_price = 113;  // tag 839, name PeggedPrice, type PRICE
  double discretion_price = 114;  // tag 845, name DiscretionPrice, type PRICE
  int32 target_strategy = 115;  // tag 847, name TargetStrategy, type INT
  string target_strategy_parameters = 116;  // tag 848, name TargetStrategyParameters, type STRING
  double participation_rate = 117;  // tag 849, name ParticipationRate, type PERCENTAGE
  double target_strategy_performance = 118;  // tag 850, name TargetStrategyPerformance, type FLOAT
  string currency = 119;  // tag 15, name Currency, type CURRENCY
  string compliance_id = 120;  // tag 376, name ComplianceID, type STRING
  bool solicited_flag = 121;  // tag 377, name SolicitedFlag, type BOOLEAN
  int32 time_in_force = 122;  // tag 59, name TimeInForce, type CHAR
  uint64 effective_time = 123;  // tag 168, name EffectiveTime, type UTCTIMESTAMP
  string expire_date = 124;  // tag 432, name ExpireDate, type LOCALMKTDATE
  uint64 expire_time = 125;  // tag 126, name ExpireTime, type UTCTIMESTAMP
  string exec_inst = 126;  // tag 18, name ExecInst, type MULTIPLEVALUESTRING
  int32 order_capacity = 127;  // tag 528, name OrderCapacity, type CHAR
  string order_restrictions = 128;  // tag 529, name OrderRestrictions, type MULTIPLEVALUESTRING
  int32 cust_order_capacity = 129;  // tag 582, name CustOrderCapacity, type INT
  double last_qty = 130;  // tag 32, name LastQty, type QTY
  double underlying_last_qty = 131;  // tag 652, name UnderlyingLastQty, type QTY
  double last_px = 132;  // tag 31, name LastPx, type PRICE
  double underlying_last_px = 133;  // tag 651, name UnderlyingLastPx, type PRICE
  double last_par_px = 134;  // tag 669, name LastParPx, type PRICE
  double last_spot_rate = 135;  // tag 194, name LastSpotRate, type PRICE
  double last_forward_points = 136;  // tag 195, name LastForwardPoints, type PRICEOFFSET
  string last_mkt = 137;  // tag 30, name LastMkt, type EXCHANGE
  string trading_session_id = 138;  // tag 336, name TradingSessionID, type STRING
  string trading_session_sub_id = 139;  // tag 625, name TradingSessionSubID, type STRING
  string time_bracket = 140;  // tag 943, name TimeBracket, type STRING
  int32 last_capacity = 141;  // tag 29, name LastCapacity, type CHAR
  double leaves_qty = 142;  // tag 151, name LeavesQty, type QTY
  double cum_qty = 143;  // tag 14, name CumQty, type QTY
  double avg_px = 144;  // tag 6, name AvgPx, type PRICE
  double day_order_qty = 145;  // tag 424, name DayOrderQty, type QTY
  double day_cum_qty = 146;  // tag 425, name DayCumQty, type QTY
  double day_avg_px = 147;  // tag 426, name DayAvgPx, type PRICE
  int32 gt_booking_inst = 148;  // tag 427, name GTBookingInst, type INT
  string trade_date = 149;  // tag 75, name TradeDate, type LOCALMKTDATE
  uint64 transact_time = 150;  // tag 60, name TransactTime, type UTCTIMESTAMP
  bool report_to_exch = 151;  // tag 113, name ReportToExch, type BOOLEAN
  double commission = 152;  // tag 12, name Commission, type AMT
  int32 comm_type = 153;  // tag 13, name CommType, type CHAR
  string comm_currency = 154;  // tag 479, name CommCurrency, type CURRENCY
  int32 fund_renew_waiv = 155;  // tag 497, name FundRenewWaiv, type CHAR
  double spread = 156;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 157;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 158;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 159;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 160;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 161;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 162;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 163;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 164;  // tag 235, name YieldType, type STRING
  double yield = 165;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 166;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 167;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 168;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 169;  // tag 698, name YieldRedemptionPriceType, type INT
  double gross_trade_amt = 170;  // tag 381, name GrossTradeAmt, type AMT
  int32 num_days_interest = 171;  // tag 157, name NumDaysInterest, type INT
  string ex_date = 172;  // tag 230, name ExDate, type LOCALMKTDATE
  double accrued_interest_rate = 173;  // tag 158, name AccruedInterestRate, type PERCENTAGE
  double accrued_interest_amt = 174;  // tag 159, name AccruedInterestAmt, type AMT
  double interest_at_maturity = 175;  // tag 738, name InterestAtMaturity, type AMT
  double end_accrued_interest_amt = 176;  // tag 920, name EndAccruedInterestAmt, type AMT
  double start_cash = 177;  // tag 921, name StartCash, type AMT
  double end_cash = 178;  // tag 922, name EndCash, type AMT
  bool traded_flat_switch = 179;  // tag 258, name TradedFlatSwitch, type BOOLEAN
  string basis_feature_date = 180;  // tag 259, name BasisFeatureDate, type LOCALMKTDATE
  double basis_feature_price = 181;  // tag 260, name BasisFeaturePrice, type PRICE
  double concession = 182;  // tag 238, name Concession, type AMT
  double total_takedown = 183;  // tag 237, name TotalTakedown, type AMT
  double net_money = 184;  // tag 118, name NetMoney, type AMT
  double settl_curr_amt = 185;  // tag 119, name SettlCurrAmt, type AMT
  string settl_currency = 186;  // tag 120, name SettlCurrency, type CURRENCY
  double settl_curr_fx_rate = 187;  // tag 155, name SettlCurrFxRate, type FLOAT
  int32 settl_curr_fx_rate_calc = 188;  // tag 156, name SettlCurrFxRateCalc, type CHAR
  int32 handl_inst = 189;  // tag 21, name HandlInst, type CHAR
  double min_qty = 190;  // tag 110, name MinQty, type QTY
  double max_floor = 191;  // tag 111, name MaxFloor, type QTY
  int32 position_effect = 192;  // tag 77, name PositionEffect, type CHAR
  double max_show = 193;  // tag 210, name MaxShow, type QTY
  int32 booking_type = 194;  // tag 775, name BookingType, type INT
  string text = 195;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 196;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 197;  // tag 355, name EncodedText, type DATA
  string settl_date2 = 198;  // tag 193, name SettlDate2, type LOCALMKTDATE
  double order_qty2 = 199;  // tag 192, name OrderQty2, type QTY
  double last_forward_points2 = 200;  // tag 641, name LastForwardPoints2, type PRICEOFFSET
  int32 multi_leg_reporting_type = 201;  // tag 442, name MultiLegReportingType, type CHAR
  int32 cancellation_rights = 202;  // tag 480, name CancellationRights, type CHAR
  int32 money_laundering_status = 203;  // tag 481, name MoneyLaunderingStatus, type CHAR
  string regist_id = 204;  // tag 513, name RegistID, type STRING
  string designation = 205;  // tag 494, name Designation, type STRING
  uint64 trans_bkd_time = 206;  // tag 483, name TransBkdTime, type UTCTIMESTAMP
  uint64 exec_valuation_point = 207;  // tag 515, name ExecValuationPoint, type UTCTIMESTAMP
  int32 exec_price_type = 208;  // tag 484, name ExecPriceType, type CHAR
  double exec_price_adjustment = 209;  // tag 485, name ExecPriceAdjustment, type FLOAT
  int32 priority_indicator = 210;  // tag 638, name PriorityIndicator, type INT
  double price_improvement = 211;  // tag 639, name PriceImprovement, type PRICEOFFSET
  int32 last_liquidity_ind = 212;  // tag 851, name LastLiquidityInd, type INT
  bool copy_msg_indicator = 213;  // tag 797, name CopyMsgIndicator, type BOOLEAN

  // GROUPS
  repeated NoPartyIds no_party_ids = 214;
  repeated NoContraBrokers no_contra_brokers = 215;
  repeated NoSecurityAltId no_security_alt_id = 216;
  repeated NoEvents no_events = 217;
  repeated NoUnderlyings no_underlyings = 218;
  repeated NoStipulations no_stipulations = 219;
  repeated NoContAmts no_cont_amts = 220;
  repeated NoLegs no_legs = 221;
  repeated NoMiscFees no_misc_fees = 222;
}

message Logout {
  message FieldPresence {
    bool text = 1;
    bool encoded_text_len = 2;
    bool encoded_text = 3;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string text = 5;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 6;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 7;  // tag 355, name EncodedText, type DATA
}

message IndicationOfInterest {
  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_px = 3;
      bool event_text = 4;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    double event_px = 4;  // tag 867, name EventPx, type PRICE
    string event_text = 5;  // tag 868, name EventText, type STRING
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_put_or_call = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_issue_date = 13;
      bool underlying_repo_collateral_security_type = 14;
      bool underlying_repurchase_term = 15;
      bool underlying_repurchase_rate = 16;
      bool underlying_factor = 17;
      bool underlying_credit_rating = 18;
      bool underlying_instr_registry = 19;
      bool underlying_country_of_issue = 20;
      bool underlying_state_or_province_of_issue = 21;
      bool underlying_locale_of_issue = 22;
      bool underlying_redemption_date = 23;
      bool underlying_strike_price = 24;
      bool underlying_strike_currency = 25;
      bool underlying_opt_attribute = 26;
      bool underlying_contract_multiplier = 27;
      bool underlying_coupon_rate = 28;
      bool underlying_security_exchange = 29;
      bool underlying_issuer = 30;
      bool encoded_underlying_issuer_len = 31;
      bool encoded_underlying_issuer = 32;
      bool underlying_security_desc = 33;
      bool encoded_underlying_security_desc_len = 34;
      bool encoded_underlying_security_desc = 35;
      bool underlying_cp_program = 36;
      bool underlying_cp_reg_type = 37;
      bool underlying_currency = 38;
      bool underlying_qty = 39;
      bool underlying_px = 40;
      bool underlying_dirty_price = 41;
      bool underlying_end_price = 42;
      bool underlying_start_value = 43;
      bool underlying_current_value = 44;
      bool underlying_end_value = 45;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
    string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
    double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
    repeated NoUnderlyingStips no_underlying_stips = 48;
  }

  message NoStipulations {
    message FieldPresence {
      bool stipulation_type = 1;
      bool stipulation_value = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
    string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
  }

  message NoLegs {
    message NoLegSecurityAltId {
      message FieldPresence {
        bool leg_security_alt_id = 1;
        bool leg_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
      string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
    }

    message NoLegStipulations {
      message FieldPresence {
        bool leg_stipulation_type = 1;
        bool leg_stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
      string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
    }

    message FieldPresence {
      bool leg_symbol = 1;
      bool leg_symbol_sfx = 2;
      bool leg_security_id = 3;
      bool leg_security_id_source = 4;
      bool leg_product = 5;
      bool leg_cfi_code = 6;
      bool leg_security_type = 7;
      bool leg_security_sub_type = 8;
      bool leg_maturity_month_year = 9;
      bool leg_maturity_date = 10;
      bool leg_coupon_payment_date = 11;
      bool leg_issue_date = 12;
      bool leg_repo_collateral_security_type = 13;
      bool leg_repurchase_term = 14;
      bool leg_repurchase_rate = 15;
      bool leg_factor = 16;
      bool leg_credit_rating = 17;
      bool leg_instr_registry = 18;
      bool leg_country_of_issue = 19;
      bool leg_state_or_province_of_issue = 20;
      bool leg_locale_of_issue = 21;
      bool leg_redemption_date = 22;
      bool leg_strike_price = 23;
      bool leg_strike_currency = 24;
      bool leg_opt_attribute = 25;
      bool leg_contract_multiplier = 26;
      bool leg_coupon_rate = 27;
      bool leg_security_exchange = 28;
      bool leg_issuer = 29;
      bool encoded_leg_issuer_len = 30;
      bool encoded_leg_issuer = 31;
      bool leg_security_desc = 32;
      bool encoded_leg_security_desc_len = 33;
      bool encoded_leg_security_desc = 34;
      bool leg_ratio_qty = 35;
      bool leg_side = 36;
      bool leg_currency = 37;
      bool leg_pool = 38;
      bool leg_dated_date = 39;
      bool leg_contract_settl_month = 40;
      bool leg_interest_accrual_date = 41;
      bool leg_ioi_qty = 42;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
    string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
    string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
    string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
    int32 leg_product = 6;  // tag 607, name LegProduct, type INT
    string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
    string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
    string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
    string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
    string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
    string leg_coupon_payment_date = 12;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
    string leg_issue_date = 13;  // tag 249, name LegIssueDate, type LOCALMKTDATE
    string leg_repo_collateral_security_type = 14;  // tag 250, name LegRepoCollateralSecurityType, type STRING
    int32 leg_repurchase_term = 15;  // tag 251, name LegRepurchaseTerm, type INT
    double leg_repurchase_rate = 16;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
    double leg_factor = 17;  // tag 253, name LegFactor, type FLOAT
    string leg_credit_rating = 18;  // tag 257, name LegCreditRating, type STRING
    string leg_instr_registry = 19;  // tag 599, name LegInstrRegistry, type STRING
    string leg_country_of_issue = 20;  // tag 596, name LegCountryOfIssue, type COUNTRY
    string leg_state_or_province_of_issue = 21;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
    string leg_locale_of_issue = 22;  // tag 598, name LegLocaleOfIssue, type STRING
    string leg_redemption_date = 23;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
    double leg_strike_price = 24;  // tag 612, name LegStrikePrice, type PRICE
    string leg_strike_currency = 25;  // tag 942, name LegStrikeCurrency, type CURRENCY
    int32 leg_opt_attribute = 26;  // tag 613, name LegOptAttribute, type CHAR
    double leg_contract_multiplier = 27;  // tag 614, name LegContractMultiplier, type FLOAT
    double leg_coupon_rate = 28;  // tag 615, name LegCouponRate, type PERCENTAGE
    string leg_security_exchange = 29;  // tag 616, name LegSecurityExchange, type EXCHANGE
    string leg_issuer = 30;  // tag 617, name LegIssuer, type STRING
    int32 encoded_leg_issuer_len = 31;  // tag 618, name EncodedLegIssuerLen, type LENGTH
    string encoded_leg_issuer = 32;  // tag 619, name EncodedLegIssuer, type DATA
    string leg_security_desc = 33;  // tag 620, name LegSecurityDesc, type STRING
    int32 encoded_leg_security_desc_len = 34;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
    string encoded_leg_security_desc = 35;  // tag 622, name EncodedLegSecurityDesc, type DATA
    double leg_ratio_qty = 36;  // tag 623, name LegRatioQty, type FLOAT
    int32 leg_side = 37;  // tag 624, name LegSide, type CHAR
    string leg_currency = 38;  // tag 556, name LegCurrency, type CURRENCY
    string leg_pool = 39;  // tag 740, name LegPool, type STRING
    string leg_dated_date = 40;  // tag 739, name LegDatedDate, type LOCALMKTDATE
    string leg_contract_settl_month = 41;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
    string leg_interest_accrual_date = 42;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
    string leg_ioi_qty = 43;  // tag 682, name LegIOIQty, type STRING
  
  // GROUPS
    repeated NoLegSecurityAltId no_leg_security_alt_id = 44;
    repeated NoLegStipulations no_leg_stipulations = 45;
  }

  message NoIoiQualifiers {
    message FieldPresence {
      bool ioi_qualifier = 1;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 ioi_qualifier = 2;  // tag 104, name IOIQualifier, type CHAR
  }

  message NoRoutingIds {
    message FieldPresence {
      bool routing_type = 1;
      bool routing_id = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 routing_type = 2;  // tag 216, name RoutingType, type INT
    string routing_id = 3;  // tag 217, name RoutingID, type STRING
  }

  message FieldPresence {
    bool ioi_id = 1;
    bool ioi_trans_type = 2;
    bool ioi_ref_id = 3;
    bool symbol = 4;
    bool symbol_sfx = 5;
    bool security_id = 6;
    bool security_id_source = 7;
    bool product = 8;
    bool cfi_code = 9;
    bool security_type = 10;
    bool security_sub_type = 11;
    bool maturity_month_year = 12;
    bool maturity_date = 13;
    bool put_or_call = 14;
    bool coupon_payment_date = 15;
    bool issue_date = 16;
    bool repo_collateral_security_type = 17;
    bool repurchase_term = 18;
    bool repurchase_rate = 19;
    bool factor = 20;
    bool credit_rating = 21;
    bool instr_registry = 22;
    bool country_of_issue = 23;
    bool state_or_province_of_issue = 24;
    bool locale_of_issue = 25;
    bool redemption_date = 26;
    bool strike_price = 27;
    bool strike_currency = 28;
    bool opt_attribute = 29;
    bool contract_multiplier = 30;
    bool coupon_rate = 31;
    bool security_exchange = 32;
    bool issuer = 33;
    bool encoded_issuer_len = 34;
    bool encoded_issuer = 35;
    bool security_desc = 36;
    bool encoded_security_desc_len = 37;
    bool encoded_security_desc = 38;
    bool pool = 39;
    bool contract_settl_month = 40;
    bool cp_program = 41;
    bool cp_reg_type = 42;
    bool dated_date = 43;
    bool interest_accrual_date = 44;
    bool agreement_desc = 45;
    bool agreement_id = 46;
    bool agreement_date = 47;
    bool agreement_currency = 48;
    bool termination_type = 49;
    bool start_date = 50;
    bool end_date = 51;
    bool delivery_type = 52;
    bool margin_ratio = 53;
    bool side = 54;
    bool qty_type = 55;
    bool order_qty = 56;
    bool cash_order_qty = 57;
    bool order_percent = 58;
    bool rounding_direction = 59;
    bool rounding_modulus = 60;
    bool ioi_qty = 61;
    bool currency = 62;
    bool price_type = 63;
    bool price = 64;
    bool valid_until_time = 65;
    bool ioi_qlty_ind = 66;
    bool ioi_natural_flag = 67;
    bool text = 68;
    bool encoded_text_len = 69;
    bool encoded_text = 70;
    bool transact_time = 71;
    bool url_link = 72;
    bool spread = 73;
    bool benchmark_curve_currency = 74;
    bool benchmark_curve_name = 75;
    bool benchmark_curve_point = 76;
    bool benchmark_price = 77;
    bool benchmark_price_type = 78;
    bool benchmark_security_id = 79;
    bool benchmark_security_id_source = 80;
    bool yield_type = 81;
    bool yield = 82;
    bool yield_calc_date = 83;
    bool yield_redemption_date = 84;
    bool yield_redemption_price = 85;
    bool yield_redemption_price_type = 86;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string ioi_id = 5;  // tag 23, name IOIID, type STRING
  int32 ioi_trans_type = 6;  // tag 28, name IOITransType, type CHAR
  string ioi_ref_id = 7;  // tag 26, name IOIRefID, type STRING
  string symbol = 8;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 9;  // tag 65, name SymbolSfx, type STRING
  string security_id = 10;  // tag 48, name SecurityID, type STRING
  string security_id_source = 11;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 12;  // tag 460, name Product, type INT
  string cfi_code = 13;  // tag 461, name CFICode, type STRING
  string security_type = 14;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 15;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 16;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 17;  // tag 541, name MaturityDate, type LOCALMKTDATE
  int32 put_or_call = 18;  // tag 201, name PutOrCall, type INT
  string coupon_payment_date = 19;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string issue_date = 20;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 21;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 22;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 23;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 24;  // tag 228, name Factor, type FLOAT
  string credit_rating = 25;  // tag 255, name CreditRating, type STRING
  string instr_registry = 26;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 27;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 28;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 29;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 30;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 31;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 32;  // tag 947, name StrikeCurrency, type CURRENCY
  int32 opt_attribute = 33;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 34;  // tag 231, name ContractMultiplier, type FLOAT
  double coupon_rate = 35;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 36;  // tag 207, name SecurityExchange, type EXCHANGE
  string issuer = 37;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 38;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 39;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 40;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 41;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 42;  // tag 351, name EncodedSecurityDesc, type DATA
  string pool = 43;  // tag 691, name Pool, type STRING
  string contract_settl_month = 44;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 45;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 46;  // tag 876, name CPRegType, type STRING
  string dated_date = 47;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 48;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 49;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 50;  // tag 914, name AgreementID, type STRING
  string agreement_date = 51;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 52;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 53;  // tag 788, name TerminationType, type INT
  string start_date = 54;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 55;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 56;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 57;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 58;  // tag 54, name Side, type CHAR
  int32 qty_type = 59;  // tag 854, name QtyType, type INT
  double order_qty = 60;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 61;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 62;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 63;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 64;  // tag 469, name RoundingModulus, type FLOAT
  string ioi_qty = 65;  // tag 27, name IOIQty, type STRING
  string currency = 66;  // tag 15, name Currency, type CURRENCY
  int32 price_type = 67;  // tag 423, name PriceType, type INT
  double price = 68;  // tag 44, name Price, type PRICE
  uint64 valid_until_time = 69;  // tag 62, name ValidUntilTime, type UTCTIMESTAMP
  int32 ioi_qlty_ind = 70;  // tag 25, name IOIQltyInd, type CHAR
  bool ioi_natural_flag = 71;  // tag 130, name IOINaturalFlag, type BOOLEAN
  string text = 72;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 73;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 74;  // tag 355, name EncodedText, type DATA
  uint64 transact_time = 75;  // tag 60, name TransactTime, type UTCTIMESTAMP
  string url_link = 76;  // tag 149, name URLLink, type STRING
  double spread = 77;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 78;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 79;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 80;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 81;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 82;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 83;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 84;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 85;  // tag 235, name YieldType, type STRING
  double yield = 86;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 87;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 88;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 89;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 90;  // tag 698, name YieldRedemptionPriceType, type INT

  // GROUPS
  repeated NoSecurityAltId no_security_alt_id = 91;
  repeated NoEvents no_events = 92;
  repeated NoUnderlyings no_underlyings = 93;
  repeated NoStipulations no_stipulations = 94;
  repeated NoLegs no_legs = 95;
  repeated NoIoiQualifiers no_ioi_qualifiers = 96;
  repeated NoRoutingIds no_routing_ids = 97;
}

message Logon {
  message NoMsgTypes {
    message FieldPresence {
      bool ref_msg_type = 1;
      bool msg_direction = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string ref_msg_type = 2;  // tag 372, name RefMsgType, type STRING
    int32 msg_direction = 3;  // tag 385, name MsgDirection, type CHAR
  }

  message FieldPresence {
    bool encrypt_method = 1;
    bool heart_bt_int = 2;
    bool raw_data_length = 3;
    bool raw_data = 4;
    bool reset_seq_num_flag = 5;
    bool next_expected_msg_seq_num = 6;
    bool max_message_size = 7;
    bool test_message_indicator = 8;
    bool username = 9;
    bool password = 10;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  int32 encrypt_method = 5;  // tag 98, name EncryptMethod, type INT
  int32 heart_bt_int = 6;  // tag 108, name HeartBtInt, type INT
  int32 raw_data_length = 7;  // tag 95, name RawDataLength, type LENGTH
  string raw_data = 8;  // tag 96, name RawData, type DATA
  bool reset_seq_num_flag = 9;  // tag 141, name ResetSeqNumFlag, type BOOLEAN
  int32 next_expected_msg_seq_num = 10;  // tag 789, name NextExpectedMsgSeqNum, type SEQNUM
  int32 max_message_size = 11;  // tag 383, name MaxMessageSize, type LENGTH
  bool test_message_indicator = 12;  // tag 464, name TestMessageIndicator, type BOOLEAN
  string username = 13;  // tag 553, name Username, type STRING
  string password = 14;  // tag 554, name Password, type STRING

  // GROUPS
  repeated NoMsgTypes no_msg_types = 15;
}

message QuoteRequest {
  message NoRelatedSym {
    message NoSecurityAltId {
      message FieldPresence {
        bool security_alt_id = 1;
        bool security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
      string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
    }

    message NoEvents {
      message FieldPresence {
        bool event_type = 1;
        bool event_date = 2;
        bool event_px = 3;
        bool event_text = 4;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 event_type = 2;  // tag 865, name EventType, type INT
      string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
      double event_px = 4;  // tag 867, name EventPx, type PRICE
      string event_text = 5;  // tag 868, name EventText, type STRING
    }

    message NoUnderlyings {
      message NoUnderlyingSecurityAltId {
        message FieldPresence {
          bool underlying_security_alt_id = 1;
          bool underlying_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
        string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
      }

      message NoUnderlyingStips {
        message FieldPresence {
          bool underlying_stip_type = 1;
          bool underlying_stip_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
        string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
      }

      message FieldPresence {
        bool underlying_symbol = 1;
        bool underlying_symbol_sfx = 2;
        bool underlying_security_id = 3;
        bool underlying_security_id_source = 4;
        bool underlying_product = 5;
        bool underlying_cfi_code = 6;
        bool underlying_security_type = 7;
        bool underlying_security_sub_type = 8;
        bool underlying_maturity_month_year = 9;
        bool underlying_maturity_date = 10;
        bool underlying_put_or_call = 11;
        bool underlying_coupon_payment_date = 12;
        bool underlying_issue_date = 13;
        bool underlying_repo_collateral_security_type = 14;
        bool underlying_repurchase_term = 15;
        bool underlying_repurchase_rate = 16;
        bool underlying_factor = 17;
        bool underlying_credit_rating = 18;
        bool underlying_instr_registry = 19;
        bool underlying_country_of_issue = 20;
        bool underlying_state_or_province_of_issue = 21;
        bool underlying_locale_of_issue = 22;
        bool underlying_redemption_date = 23;
        bool underlying_strike_price = 24;
        bool underlying_strike_currency = 25;
        bool underlying_opt_attribute = 26;
        bool underlying_contract_multiplier = 27;
        bool underlying_coupon_rate = 28;
        bool underlying_security_exchange = 29;
        bool underlying_issuer = 30;
        bool encoded_underlying_issuer_len = 31;
        bool encoded_underlying_issuer = 32;
        bool underlying_security_desc = 33;
        bool encoded_underlying_security_desc_len = 34;
        bool encoded_underlying_security_desc = 35;
        bool underlying_cp_program = 36;
        bool underlying_cp_reg_type = 37;
        bool underlying_currency = 38;
        bool underlying_qty = 39;
        bool underlying_px = 40;
        bool underlying_dirty_price = 41;
        bool underlying_end_price = 42;
        bool underlying_start_value = 43;
        bool underlying_current_value = 44;
        bool underlying_end_value = 45;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
      string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
      string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
      string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
      int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
      string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
      string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
      string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
      string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
      string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
      int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
      string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
      string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
      string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
      int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
      double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
      double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
      string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
      string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
      string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
      string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
      string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
      string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
      double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
      string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
      int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
      double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
      double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
      string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
      string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
      int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
      string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
      string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
      int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
      string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
      string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
      string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
      string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
      double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
      double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
      double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
      double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
      double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
      double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
      double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
    
  // GROUPS
      repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
      repeated NoUnderlyingStips no_underlying_stips = 48;
    }

    message NoStipulations {
      message FieldPresence {
        bool stipulation_type = 1;
        bool stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
      string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
    }

    message NoLegs {
      message NoLegSecurityAltId {
        message FieldPresence {
          bool leg_security_alt_id = 1;
          bool leg_security_alt_id_source = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
        string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
      }

      message NoLegStipulations {
        message FieldPresence {
          bool leg_stipulation_type = 1;
          bool leg_stipulation_value = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
        string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
      }

      message NoNestedPartyIds {
        message NoNestedPartySubIds {
          message FieldPresence {
            bool nested_party_sub_id = 1;
            bool nested_party_sub_id_type = 2;
          }

          // FIELDS
          FieldPresence field_presence = 1;
          string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
          int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
        }

        message FieldPresence {
          bool nested_party_id = 1;
          bool nested_party_id_source = 2;
          bool nested_party_role = 3;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
        int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
        int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
      
  // GROUPS
        repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
      }

      message FieldPresence {
        bool leg_symbol = 1;
        bool leg_symbol_sfx = 2;
        bool leg_security_id = 3;
        bool leg_security_id_source = 4;
        bool leg_product = 5;
        bool leg_cfi_code = 6;
        bool leg_security_type = 7;
        bool leg_security_sub_type = 8;
        bool leg_maturity_month_year = 9;
        bool leg_maturity_date = 10;
        bool leg_coupon_payment_date = 11;
        bool leg_issue_date = 12;
        bool leg_repo_collateral_security_type = 13;
        bool leg_repurchase_term = 14;
        bool leg_repurchase_rate = 15;
        bool leg_factor = 16;
        bool leg_credit_rating = 17;
        bool leg_instr_registry = 18;
        bool leg_country_of_issue = 19;
        bool leg_state_or_province_of_issue = 20;
        bool leg_locale_of_issue = 21;
        bool leg_redemption_date = 22;
        bool leg_strike_price = 23;
        bool leg_strike_currency = 24;
        bool leg_opt_attribute = 25;
        bool leg_contract_multiplier = 26;
        bool leg_coupon_rate = 27;
        bool leg_security_exchange = 28;
        bool leg_issuer = 29;
        bool encoded_leg_issuer_len = 30;
        bool encoded_leg_issuer = 31;
        bool leg_security_desc = 32;
        bool encoded_leg_security_desc_len = 33;
        bool encoded_leg_security_desc = 34;
        bool leg_ratio_qty = 35;
        bool leg_side = 36;
        bool leg_currency = 37;
        bool leg_pool = 38;
        bool leg_dated_date = 39;
        bool leg_contract_settl_month = 40;
        bool leg_interest_accrual_date = 41;
        bool leg_qty = 42;
        bool leg_swap_type = 43;
        bool leg_settl_type = 44;
        bool leg_settl_date = 45;
        bool leg_benchmark_curve_currency = 46;
        bool leg_benchmark_curve_name = 47;
        bool leg_benchmark_curve_point = 48;
        bool leg_benchmark_price = 49;
        bool leg_benchmark_price_type = 50;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
      string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
      string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
      string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
      int32 leg_product = 6;  // tag 607, name LegProduct, type INT
      string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
      string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
      string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
      string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
      string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
      string leg_coupon_payment_date = 12;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
      string leg_issue_date = 13;  // tag 249, name LegIssueDate, type LOCALMKTDATE
      string leg_repo_collateral_security_type = 14;  // tag 250, name LegRepoCollateralSecurityType, type STRING
      int32 leg_repurchase_term = 15;  // tag 251, name LegRepurchaseTerm, type INT
      double leg_repurchase_rate = 16;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
      double leg_factor = 17;  // tag 253, name LegFactor, type FLOAT
      string leg_credit_rating = 18;  // tag 257, name LegCreditRating, type STRING
      string leg_instr_registry = 19;  // tag 599, name LegInstrRegistry, type STRING
      string leg_country_of_issue = 20;  // tag 596, name LegCountryOfIssue, type COUNTRY
      string leg_state_or_province_of_issue = 21;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
      string leg_locale_of_issue = 22;  // tag 598, name LegLocaleOfIssue, type STRING
      string leg_redemption_date = 23;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
      double leg_strike_price = 24;  // tag 612, name LegStrikePrice, type PRICE
      string leg_strike_currency = 25;  // tag 942, name LegStrikeCurrency, type CURRENCY
      int32 leg_opt_attribute = 26;  // tag 613, name LegOptAttribute, type CHAR
      double leg_contract_multiplier = 27;  // tag 614, name LegContractMultiplier, type FLOAT
      double leg_coupon_rate = 28;  // tag 615, name LegCouponRate, type PERCENTAGE
      string leg_security_exchange = 29;  // tag 616, name LegSecurityExchange, type EXCHANGE
      string leg_issuer = 30;  // tag 617, name LegIssuer, type STRING
      int32 encoded_leg_issuer_len = 31;  // tag 618, name EncodedLegIssuerLen, type LENGTH
      string encoded_leg_issuer = 32;  // tag 619, name EncodedLegIssuer, type DATA
      string leg_security_desc = 33;  // tag 620, name LegSecurityDesc, type STRING
      int32 encoded_leg_security_desc_len = 34;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
      string encoded_leg_security_desc = 35;  // tag 622, name EncodedLegSecurityDesc, type DATA
      double leg_ratio_qty = 36;  // tag 623, name LegRatioQty, type FLOAT
      int32 leg_side = 37;  // tag 624, name LegSide, type CHAR
      string leg_currency = 38;  // tag 556, name LegCurrency, type CURRENCY
      string leg_pool = 39;  // tag 740, name LegPool, type STRING
      string leg_dated_date = 40;  // tag 739, name LegDatedDate, type LOCALMKTDATE
      string leg_contract_settl_month = 41;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
      string leg_interest_accrual_date = 42;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
      double leg_qty = 43;  // tag 687, name LegQty, type QTY
      int32 leg_swap_type = 44;  // tag 690, name LegSwapType, type INT
      int32 leg_settl_type = 45;  // tag 587, name LegSettlType, type CHAR
      string leg_settl_date = 46;  // tag 588, name LegSettlDate, type LOCALMKTDATE
      string leg_benchmark_curve_currency = 47;  // tag 676, name LegBenchmarkCurveCurrency, type CURRENCY
      string leg_benchmark_curve_name = 48;  // tag 677, name LegBenchmarkCurveName, type STRING
      string leg_benchmark_curve_point = 49;  // tag 678, name LegBenchmarkCurvePoint, type STRING
      double leg_benchmark_price = 50;  // tag 679, name LegBenchmarkPrice, type PRICE
      int32 leg_benchmark_price_type = 51;  // tag 680, name LegBenchmarkPriceType, type INT
    
  // GROUPS
      repeated NoLegSecurityAltId no_leg_security_alt_id = 52;
      repeated NoLegStipulations no_leg_stipulations = 53;
      repeated NoNestedPartyIds no_nested_party_ids = 54;
    }

    message NoQuoteQualifiers {
      message FieldPresence {
        bool quote_qualifier = 1;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      int32 quote_qualifier = 2;  // tag 695, name QuoteQualifier, type CHAR
    }

    message NoPartyIds {
      message NoPartySubIds {
        message FieldPresence {
          bool party_sub_id = 1;
          bool party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
        int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
      }

      message FieldPresence {
        bool party_id = 1;
        bool party_id_source = 2;
        bool party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_id = 2;  // tag 448, name PartyID, type STRING
      int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
      int32 party_role = 4;  // tag 452, name PartyRole, type INT
    
  // GROUPS
      repeated NoPartySubIds no_party_sub_ids = 5;
    }

    message FieldPresence {
      bool symbol = 1;
      bool symbol_sfx = 2;
      bool security_id = 3;
      bool security_id_source = 4;
      bool product = 5;
      bool cfi_code = 6;
      bool security_type = 7;
      bool security_sub_type = 8;
      bool maturity_month_year = 9;
      bool maturity_date = 10;
      bool put_or_call = 11;
      bool coupon_payment_date = 12;
      bool issue_date = 13;
      bool repo_collateral_security_type = 14;
      bool repurchase_term = 15;
      bool repurchase_rate = 16;
      bool factor = 17;
      bool credit_rating = 18;
      bool instr_registry = 19;
      bool country_of_issue = 20;
      bool state_or_province_of_issue = 21;
      bool locale_of_issue = 22;
      bool redemption_date = 23;
      bool strike_price = 24;
      bool strike_currency = 25;
      bool opt_attribute = 26;
      bool contract_multiplier = 27;
      bool coupon_rate = 28;
      bool security_exchange = 29;
      bool issuer = 30;
      bool encoded_issuer_len = 31;
      bool encoded_issuer = 32;
      bool security_desc = 33;
      bool encoded_security_desc_len = 34;
      bool encoded_security_desc = 35;
      bool pool = 36;
      bool contract_settl_month = 37;
      bool cp_program = 38;
      bool cp_reg_type = 39;
      bool dated_date = 40;
      bool interest_accrual_date = 41;
      bool agreement_desc = 42;
      bool agreement_id = 43;
      bool agreement_date = 44;
      bool agreement_currency = 45;
      bool termination_type = 46;
      bool start_date = 47;
      bool end_date = 48;
      bool delivery_type = 49;
      bool margin_ratio = 50;
      bool prev_close_px = 51;
      bool quote_request_type = 52;
      bool quote_type = 53;
      bool trading_session_id = 54;
      bool trading_session_sub_id = 55;
      bool trade_origination_date = 56;
      bool side = 57;
      bool qty_type = 58;
      bool order_qty = 59;
      bool cash_order_qty = 60;
      bool order_percent = 61;
      bool rounding_direction = 62;
      bool rounding_modulus = 63;
      bool settl_type = 64;
      bool settl_date = 65;
      bool settl_date2 = 66;
      bool order_qty2 = 67;
      bool currency = 68;
      bool account = 69;
      bool acct_id_source = 70;
      bool account_type = 71;
      bool quote_price_type = 72;
      bool ord_type = 73;
      bool valid_until_time = 74;
      bool expire_time = 75;
      bool transact_time = 76;
      bool spread = 77;
      bool benchmark_curve_currency = 78;
      bool benchmark_curve_name = 79;
      bool benchmark_curve_point = 80;
      bool benchmark_price = 81;
      bool benchmark_price_type = 82;
      bool benchmark_security_id = 83;
      bool benchmark_security_id_source = 84;
      bool price_type = 85;
      bool price = 86;
      bool price2 = 87;
      bool yield_type = 88;
      bool yield = 89;
      bool yield_calc_date = 90;
      bool yield_redemption_date = 91;
      bool yield_redemption_price = 92;
      bool yield_redemption_price_type = 93;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string symbol = 2;  // tag 55, name Symbol, type STRING
    string symbol_sfx = 3;  // tag 65, name SymbolSfx, type STRING
    string security_id = 4;  // tag 48, name SecurityID, type STRING
    string security_id_source = 5;  // tag 22, name SecurityIDSource, type STRING
    int32 product = 6;  // tag 460, name Product, type INT
    string cfi_code = 7;  // tag 461, name CFICode, type STRING
    string security_type = 8;  // tag 167, name SecurityType, type STRING
    string security_sub_type = 9;  // tag 762, name SecuritySubType, type STRING
    string maturity_month_year = 10;  // tag 200, name MaturityMonthYear, type MONTHYEAR
    string maturity_date = 11;  // tag 541, name MaturityDate, type LOCALMKTDATE
    int32 put_or_call = 12;  // tag 201, name PutOrCall, type INT
    string coupon_payment_date = 13;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
    string issue_date = 14;  // tag 225, name IssueDate, type LOCALMKTDATE
    string repo_collateral_security_type = 15;  // tag 239, name RepoCollateralSecurityType, type STRING
    int32 repurchase_term = 16;  // tag 226, name RepurchaseTerm, type INT
    double repurchase_rate = 17;  // tag 227, name RepurchaseRate, type PERCENTAGE
    double factor = 18;  // tag 228, name Factor, type FLOAT
    string credit_rating = 19;  // tag 255, name CreditRating, type STRING
    string instr_registry = 20;  // tag 543, name InstrRegistry, type STRING
    string country_of_issue = 21;  // tag 470, name CountryOfIssue, type COUNTRY
    string state_or_province_of_issue = 22;  // tag 471, name StateOrProvinceOfIssue, type STRING
    string locale_of_issue = 23;  // tag 472, name LocaleOfIssue, type STRING
    string redemption_date = 24;  // tag 240, name RedemptionDate, type LOCALMKTDATE
    double strike_price = 25;  // tag 202, name StrikePrice, type PRICE
    string strike_currency = 26;  // tag 947, name StrikeCurrency, type CURRENCY
    int32 opt_attribute = 27;  // tag 206, name OptAttribute, type CHAR
    double contract_multiplier = 28;  // tag 231, name ContractMultiplier, type FLOAT
    double coupon_rate = 29;  // tag 223, name CouponRate, type PERCENTAGE
    string security_exchange = 30;  // tag 207, name SecurityExchange, type EXCHANGE
    string issuer = 31;  // tag 106, name Issuer, type STRING
    int32 encoded_issuer_len = 32;  // tag 348, name EncodedIssuerLen, type LENGTH
    string encoded_issuer = 33;  // tag 349, name EncodedIssuer, type DATA
    string security_desc = 34;  // tag 107, name SecurityDesc, type STRING
    int32 encoded_security_desc_len = 35;  // tag 350, name EncodedSecurityDescLen, type LENGTH
    string encoded_security_desc = 36;  // tag 351, name EncodedSecurityDesc, type DATA
    string pool = 37;  // tag 691, name Pool, type STRING
    string contract_settl_month = 38;  // tag 667, name ContractSettlMonth, type MONTHYEAR
    int32 cp_program = 39;  // tag 875, name CPProgram, type INT
    string cp_reg_type = 40;  // tag 876, name CPRegType, type STRING
    string dated_date = 41;  // tag 873, name DatedDate, type LOCALMKTDATE
    string interest_accrual_date = 42;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
    string agreement_desc = 43;  // tag 913, name AgreementDesc, type STRING
    string agreement_id = 44;  // tag 914, name AgreementID, type STRING
    string agreement_date = 45;  // tag 915, name AgreementDate, type LOCALMKTDATE
    string agreement_currency = 46;  // tag 918, name AgreementCurrency, type CURRENCY
    int32 termination_type = 47;  // tag 788, name TerminationType, type INT
    string start_date = 48;  // tag 916, name StartDate, type LOCALMKTDATE
    string end_date = 49;  // tag 917, name EndDate, type LOCALMKTDATE
    int32 delivery_type = 50;  // tag 919, name DeliveryType, type INT
    double margin_ratio = 51;  // tag 898, name MarginRatio, type PERCENTAGE
    double prev_close_px = 52;  // tag 140, name PrevClosePx, type PRICE
    int32 quote_request_type = 53;  // tag 303, name QuoteRequestType, type INT
    int32 quote_type = 54;  // tag 537, name QuoteType, type INT
    string trading_session_id = 55;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 56;  // tag 625, name TradingSessionSubID, type STRING
    string trade_origination_date = 57;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
    int32 side = 58;  // tag 54, name Side, type CHAR
    int32 qty_type = 59;  // tag 854, name QtyType, type INT
    double order_qty = 60;  // tag 38, name OrderQty, type QTY
    double cash_order_qty = 61;  // tag 152, name CashOrderQty, type QTY
    double order_percent = 62;  // tag 516, name OrderPercent, type PERCENTAGE
    int32 rounding_direction = 63;  // tag 468, name RoundingDirection, type CHAR
    double rounding_modulus = 64;  // tag 469, name RoundingModulus, type FLOAT
    int32 settl_type = 65;  // tag 63, name SettlType, type CHAR
    string settl_date = 66;  // tag 64, name SettlDate, type LOCALMKTDATE
    string settl_date2 = 67;  // tag 193, name SettlDate2, type LOCALMKTDATE
    double order_qty2 = 68;  // tag 192, name OrderQty2, type QTY
    string currency = 69;  // tag 15, name Currency, type CURRENCY
    string account = 70;  // tag 1, name Account, type STRING
    int32 acct_id_source = 71;  // tag 660, name AcctIDSource, type INT
    int32 account_type = 72;  // tag 581, name AccountType, type INT
    int32 quote_price_type = 73;  // tag 692, name QuotePriceType, type INT
    int32 ord_type = 74;  // tag 40, name OrdType, type CHAR
    uint64 valid_until_time = 75;  // tag 62, name ValidUntilTime, type UTCTIMESTAMP
    uint64 expire_time = 76;  // tag 126, name ExpireTime, type UTCTIMESTAMP
    uint64 transact_time = 77;  // tag 60, name TransactTime, type UTCTIMESTAMP
    double spread = 78;  // tag 218, name Spread, type PRICEOFFSET
    string benchmark_curve_currency = 79;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
    string benchmark_curve_name = 80;  // tag 221, name BenchmarkCurveName, type STRING
    string benchmark_curve_point = 81;  // tag 222, name BenchmarkCurvePoint, type STRING
    double benchmark_price = 82;  // tag 662, name BenchmarkPrice, type PRICE
    int32 benchmark_price_type = 83;  // tag 663, name BenchmarkPriceType, type INT
    string benchmark_security_id = 84;  // tag 699, name BenchmarkSecurityID, type STRING
    string benchmark_security_id_source = 85;  // tag 761, name BenchmarkSecurityIDSource, type STRING
    int32 price_type = 86;  // tag 423, name PriceType, type INT
    double price = 87;  // tag 44, name Price, type PRICE
    double price2 = 88;  // tag 640, name Price2, type PRICE
    string yield_type = 89;  // tag 235, name YieldType, type STRING
    double yield = 90;  // tag 236, name Yield, type PERCENTAGE
    string yield_calc_date = 91;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
    string yield_redemption_date = 92;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
    double yield_redemption_price = 93;  // tag 697, name YieldRedemptionPrice, type PRICE
    int32 yield_redemption_price_type = 94;  // tag 698, name YieldRedemptionPriceType, type INT
  
  // GROUPS
    repeated NoSecurityAltId no_security_alt_id = 95;
    repeated NoEvents no_events = 96;
    repeated NoUnderlyings no_underlyings = 97;
    repeated NoStipulations no_stipulations = 98;
    repeated NoLegs no_legs = 99;
    repeated NoQuoteQualifiers no_quote_qualifiers = 100;
    repeated NoPartyIds no_party_ids = 101;
  }

  message FieldPresence {
    bool quote_req_id = 1;
    bool rfq_req_id = 2;
    bool cl_ord_id = 3;
    bool order_capacity = 4;
    bool text = 5;
    bool encoded_text_len = 6;
    bool encoded_text = 7;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string quote_req_id = 5;  // tag 131, name QuoteReqID, type STRING
  string rfq_req_id = 6;  // tag 644, name RFQReqID, type STRING
  string cl_ord_id = 7;  // tag 11, name ClOrdID, type STRING
  int32 order_capacity = 8;  // tag 528, name OrderCapacity, type CHAR
  string text = 9;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 10;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 11;  // tag 355, name EncodedText, type DATA

  // GROUPS
  repeated NoRelatedSym no_related_sym = 12;
}

message OrderCancelRequest {
  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_px = 3;
      bool event_text = 4;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    double event_px = 4;  // tag 867, name EventPx, type PRICE
    string event_text = 5;  // tag 868, name EventText, type STRING
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_put_or_call = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_issue_date = 13;
      bool underlying_repo_collateral_security_type = 14;
      bool underlying_repurchase_term = 15;
      bool underlying_repurchase_rate = 16;
      bool underlying_factor = 17;
      bool underlying_credit_rating = 18;
      bool underlying_instr_registry = 19;
      bool underlying_country_of_issue = 20;
      bool underlying_state_or_province_of_issue = 21;
      bool underlying_locale_of_issue = 22;
      bool underlying_redemption_date = 23;
      bool underlying_strike_price = 24;
      bool underlying_strike_currency = 25;
      bool underlying_opt_attribute = 26;
      bool underlying_contract_multiplier = 27;
      bool underlying_coupon_rate = 28;
      bool underlying_security_exchange = 29;
      bool underlying_issuer = 30;
      bool encoded_underlying_issuer_len = 31;
      bool encoded_underlying_issuer = 32;
      bool underlying_security_desc = 33;
      bool encoded_underlying_security_desc_len = 34;
      bool encoded_underlying_security_desc = 35;
      bool underlying_cp_program = 36;
      bool underlying_cp_reg_type = 37;
      bool underlying_currency = 38;
      bool underlying_qty = 39;
      bool underlying_px = 40;
      bool underlying_dirty_price = 41;
      bool underlying_end_price = 42;
      bool underlying_start_value = 43;
      bool underlying_current_value = 44;
      bool underlying_end_value = 45;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
    string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
    double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
    repeated NoUnderlyingStips no_underlying_stips = 48;
  }

  message FieldPresence {
    bool orig_cl_ord_id = 1;
    bool order_id = 2;
    bool cl_ord_id = 3;
    bool secondary_cl_ord_id = 4;
    bool cl_ord_link_id = 5;
    bool list_id = 6;
    bool orig_ord_mod_time = 7;
    bool account = 8;
    bool acct_id_source = 9;
    bool account_type = 10;
    bool symbol = 11;
    bool symbol_sfx = 12;
    bool security_id = 13;
    bool security_id_source = 14;
    bool product = 15;
    bool cfi_code = 16;
    bool security_type = 17;
    bool security_sub_type = 18;
    bool maturity_month_year = 19;
    bool maturity_date = 20;
    bool put_or_call = 21;
    bool coupon_payment_date = 22;
    bool issue_date = 23;
    bool repo_collateral_security_type = 24;
    bool repurchase_term = 25;
    bool repurchase_rate = 26;
    bool factor = 27;
    bool credit_rating = 28;
    bool instr_registry = 29;
    bool country_of_issue = 30;
    bool state_or_province_of_issue = 31;
    bool locale_of_issue = 32;
    bool redemption_date = 33;
    bool strike_price = 34;
    bool strike_currency = 35;
    bool opt_attribute = 36;
    bool contract_multiplier = 37;
    bool coupon_rate = 38;
    bool security_exchange = 39;
    bool issuer = 40;
    bool encoded_issuer_len = 41;
    bool encoded_issuer = 42;
    bool security_desc = 43;
    bool encoded_security_desc_len = 44;
    bool encoded_security_desc = 45;
    bool pool = 46;
    bool contract_settl_month = 47;
    bool cp_program = 48;
    bool cp_reg_type = 49;
    bool dated_date = 50;
    bool interest_accrual_date = 51;
    bool agreement_desc = 52;
    bool agreement_id = 53;
    bool agreement_date = 54;
    bool agreement_currency = 55;
    bool termination_type = 56;
    bool start_date = 57;
    bool end_date = 58;
    bool delivery_type = 59;
    bool margin_ratio = 60;
    bool side = 61;
    bool transact_time = 62;
    bool order_qty = 63;
    bool cash_order_qty = 64;
    bool order_percent = 65;
    bool rounding_direction = 66;
    bool rounding_modulus = 67;
    bool compliance_id = 68;
    bool text = 69;
    bool encoded_text_len = 70;
    bool encoded_text = 71;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string orig_cl_ord_id = 5;  // tag 41, name OrigClOrdID, type STRING
  string order_id = 6;  // tag 37, name OrderID, type STRING
  string cl_ord_id = 7;  // tag 11, name ClOrdID, type STRING
  string secondary_cl_ord_id = 8;  // tag 526, name SecondaryClOrdID, type STRING
  string cl_ord_link_id = 9;  // tag 583, name ClOrdLinkID, type STRING
  string list_id = 10;  // tag 66, name ListID, type STRING
  uint64 orig_ord_mod_time = 11;  // tag 586, name OrigOrdModTime, type UTCTIMESTAMP
  string account = 12;  // tag 1, name Account, type STRING
  int32 acct_id_source = 13;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 14;  // tag 581, name AccountType, type INT
  string symbol = 15;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 16;  // tag 65, name SymbolSfx, type STRING
  string security_id = 17;  // tag 48, name SecurityID, type STRING
  string security_id_source = 18;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 19;  // tag 460, name Product, type INT
  string cfi_code = 20;  // tag 461, name CFICode, type STRING
  string security_type = 21;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 22;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 23;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 24;  // tag 541, name MaturityDate, type LOCALMKTDATE
  int32 put_or_call = 25;  // tag 201, name PutOrCall, type INT
  string coupon_payment_date = 26;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string issue_date = 27;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 28;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 29;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 30;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 31;  // tag 228, name Factor, type FLOAT
  string credit_rating = 32;  // tag 255, name CreditRating, type STRING
  string instr_registry = 33;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 34;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 35;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 36;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 37;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 38;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 39;  // tag 947, name StrikeCurrency, type CURRENCY
  int32 opt_attribute = 40;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 41;  // tag 231, name ContractMultiplier, type FLOAT
  double coupon_rate = 42;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 43;  // tag 207, name SecurityExchange, type EXCHANGE
  string issuer = 44;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 45;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 46;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 47;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 48;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 49;  // tag 351, name EncodedSecurityDesc, type DATA
  string pool = 50;  // tag 691, name Pool, type STRING
  string contract_settl_month = 51;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 52;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 53;  // tag 876, name CPRegType, type STRING
  string dated_date = 54;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 55;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 56;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 57;  // tag 914, name AgreementID, type STRING
  string agreement_date = 58;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 59;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 60;  // tag 788, name TerminationType, type INT
  string start_date = 61;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 62;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 63;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 64;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 65;  // tag 54, name Side, type CHAR
  uint64 transact_time = 66;  // tag 60, name TransactTime, type UTCTIMESTAMP
  double order_qty = 67;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 68;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 69;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 70;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 71;  // tag 469, name RoundingModulus, type FLOAT
  string compliance_id = 72;  // tag 376, name ComplianceID, type STRING
  string text = 73;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 74;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 75;  // tag 355, name EncodedText, type DATA

  // GROUPS
  repeated NoPartyIds no_party_ids = 76;
  repeated NoSecurityAltId no_security_alt_id = 77;
  repeated NoEvents no_events = 78;
  repeated NoUnderlyings no_underlyings = 79;
}

message Quote {
  message NoQuoteQualifiers {
    message FieldPresence {
      bool quote_qualifier = 1;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 quote_qualifier = 2;  // tag 695, name QuoteQualifier, type CHAR
  }

  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_px = 3;
      bool event_text = 4;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    double event_px = 4;  // tag 867, name EventPx, type PRICE
    string event_text = 5;  // tag 868, name EventText, type STRING
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_put_or_call = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_issue_date = 13;
      bool underlying_repo_collateral_security_type = 14;
      bool underlying_repurchase_term = 15;
      bool underlying_repurchase_rate = 16;
      bool underlying_factor = 17;
      bool underlying_credit_rating = 18;
      bool underlying_instr_registry = 19;
      bool underlying_country_of_issue = 20;
      bool underlying_state_or_province_of_issue = 21;
      bool underlying_locale_of_issue = 22;
      bool underlying_redemption_date = 23;
      bool underlying_strike_price = 24;
      bool underlying_strike_currency = 25;
      bool underlying_opt_attribute = 26;
      bool underlying_contract_multiplier = 27;
      bool underlying_coupon_rate = 28;
      bool underlying_security_exchange = 29;
      bool underlying_issuer = 30;
      bool encoded_underlying_issuer_len = 31;
      bool encoded_underlying_issuer = 32;
      bool underlying_security_desc = 33;
      bool encoded_underlying_security_desc_len = 34;
      bool encoded_underlying_security_desc = 35;
      bool underlying_cp_program = 36;
      bool underlying_cp_reg_type = 37;
      bool underlying_currency = 38;
      bool underlying_qty = 39;
      bool underlying_px = 40;
      bool underlying_dirty_price = 41;
      bool underlying_end_price = 42;
      bool underlying_start_value = 43;
      bool underlying_current_value = 44;
      bool underlying_end_value = 45;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
    string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
    double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
    repeated NoUnderlyingStips no_underlying_stips = 48;
  }

  message NoStipulations {
    message FieldPresence {
      bool stipulation_type = 1;
      bool stipulation_value = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string stipulation_type = 2;  // tag 233, name StipulationType, type STRING
    string stipulation_value = 3;  // tag 234, name StipulationValue, type STRING
  }

  message NoLegs {
    message NoLegSecurityAltId {
      message FieldPresence {
        bool leg_security_alt_id = 1;
        bool leg_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_security_alt_id = 2;  // tag 605, name LegSecurityAltID, type STRING
      string leg_security_alt_id_source = 3;  // tag 606, name LegSecurityAltIDSource, type STRING
    }

    message NoLegStipulations {
      message FieldPresence {
        bool leg_stipulation_type = 1;
        bool leg_stipulation_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string leg_stipulation_type = 2;  // tag 688, name LegStipulationType, type STRING
      string leg_stipulation_value = 3;  // tag 689, name LegStipulationValue, type STRING
    }

    message NoNestedPartyIds {
      message NoNestedPartySubIds {
        message FieldPresence {
          bool nested_party_sub_id = 1;
          bool nested_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
        int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
      }

      message FieldPresence {
        bool nested_party_id = 1;
        bool nested_party_id_source = 2;
        bool nested_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
      int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
      int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
    
  // GROUPS
      repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
    }

    message FieldPresence {
      bool leg_symbol = 1;
      bool leg_symbol_sfx = 2;
      bool leg_security_id = 3;
      bool leg_security_id_source = 4;
      bool leg_product = 5;
      bool leg_cfi_code = 6;
      bool leg_security_type = 7;
      bool leg_security_sub_type = 8;
      bool leg_maturity_month_year = 9;
      bool leg_maturity_date = 10;
      bool leg_coupon_payment_date = 11;
      bool leg_issue_date = 12;
      bool leg_repo_collateral_security_type = 13;
      bool leg_repurchase_term = 14;
      bool leg_repurchase_rate = 15;
      bool leg_factor = 16;
      bool leg_credit_rating = 17;
      bool leg_instr_registry = 18;
      bool leg_country_of_issue = 19;
      bool leg_state_or_province_of_issue = 20;
      bool leg_locale_of_issue = 21;
      bool leg_redemption_date = 22;
      bool leg_strike_price = 23;
      bool leg_strike_currency = 24;
      bool leg_opt_attribute = 25;
      bool leg_contract_multiplier = 26;
      bool leg_coupon_rate = 27;
      bool leg_security_exchange = 28;
      bool leg_issuer = 29;
      bool encoded_leg_issuer_len = 30;
      bool encoded_leg_issuer = 31;
      bool leg_security_desc = 32;
      bool encoded_leg_security_desc_len = 33;
      bool encoded_leg_security_desc = 34;
      bool leg_ratio_qty = 35;
      bool leg_side = 36;
      bool leg_currency = 37;
      bool leg_pool = 38;
      bool leg_dated_date = 39;
      bool leg_contract_settl_month = 40;
      bool leg_interest_accrual_date = 41;
      bool leg_qty = 42;
      bool leg_swap_type = 43;
      bool leg_settl_type = 44;
      bool leg_settl_date = 45;
      bool leg_price_type = 46;
      bool leg_bid_px = 47;
      bool leg_offer_px = 48;
      bool leg_benchmark_curve_currency = 49;
      bool leg_benchmark_curve_name = 50;
      bool leg_benchmark_curve_point = 51;
      bool leg_benchmark_price = 52;
      bool leg_benchmark_price_type = 53;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string leg_symbol = 2;  // tag 600, name LegSymbol, type STRING
    string leg_symbol_sfx = 3;  // tag 601, name LegSymbolSfx, type STRING
    string leg_security_id = 4;  // tag 602, name LegSecurityID, type STRING
    string leg_security_id_source = 5;  // tag 603, name LegSecurityIDSource, type STRING
    int32 leg_product = 6;  // tag 607, name LegProduct, type INT
    string leg_cfi_code = 7;  // tag 608, name LegCFICode, type STRING
    string leg_security_type = 8;  // tag 609, name LegSecurityType, type STRING
    string leg_security_sub_type = 9;  // tag 764, name LegSecuritySubType, type STRING
    string leg_maturity_month_year = 10;  // tag 610, name LegMaturityMonthYear, type MONTHYEAR
    string leg_maturity_date = 11;  // tag 611, name LegMaturityDate, type LOCALMKTDATE
    string leg_coupon_payment_date = 12;  // tag 248, name LegCouponPaymentDate, type LOCALMKTDATE
    string leg_issue_date = 13;  // tag 249, name LegIssueDate, type LOCALMKTDATE
    string leg_repo_collateral_security_type = 14;  // tag 250, name LegRepoCollateralSecurityType, type STRING
    int32 leg_repurchase_term = 15;  // tag 251, name LegRepurchaseTerm, type INT
    double leg_repurchase_rate = 16;  // tag 252, name LegRepurchaseRate, type PERCENTAGE
    double leg_factor = 17;  // tag 253, name LegFactor, type FLOAT
    string leg_credit_rating = 18;  // tag 257, name LegCreditRating, type STRING
    string leg_instr_registry = 19;  // tag 599, name LegInstrRegistry, type STRING
    string leg_country_of_issue = 20;  // tag 596, name LegCountryOfIssue, type COUNTRY
    string leg_state_or_province_of_issue = 21;  // tag 597, name LegStateOrProvinceOfIssue, type STRING
    string leg_locale_of_issue = 22;  // tag 598, name LegLocaleOfIssue, type STRING
    string leg_redemption_date = 23;  // tag 254, name LegRedemptionDate, type LOCALMKTDATE
    double leg_strike_price = 24;  // tag 612, name LegStrikePrice, type PRICE
    string leg_strike_currency = 25;  // tag 942, name LegStrikeCurrency, type CURRENCY
    int32 leg_opt_attribute = 26;  // tag 613, name LegOptAttribute, type CHAR
    double leg_contract_multiplier = 27;  // tag 614, name LegContractMultiplier, type FLOAT
    double leg_coupon_rate = 28;  // tag 615, name LegCouponRate, type PERCENTAGE
    string leg_security_exchange = 29;  // tag 616, name LegSecurityExchange, type EXCHANGE
    string leg_issuer = 30;  // tag 617, name LegIssuer, type STRING
    int32 encoded_leg_issuer_len = 31;  // tag 618, name EncodedLegIssuerLen, type LENGTH
    string encoded_leg_issuer = 32;  // tag 619, name EncodedLegIssuer, type DATA
    string leg_security_desc = 33;  // tag 620, name LegSecurityDesc, type STRING
    int32 encoded_leg_security_desc_len = 34;  // tag 621, name EncodedLegSecurityDescLen, type LENGTH
    string encoded_leg_security_desc = 35;  // tag 622, name EncodedLegSecurityDesc, type DATA
    double leg_ratio_qty = 36;  // tag 623, name LegRatioQty, type FLOAT
    int32 leg_side = 37;  // tag 624, name LegSide, type CHAR
    string leg_currency = 38;  // tag 556, name LegCurrency, type CURRENCY
    string leg_pool = 39;  // tag 740, name LegPool, type STRING
    string leg_dated_date = 40;  // tag 739, name LegDatedDate, type LOCALMKTDATE
    string leg_contract_settl_month = 41;  // tag 955, name LegContractSettlMonth, type MONTHYEAR
    string leg_interest_accrual_date = 42;  // tag 956, name LegInterestAccrualDate, type LOCALMKTDATE
    double leg_qty = 43;  // tag 687, name LegQty, type QTY
    int32 leg_swap_type = 44;  // tag 690, name LegSwapType, type INT
    int32 leg_settl_type = 45;  // tag 587, name LegSettlType, type CHAR
    string leg_settl_date = 46;  // tag 588, name LegSettlDate, type LOCALMKTDATE
    int32 leg_price_type = 47;  // tag 686, name LegPriceType, type INT
    double leg_bid_px = 48;  // tag 681, name LegBidPx, type PRICE
    double leg_offer_px = 49;  // tag 684, name LegOfferPx, type PRICE
    string leg_benchmark_curve_currency = 50;  // tag 676, name LegBenchmarkCurveCurrency, type CURRENCY
    string leg_benchmark_curve_name = 51;  // tag 677, name LegBenchmarkCurveName, type STRING
    string leg_benchmark_curve_point = 52;  // tag 678, name LegBenchmarkCurvePoint, type STRING
    double leg_benchmark_price = 53;  // tag 679, name LegBenchmarkPrice, type PRICE
    int32 leg_benchmark_price_type = 54;  // tag 680, name LegBenchmarkPriceType, type INT
  
  // GROUPS
    repeated NoLegSecurityAltId no_leg_security_alt_id = 55;
    repeated NoLegStipulations no_leg_stipulations = 56;
    repeated NoNestedPartyIds no_nested_party_ids = 57;
  }

  message FieldPresence {
    bool quote_req_id = 1;
    bool quote_id = 2;
    bool quote_resp_id = 3;
    bool quote_type = 4;
    bool quote_response_level = 5;
    bool trading_session_id = 6;
    bool trading_session_sub_id = 7;
    bool symbol = 8;
    bool symbol_sfx = 9;
    bool security_id = 10;
    bool security_id_source = 11;
    bool product = 12;
    bool cfi_code = 13;
    bool security_type = 14;
    bool security_sub_type = 15;
    bool maturity_month_year = 16;
    bool maturity_date = 17;
    bool put_or_call = 18;
    bool coupon_payment_date = 19;
    bool issue_date = 20;
    bool repo_collateral_security_type = 21;
    bool repurchase_term = 22;
    bool repurchase_rate = 23;
    bool factor = 24;
    bool credit_rating = 25;
    bool instr_registry = 26;
    bool country_of_issue = 27;
    bool state_or_province_of_issue = 28;
    bool locale_of_issue = 29;
    bool redemption_date = 30;
    bool strike_price = 31;
    bool strike_currency = 32;
    bool opt_attribute = 33;
    bool contract_multiplier = 34;
    bool coupon_rate = 35;
    bool security_exchange = 36;
    bool issuer = 37;
    bool encoded_issuer_len = 38;
    bool encoded_issuer = 39;
    bool security_desc = 40;
    bool encoded_security_desc_len = 41;
    bool encoded_security_desc = 42;
    bool pool = 43;
    bool contract_settl_month = 44;
    bool cp_program = 45;
    bool cp_reg_type = 46;
    bool dated_date = 47;
    bool interest_accrual_date = 48;
    bool agreement_desc = 49;
    bool agreement_id = 50;
    bool agreement_date = 51;
    bool agreement_currency = 52;
    bool termination_type = 53;
    bool start_date = 54;
    bool end_date = 55;
    bool delivery_type = 56;
    bool margin_ratio = 57;
    bool side = 58;
    bool order_qty = 59;
    bool cash_order_qty = 60;
    bool order_percent = 61;
    bool rounding_direction = 62;
    bool rounding_modulus = 63;
    bool settl_type = 64;
    bool settl_date = 65;
    bool settl_date2 = 66;
    bool order_qty2 = 67;
    bool currency = 68;
    bool account = 69;
    bool acct_id_source = 70;
    bool account_type = 71;
    bool bid_px = 72;
    bool offer_px = 73;
    bool mkt_bid_px = 74;
    bool mkt_offer_px = 75;
    bool min_bid_size = 76;
    bool bid_size = 77;
    bool min_offer_size = 78;
    bool offer_size = 79;
    bool valid_until_time = 80;
    bool bid_spot_rate = 81;
    bool offer_spot_rate = 82;
    bool bid_forward_points = 83;
    bool offer_forward_points = 84;
    bool mid_px = 85;
    bool bid_yield = 86;
    bool mid_yield = 87;
    bool offer_yield = 88;
    bool transact_time = 89;
    bool ord_type = 90;
    bool bid_forward_points2 = 91;
    bool offer_forward_points2 = 92;
    bool settl_curr_bid_fx_rate = 93;
    bool settl_curr_offer_fx_rate = 94;
    bool settl_curr_fx_rate_calc = 95;
    bool comm_type = 96;
    bool commission = 97;
    bool cust_order_capacity = 98;
    bool ex_destination = 99;
    bool order_capacity = 100;
    bool price_type = 101;
    bool spread = 102;
    bool benchmark_curve_currency = 103;
    bool benchmark_curve_name = 104;
    bool benchmark_curve_point = 105;
    bool benchmark_price = 106;
    bool benchmark_price_type = 107;
    bool benchmark_security_id = 108;
    bool benchmark_security_id_source = 109;
    bool yield_type = 110;
    bool yield = 111;
    bool yield_calc_date = 112;
    bool yield_redemption_date = 113;
    bool yield_redemption_price = 114;
    bool yield_redemption_price_type = 115;
    bool text = 116;
    bool encoded_text_len = 117;
    bool encoded_text = 118;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string quote_req_id = 5;  // tag 131, name QuoteReqID, type STRING
  string quote_id = 6;  // tag 117, name QuoteID, type STRING
  string quote_resp_id = 7;  // tag 693, name QuoteRespID, type STRING
  int32 quote_type = 8;  // tag 537, name QuoteType, type INT
  int32 quote_response_level = 9;  // tag 301, name QuoteResponseLevel, type INT
  string trading_session_id = 10;  // tag 336, name TradingSessionID, type STRING
  string trading_session_sub_id = 11;  // tag 625, name TradingSessionSubID, type STRING
  string symbol = 12;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 13;  // tag 65, name SymbolSfx, type STRING
  string security_id = 14;  // tag 48, name SecurityID, type STRING
  string security_id_source = 15;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 16;  // tag 460, name Product, type INT
  string cfi_code = 17;  // tag 461, name CFICode, type STRING
  string security_type = 18;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 19;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 20;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 21;  // tag 541, name MaturityDate, type LOCALMKTDATE
  int32 put_or_call = 22;  // tag 201, name PutOrCall, type INT
  string coupon_payment_date = 23;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string issue_date = 24;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 25;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 26;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 27;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 28;  // tag 228, name Factor, type FLOAT
  string credit_rating = 29;  // tag 255, name CreditRating, type STRING
  string instr_registry = 30;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 31;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 32;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 33;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 34;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 35;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 36;  // tag 947, name StrikeCurrency, type CURRENCY
  int32 opt_attribute = 37;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 38;  // tag 231, name ContractMultiplier, type FLOAT
  double coupon_rate = 39;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 40;  // tag 207, name SecurityExchange, type EXCHANGE
  string issuer = 41;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 42;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 43;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 44;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 45;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 46;  // tag 351, name EncodedSecurityDesc, type DATA
  string pool = 47;  // tag 691, name Pool, type STRING
  string contract_settl_month = 48;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 49;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 50;  // tag 876, name CPRegType, type STRING
  string dated_date = 51;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 52;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 53;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 54;  // tag 914, name AgreementID, type STRING
  string agreement_date = 55;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 56;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 57;  // tag 788, name TerminationType, type INT
  string start_date = 58;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 59;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 60;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 61;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 62;  // tag 54, name Side, type CHAR
  double order_qty = 63;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 64;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 65;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 66;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 67;  // tag 469, name RoundingModulus, type FLOAT
  int32 settl_type = 68;  // tag 63, name SettlType, type CHAR
  string settl_date = 69;  // tag 64, name SettlDate, type LOCALMKTDATE
  string settl_date2 = 70;  // tag 193, name SettlDate2, type LOCALMKTDATE
  double order_qty2 = 71;  // tag 192, name OrderQty2, type QTY
  string currency = 72;  // tag 15, name Currency, type CURRENCY
  string account = 73;  // tag 1, name Account, type STRING
  int32 acct_id_source = 74;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 75;  // tag 581, name AccountType, type INT
  double bid_px = 76;  // tag 132, name BidPx, type PRICE
  double offer_px = 77;  // tag 133, name OfferPx, type PRICE
  double mkt_bid_px = 78;  // tag 645, name MktBidPx, type PRICE
  double mkt_offer_px = 79;  // tag 646, name MktOfferPx, type PRICE
  double min_bid_size = 80;  // tag 647, name MinBidSize, type QTY
  double bid_size = 81;  // tag 134, name BidSize, type QTY
  double min_offer_size = 82;  // tag 648, name MinOfferSize, type QTY
  double offer_size = 83;  // tag 135, name OfferSize, type QTY
  uint64 valid_until_time = 84;  // tag 62, name ValidUntilTime, type UTCTIMESTAMP
  double bid_spot_rate = 85;  // tag 188, name BidSpotRate, type PRICE
  double offer_spot_rate = 86;  // tag 190, name OfferSpotRate, type PRICE
  double bid_forward_points = 87;  // tag 189, name BidForwardPoints, type PRICEOFFSET
  double offer_forward_points = 88;  // tag 191, name OfferForwardPoints, type PRICEOFFSET
  double mid_px = 89;  // tag 631, name MidPx, type PRICE
  double bid_yield = 90;  // tag 632, name BidYield, type PERCENTAGE
  double mid_yield = 91;  // tag 633, name MidYield, type PERCENTAGE
  double offer_yield = 92;  // tag 634, name OfferYield, type PERCENTAGE
  uint64 transact_time = 93;  // tag 60, name TransactTime, type UTCTIMESTAMP
  int32 ord_type = 94;  // tag 40, name OrdType, type CHAR
  double bid_forward_points2 = 95;  // tag 642, name BidForwardPoints2, type PRICEOFFSET
  double offer_forward_points2 = 96;  // tag 643, name OfferForwardPoints2, type PRICEOFFSET
  double settl_curr_bid_fx_rate = 97;  // tag 656, name SettlCurrBidFxRate, type FLOAT
  double settl_curr_offer_fx_rate = 98;  // tag 657, name SettlCurrOfferFxRate, type FLOAT
  int32 settl_curr_fx_rate_calc = 99;  // tag 156, name SettlCurrFxRateCalc, type CHAR
  int32 comm_type = 100;  // tag 13, name CommType, type CHAR
  double commission = 101;  // tag 12, name Commission, type AMT
  int32 cust_order_capacity = 102;  // tag 582, name CustOrderCapacity, type INT
  string ex_destination = 103;  // tag 100, name ExDestination, type EXCHANGE
  int32 order_capacity = 104;  // tag 528, name OrderCapacity, type CHAR
  int32 price_type = 105;  // tag 423, name PriceType, type INT
  double spread = 106;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 107;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 108;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 109;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 110;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 111;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 112;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 113;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 114;  // tag 235, name YieldType, type STRING
  double yield = 115;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 116;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 117;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 118;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 119;  // tag 698, name YieldRedemptionPriceType, type INT
  string text = 120;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 121;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 122;  // tag 355, name EncodedText, type DATA

  // GROUPS
  repeated NoQuoteQualifiers no_quote_qualifiers = 123;
  repeated NoPartyIds no_party_ids = 124;
  repeated NoSecurityAltId no_security_alt_id = 125;
  repeated NoEvents no_events = 126;
  repeated NoUnderlyings no_underlyings = 127;
  repeated NoStipulations no_stipulations = 128;
  repeated NoLegs no_legs = 129;
}

message OrderCancelReplaceRequest {
  message NoPartyIds {
    message NoPartySubIds {
      message FieldPresence {
        bool party_sub_id = 1;
        bool party_sub_id_type = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string party_sub_id = 2;  // tag 523, name PartySubID, type STRING
      int32 party_sub_id_type = 3;  // tag 803, name PartySubIDType, type INT
    }

    message FieldPresence {
      bool party_id = 1;
      bool party_id_source = 2;
      bool party_role = 3;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string party_id = 2;  // tag 448, name PartyID, type STRING
    int32 party_id_source = 3;  // tag 447, name PartyIDSource, type CHAR
    int32 party_role = 4;  // tag 452, name PartyRole, type INT
  
  // GROUPS
    repeated NoPartySubIds no_party_sub_ids = 5;
  }

  message NoAllocs {
    message NoNestedPartyIds {
      message NoNestedPartySubIds {
        message FieldPresence {
          bool nested_party_sub_id = 1;
          bool nested_party_sub_id_type = 2;
        }

        // FIELDS
        FieldPresence field_presence = 1;
        string nested_party_sub_id = 2;  // tag 545, name NestedPartySubID, type STRING
        int32 nested_party_sub_id_type = 3;  // tag 805, name NestedPartySubIDType, type INT
      }

      message FieldPresence {
        bool nested_party_id = 1;
        bool nested_party_id_source = 2;
        bool nested_party_role = 3;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string nested_party_id = 2;  // tag 524, name NestedPartyID, type STRING
      int32 nested_party_id_source = 3;  // tag 525, name NestedPartyIDSource, type CHAR
      int32 nested_party_role = 4;  // tag 538, name NestedPartyRole, type INT
    
  // GROUPS
      repeated NoNestedPartySubIds no_nested_party_sub_ids = 5;
    }

    message FieldPresence {
      bool alloc_account = 1;
      bool alloc_acct_id_source = 2;
      bool alloc_settl_currency = 3;
      bool individual_alloc_id = 4;
      bool alloc_qty = 5;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string alloc_account = 2;  // tag 79, name AllocAccount, type STRING
    int32 alloc_acct_id_source = 3;  // tag 661, name AllocAcctIDSource, type INT
    string alloc_settl_currency = 4;  // tag 736, name AllocSettlCurrency, type CURRENCY
    string individual_alloc_id = 5;  // tag 467, name IndividualAllocID, type STRING
    double alloc_qty = 6;  // tag 80, name AllocQty, type QTY
  
  // GROUPS
    repeated NoNestedPartyIds no_nested_party_ids = 7;
  }

  message NoTradingSessions {
    message FieldPresence {
      bool trading_session_id = 1;
      bool trading_session_sub_id = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string trading_session_id = 2;  // tag 336, name TradingSessionID, type STRING
    string trading_session_sub_id = 3;  // tag 625, name TradingSessionSubID, type STRING
  }

  message NoSecurityAltId {
    message FieldPresence {
      bool security_alt_id = 1;
      bool security_alt_id_source = 2;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string security_alt_id = 2;  // tag 455, name SecurityAltID, type STRING
    string security_alt_id_source = 3;  // tag 456, name SecurityAltIDSource, type STRING
  }

  message NoEvents {
    message FieldPresence {
      bool event_type = 1;
      bool event_date = 2;
      bool event_px = 3;
      bool event_text = 4;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    int32 event_type = 2;  // tag 865, name EventType, type INT
    string event_date = 3;  // tag 866, name EventDate, type LOCALMKTDATE
    double event_px = 4;  // tag 867, name EventPx, type PRICE
    string event_text = 5;  // tag 868, name EventText, type STRING
  }

  message NoUnderlyings {
    message NoUnderlyingSecurityAltId {
      message FieldPresence {
        bool underlying_security_alt_id = 1;
        bool underlying_security_alt_id_source = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_security_alt_id = 2;  // tag 458, name UnderlyingSecurityAltID, type STRING
      string underlying_security_alt_id_source = 3;  // tag 459, name UnderlyingSecurityAltIDSource, type STRING
    }

    message NoUnderlyingStips {
      message FieldPresence {
        bool underlying_stip_type = 1;
        bool underlying_stip_value = 2;
      }

      // FIELDS
      FieldPresence field_presence = 1;
      string underlying_stip_type = 2;  // tag 888, name UnderlyingStipType, type STRING
      string underlying_stip_value = 3;  // tag 889, name UnderlyingStipValue, type STRING
    }

    message FieldPresence {
      bool underlying_symbol = 1;
      bool underlying_symbol_sfx = 2;
      bool underlying_security_id = 3;
      bool underlying_security_id_source = 4;
      bool underlying_product = 5;
      bool underlying_cfi_code = 6;
      bool underlying_security_type = 7;
      bool underlying_security_sub_type = 8;
      bool underlying_maturity_month_year = 9;
      bool underlying_maturity_date = 10;
      bool underlying_put_or_call = 11;
      bool underlying_coupon_payment_date = 12;
      bool underlying_issue_date = 13;
      bool underlying_repo_collateral_security_type = 14;
      bool underlying_repurchase_term = 15;
      bool underlying_repurchase_rate = 16;
      bool underlying_factor = 17;
      bool underlying_credit_rating = 18;
      bool underlying_instr_registry = 19;
      bool underlying_country_of_issue = 20;
      bool underlying_state_or_province_of_issue = 21;
      bool underlying_locale_of_issue = 22;
      bool underlying_redemption_date = 23;
      bool underlying_strike_price = 24;
      bool underlying_strike_currency = 25;
      bool underlying_opt_attribute = 26;
      bool underlying_contract_multiplier = 27;
      bool underlying_coupon_rate = 28;
      bool underlying_security_exchange = 29;
      bool underlying_issuer = 30;
      bool encoded_underlying_issuer_len = 31;
      bool encoded_underlying_issuer = 32;
      bool underlying_security_desc = 33;
      bool encoded_underlying_security_desc_len = 34;
      bool encoded_underlying_security_desc = 35;
      bool underlying_cp_program = 36;
      bool underlying_cp_reg_type = 37;
      bool underlying_currency = 38;
      bool underlying_qty = 39;
      bool underlying_px = 40;
      bool underlying_dirty_price = 41;
      bool underlying_end_price = 42;
      bool underlying_start_value = 43;
      bool underlying_current_value = 44;
      bool underlying_end_value = 45;
    }

    // FIELDS
    FieldPresence field_presence = 1;
    string underlying_symbol = 2;  // tag 311, name UnderlyingSymbol, type STRING
    string underlying_symbol_sfx = 3;  // tag 312, name UnderlyingSymbolSfx, type STRING
    string underlying_security_id = 4;  // tag 309, name UnderlyingSecurityID, type STRING
    string underlying_security_id_source = 5;  // tag 305, name UnderlyingSecurityIDSource, type STRING
    int32 underlying_product = 6;  // tag 462, name UnderlyingProduct, type INT
    string underlying_cfi_code = 7;  // tag 463, name UnderlyingCFICode, type STRING
    string underlying_security_type = 8;  // tag 310, name UnderlyingSecurityType, type STRING
    string underlying_security_sub_type = 9;  // tag 763, name UnderlyingSecuritySubType, type STRING
    string underlying_maturity_month_year = 10;  // tag 313, name UnderlyingMaturityMonthYear, type MONTHYEAR
    string underlying_maturity_date = 11;  // tag 542, name UnderlyingMaturityDate, type LOCALMKTDATE
    int32 underlying_put_or_call = 12;  // tag 315, name UnderlyingPutOrCall, type INT
    string underlying_coupon_payment_date = 13;  // tag 241, name UnderlyingCouponPaymentDate, type LOCALMKTDATE
    string underlying_issue_date = 14;  // tag 242, name UnderlyingIssueDate, type LOCALMKTDATE
    string underlying_repo_collateral_security_type = 15;  // tag 243, name UnderlyingRepoCollateralSecurityType, type STRING
    int32 underlying_repurchase_term = 16;  // tag 244, name UnderlyingRepurchaseTerm, type INT
    double underlying_repurchase_rate = 17;  // tag 245, name UnderlyingRepurchaseRate, type PERCENTAGE
    double underlying_factor = 18;  // tag 246, name UnderlyingFactor, type FLOAT
    string underlying_credit_rating = 19;  // tag 256, name UnderlyingCreditRating, type STRING
    string underlying_instr_registry = 20;  // tag 595, name UnderlyingInstrRegistry, type STRING
    string underlying_country_of_issue = 21;  // tag 592, name UnderlyingCountryOfIssue, type COUNTRY
    string underlying_state_or_province_of_issue = 22;  // tag 593, name UnderlyingStateOrProvinceOfIssue, type STRING
    string underlying_locale_of_issue = 23;  // tag 594, name UnderlyingLocaleOfIssue, type STRING
    string underlying_redemption_date = 24;  // tag 247, name UnderlyingRedemptionDate, type LOCALMKTDATE
    double underlying_strike_price = 25;  // tag 316, name UnderlyingStrikePrice, type PRICE
    string underlying_strike_currency = 26;  // tag 941, name UnderlyingStrikeCurrency, type CURRENCY
    int32 underlying_opt_attribute = 27;  // tag 317, name UnderlyingOptAttribute, type CHAR
    double underlying_contract_multiplier = 28;  // tag 436, name UnderlyingContractMultiplier, type FLOAT
    double underlying_coupon_rate = 29;  // tag 435, name UnderlyingCouponRate, type PERCENTAGE
    string underlying_security_exchange = 30;  // tag 308, name UnderlyingSecurityExchange, type EXCHANGE
    string underlying_issuer = 31;  // tag 306, name UnderlyingIssuer, type STRING
    int32 encoded_underlying_issuer_len = 32;  // tag 362, name EncodedUnderlyingIssuerLen, type LENGTH
    string encoded_underlying_issuer = 33;  // tag 363, name EncodedUnderlyingIssuer, type DATA
    string underlying_security_desc = 34;  // tag 307, name UnderlyingSecurityDesc, type STRING
    int32 encoded_underlying_security_desc_len = 35;  // tag 364, name EncodedUnderlyingSecurityDescLen, type LENGTH
    string encoded_underlying_security_desc = 36;  // tag 365, name EncodedUnderlyingSecurityDesc, type DATA
    string underlying_cp_program = 37;  // tag 877, name UnderlyingCPProgram, type STRING
    string underlying_cp_reg_type = 38;  // tag 878, name UnderlyingCPRegType, type STRING
    string underlying_currency = 39;  // tag 318, name UnderlyingCurrency, type CURRENCY
    double underlying_qty = 40;  // tag 879, name UnderlyingQty, type QTY
    double underlying_px = 41;  // tag 810, name UnderlyingPx, type PRICE
    double underlying_dirty_price = 42;  // tag 882, name UnderlyingDirtyPrice, type PRICE
    double underlying_end_price = 43;  // tag 883, name UnderlyingEndPrice, type PRICE
    double underlying_start_value = 44;  // tag 884, name UnderlyingStartValue, type AMT
    double underlying_current_value = 45;  // tag 885, name UnderlyingCurrentValue, type AMT
    double underlying_end_value = 46;  // tag 886, name UnderlyingEndValue, type AMT
  
  // GROUPS
    repeated NoUnderlyingSecurityAltId no_underlying_security_alt_id = 47;
    repeated NoUnderlyingStips no_underlying_stips = 48;
  }

  message FieldPresence {
    bool order_id = 1;
    bool trade_origination_date = 2;
    bool trade_date = 3;
    bool orig_cl_ord_id = 4;
    bool cl_ord_id = 5;
    bool secondary_cl_ord_id = 6;
    bool cl_ord_link_id = 7;
    bool list_id = 8;
    bool orig_ord_mod_time = 9;
    bool account = 10;
    bool acct_id_source = 11;
    bool account_type = 12;
    bool day_booking_inst = 13;
    bool booking_unit = 14;
    bool prealloc_method = 15;
    bool alloc_id = 16;
    bool settl_type = 17;
    bool settl_date = 18;
    bool cash_margin = 19;
    bool clearing_fee_indicator = 20;
    bool handl_inst = 21;
    bool exec_inst = 22;
    bool min_qty = 23;
    bool max_floor = 24;
    bool ex_destination = 25;
    bool symbol = 26;
    bool symbol_sfx = 27;
    bool security_id = 28;
    bool security_id_source = 29;
    bool product = 30;
    bool cfi_code = 31;
    bool security_type = 32;
    bool security_sub_type = 33;
    bool maturity_month_year = 34;
    bool maturity_date = 35;
    bool put_or_call = 36;
    bool coupon_payment_date = 37;
    bool issue_date = 38;
    bool repo_collateral_security_type = 39;
    bool repurchase_term = 40;
    bool repurchase_rate = 41;
    bool factor = 42;
    bool credit_rating = 43;
    bool instr_registry = 44;
    bool country_of_issue = 45;
    bool state_or_province_of_issue = 46;
    bool locale_of_issue = 47;
    bool redemption_date = 48;
    bool strike_price = 49;
    bool strike_currency = 50;
    bool opt_attribute = 51;
    bool contract_multiplier = 52;
    bool coupon_rate = 53;
    bool security_exchange = 54;
    bool issuer = 55;
    bool encoded_issuer_len = 56;
    bool encoded_issuer = 57;
    bool security_desc = 58;
    bool encoded_security_desc_len = 59;
    bool encoded_security_desc = 60;
    bool pool = 61;
    bool contract_settl_month = 62;
    bool cp_program = 63;
    bool cp_reg_type = 64;
    bool dated_date = 65;
    bool interest_accrual_date = 66;
    bool agreement_desc = 67;
    bool agreement_id = 68;
    bool agreement_date = 69;
    bool agreement_currency = 70;
    bool termination_type = 71;
    bool start_date = 72;
    bool end_date = 73;
    bool delivery_type = 74;
    bool margin_ratio = 75;
    bool side = 76;
    bool transact_time = 77;
    bool qty_type = 78;
    bool order_qty = 79;
    bool cash_order_qty = 80;
    bool order_percent = 81;
    bool rounding_direction = 82;
    bool rounding_modulus = 83;
    bool ord_type = 84;
    bool price_type = 85;
    bool price = 86;
    bool stop_px = 87;
    bool spread = 88;
    bool benchmark_curve_currency = 89;
    bool benchmark_curve_name = 90;
    bool benchmark_curve_point = 91;
    bool benchmark_price = 92;
    bool benchmark_price_type = 93;
    bool benchmark_security_id = 94;
    bool benchmark_security_id_source = 95;
    bool yield_type = 96;
    bool yield = 97;
    bool yield_calc_date = 98;
    bool yield_redemption_date = 99;
    bool yield_redemption_price = 100;
    bool yield_redemption_price_type = 101;
    bool peg_offset_value = 102;
    bool peg_move_type = 103;
    bool peg_offset_type = 104;
    bool peg_limit_type = 105;
    bool peg_round_direction = 106;
    bool peg_scope = 107;
    bool discretion_inst = 108;
    bool discretion_offset_value = 109;
    bool discretion_move_type = 110;
    bool discretion_offset_type = 111;
    bool discretion_limit_type = 112;
    bool discretion_round_direction = 113;
    bool discretion_scope = 114;
    bool target_strategy = 115;
    bool target_strategy_parameters = 116;
    bool participation_rate = 117;
    bool compliance_id = 118;
    bool solicited_flag = 119;
    bool currency = 120;
    bool time_in_force = 121;
    bool effective_time = 122;
    bool expire_date = 123;
    bool expire_time = 124;
    bool gt_booking_inst = 125;
    bool commission = 126;
    bool comm_type = 127;
    bool comm_currency = 128;
    bool fund_renew_waiv = 129;
    bool order_capacity = 130;
    bool order_restrictions = 131;
    bool cust_order_capacity = 132;
    bool forex_req = 133;
    bool settl_currency = 134;
    bool booking_type = 135;
    bool text = 136;
    bool encoded_text_len = 137;
    bool encoded_text = 138;
    bool settl_date2 = 139;
    bool order_qty2 = 140;
    bool price2 = 141;
    bool position_effect = 142;
    bool covered_or_uncovered = 143;
    bool max_show = 144;
    bool locate_reqd = 145;
    bool cancellation_rights = 146;
    bool money_laundering_status = 147;
    bool regist_id = 148;
    bool designation = 149;
  }

  // HEADER
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Header header = 3;

  // FIELDS
  FieldPresence field_presence = 4;
  string order_id = 5;  // tag 37, name OrderID, type STRING
  string trade_origination_date = 6;  // tag 229, name TradeOriginationDate, type LOCALMKTDATE
  string trade_date = 7;  // tag 75, name TradeDate, type LOCALMKTDATE
  string orig_cl_ord_id = 8;  // tag 41, name OrigClOrdID, type STRING
  string cl_ord_id = 9;  // tag 11, name ClOrdID, type STRING
  string secondary_cl_ord_id = 10;  // tag 526, name SecondaryClOrdID, type STRING
  string cl_ord_link_id = 11;  // tag 583, name ClOrdLinkID, type STRING
  string list_id = 12;  // tag 66, name ListID, type STRING
  uint64 orig_ord_mod_time = 13;  // tag 586, name OrigOrdModTime, type UTCTIMESTAMP
  string account = 14;  // tag 1, name Account, type STRING
  int32 acct_id_source = 15;  // tag 660, name AcctIDSource, type INT
  int32 account_type = 16;  // tag 581, name AccountType, type INT
  int32 day_booking_inst = 17;  // tag 589, name DayBookingInst, type CHAR
  int32 booking_unit = 18;  // tag 590, name BookingUnit, type CHAR
  int32 prealloc_method = 19;  // tag 591, name PreallocMethod, type CHAR
  string alloc_id = 20;  // tag 70, name AllocID, type STRING
  int32 settl_type = 21;  // tag 63, name SettlType, type CHAR
  string settl_date = 22;  // tag 64, name SettlDate, type LOCALMKTDATE
  int32 cash_margin = 23;  // tag 544, name CashMargin, type CHAR
  string clearing_fee_indicator = 24;  // tag 635, name ClearingFeeIndicator, type STRING
  int32 handl_inst = 25;  // tag 21, name HandlInst, type CHAR
  string exec_inst = 26;  // tag 18, name ExecInst, type MULTIPLEVALUESTRING
  double min_qty = 27;  // tag 110, name MinQty, type QTY
  double max_floor = 28;  // tag 111, name MaxFloor, type QTY
  string ex_destination = 29;  // tag 100, name ExDestination, type EXCHANGE
  string symbol = 30;  // tag 55, name Symbol, type STRING
  string symbol_sfx = 31;  // tag 65, name SymbolSfx, type STRING
  string security_id = 32;  // tag 48, name SecurityID, type STRING
  string security_id_source = 33;  // tag 22, name SecurityIDSource, type STRING
  int32 product = 34;  // tag 460, name Product, type INT
  string cfi_code = 35;  // tag 461, name CFICode, type STRING
  string security_type = 36;  // tag 167, name SecurityType, type STRING
  string security_sub_type = 37;  // tag 762, name SecuritySubType, type STRING
  string maturity_month_year = 38;  // tag 200, name MaturityMonthYear, type MONTHYEAR
  string maturity_date = 39;  // tag 541, name MaturityDate, type LOCALMKTDATE
  int32 put_or_call = 40;  // tag 201, name PutOrCall, type INT
  string coupon_payment_date = 41;  // tag 224, name CouponPaymentDate, type LOCALMKTDATE
  string issue_date = 42;  // tag 225, name IssueDate, type LOCALMKTDATE
  string repo_collateral_security_type = 43;  // tag 239, name RepoCollateralSecurityType, type STRING
  int32 repurchase_term = 44;  // tag 226, name RepurchaseTerm, type INT
  double repurchase_rate = 45;  // tag 227, name RepurchaseRate, type PERCENTAGE
  double factor = 46;  // tag 228, name Factor, type FLOAT
  string credit_rating = 47;  // tag 255, name CreditRating, type STRING
  string instr_registry = 48;  // tag 543, name InstrRegistry, type STRING
  string country_of_issue = 49;  // tag 470, name CountryOfIssue, type COUNTRY
  string state_or_province_of_issue = 50;  // tag 471, name StateOrProvinceOfIssue, type STRING
  string locale_of_issue = 51;  // tag 472, name LocaleOfIssue, type STRING
  string redemption_date = 52;  // tag 240, name RedemptionDate, type LOCALMKTDATE
  double strike_price = 53;  // tag 202, name StrikePrice, type PRICE
  string strike_currency = 54;  // tag 947, name StrikeCurrency, type CURRENCY
  int32 opt_attribute = 55;  // tag 206, name OptAttribute, type CHAR
  double contract_multiplier = 56;  // tag 231, name ContractMultiplier, type FLOAT
  double coupon_rate = 57;  // tag 223, name CouponRate, type PERCENTAGE
  string security_exchange = 58;  // tag 207, name SecurityExchange, type EXCHANGE
  string issuer = 59;  // tag 106, name Issuer, type STRING
  int32 encoded_issuer_len = 60;  // tag 348, name EncodedIssuerLen, type LENGTH
  string encoded_issuer = 61;  // tag 349, name EncodedIssuer, type DATA
  string security_desc = 62;  // tag 107, name SecurityDesc, type STRING
  int32 encoded_security_desc_len = 63;  // tag 350, name EncodedSecurityDescLen, type LENGTH
  string encoded_security_desc = 64;  // tag 351, name EncodedSecurityDesc, type DATA
  string pool = 65;  // tag 691, name Pool, type STRING
  string contract_settl_month = 66;  // tag 667, name ContractSettlMonth, type MONTHYEAR
  int32 cp_program = 67;  // tag 875, name CPProgram, type INT
  string cp_reg_type = 68;  // tag 876, name CPRegType, type STRING
  string dated_date = 69;  // tag 873, name DatedDate, type LOCALMKTDATE
  string interest_accrual_date = 70;  // tag 874, name InterestAccrualDate, type LOCALMKTDATE
  string agreement_desc = 71;  // tag 913, name AgreementDesc, type STRING
  string agreement_id = 72;  // tag 914, name AgreementID, type STRING
  string agreement_date = 73;  // tag 915, name AgreementDate, type LOCALMKTDATE
  string agreement_currency = 74;  // tag 918, name AgreementCurrency, type CURRENCY
  int32 termination_type = 75;  // tag 788, name TerminationType, type INT
  string start_date = 76;  // tag 916, name StartDate, type LOCALMKTDATE
  string end_date = 77;  // tag 917, name EndDate, type LOCALMKTDATE
  int32 delivery_type = 78;  // tag 919, name DeliveryType, type INT
  double margin_ratio = 79;  // tag 898, name MarginRatio, type PERCENTAGE
  int32 side = 80;  // tag 54, name Side, type CHAR
  uint64 transact_time = 81;  // tag 60, name TransactTime, type UTCTIMESTAMP
  int32 qty_type = 82;  // tag 854, name QtyType, type INT
  double order_qty = 83;  // tag 38, name OrderQty, type QTY
  double cash_order_qty = 84;  // tag 152, name CashOrderQty, type QTY
  double order_percent = 85;  // tag 516, name OrderPercent, type PERCENTAGE
  int32 rounding_direction = 86;  // tag 468, name RoundingDirection, type CHAR
  double rounding_modulus = 87;  // tag 469, name RoundingModulus, type FLOAT
  int32 ord_type = 88;  // tag 40, name OrdType, type CHAR
  int32 price_type = 89;  // tag 423, name PriceType, type INT
  double price = 90;  // tag 44, name Price, type PRICE
  double stop_px = 91;  // tag 99, name StopPx, type PRICE
  double spread = 92;  // tag 218, name Spread, type PRICEOFFSET
  string benchmark_curve_currency = 93;  // tag 220, name BenchmarkCurveCurrency, type CURRENCY
  string benchmark_curve_name = 94;  // tag 221, name BenchmarkCurveName, type STRING
  string benchmark_curve_point = 95;  // tag 222, name BenchmarkCurvePoint, type STRING
  double benchmark_price = 96;  // tag 662, name BenchmarkPrice, type PRICE
  int32 benchmark_price_type = 97;  // tag 663, name BenchmarkPriceType, type INT
  string benchmark_security_id = 98;  // tag 699, name BenchmarkSecurityID, type STRING
  string benchmark_security_id_source = 99;  // tag 761, name BenchmarkSecurityIDSource, type STRING
  string yield_type = 100;  // tag 235, name YieldType, type STRING
  double yield = 101;  // tag 236, name Yield, type PERCENTAGE
  string yield_calc_date = 102;  // tag 701, name YieldCalcDate, type LOCALMKTDATE
  string yield_redemption_date = 103;  // tag 696, name YieldRedemptionDate, type LOCALMKTDATE
  double yield_redemption_price = 104;  // tag 697, name YieldRedemptionPrice, type PRICE
  int32 yield_redemption_price_type = 105;  // tag 698, name YieldRedemptionPriceType, type INT
  double peg_offset_value = 106;  // tag 211, name PegOffsetValue, type FLOAT
  int32 peg_move_type = 107;  // tag 835, name PegMoveType, type INT
  int32 peg_offset_type = 108;  // tag 836, name PegOffsetType, type INT
  int32 peg_limit_type = 109;  // tag 837, name PegLimitType, type INT
  int32 peg_round_direction = 110;  // tag 838, name PegRoundDirection, type INT
  int32 peg_scope = 111;  // tag 840, name PegScope, type INT
  int32 discretion_inst = 112;  // tag 388, name DiscretionInst, type CHAR
  double discretion_offset_value = 113;  // tag 389, name DiscretionOffsetValue, type FLOAT
  int32 discretion_move_type = 114;  // tag 841, name DiscretionMoveType, type INT
  int32 discretion_offset_type = 115;  // tag 842, name DiscretionOffsetType, type INT
  int32 discretion_limit_type = 116;  // tag 843, name DiscretionLimitType, type INT
  int32 discretion_round_direction = 117;  // tag 844, name DiscretionRoundDirection, type INT
  int32 discretion_scope = 118;  // tag 846, name DiscretionScope, type INT
  int32 target_strategy = 119;  // tag 847, name TargetStrategy, type INT
  string target_strategy_parameters = 120;  // tag 848, name TargetStrategyParameters, type STRING
  double participation_rate = 121;  // tag 849, name ParticipationRate, type PERCENTAGE
  string compliance_id = 122;  // tag 376, name ComplianceID, type STRING
  bool solicited_flag = 123;  // tag 377, name SolicitedFlag, type BOOLEAN
  string currency = 124;  // tag 15, name Currency, type CURRENCY
  int32 time_in_force = 125;  // tag 59, name TimeInForce, type CHAR
  uint64 effective_time = 126;  // tag 168, name EffectiveTime, type UTCTIMESTAMP
  string expire_date = 127;  // tag 432, name ExpireDate, type LOCALMKTDATE
  uint64 expire_time = 128;  // tag 126, name ExpireTime, type UTCTIMESTAMP
  int32 gt_booking_inst = 129;  // tag 427, name GTBookingInst, type INT
  double commission = 130;  // tag 12, name Commission, type AMT
  int32 comm_type = 131;  // tag 13, name CommType, type CHAR
  string comm_currency = 132;  // tag 479, name CommCurrency, type CURRENCY
  int32 fund_renew_waiv = 133;  // tag 497, name FundRenewWaiv, type CHAR
  int32 order_capacity = 134;  // tag 528, name OrderCapacity, type CHAR
  string order_restrictions = 135;  // tag 529, name OrderRestrictions, type MULTIPLEVALUESTRING
  int32 cust_order_capacity = 136;  // tag 582, name CustOrderCapacity, type INT
  bool forex_req = 137;  // tag 121, name ForexReq, type BOOLEAN
  string settl_currency = 138;  // tag 120, name SettlCurrency, type CURRENCY
  int32 booking_type = 139;  // tag 775, name BookingType, type INT
  string text = 140;  // tag 58, name Text, type STRING
  int32 encoded_text_len = 141;  // tag 354, name EncodedTextLen, type LENGTH
  string encoded_text = 142;  // tag 355, name EncodedText, type DATA
  string settl_date2 = 143;  // tag 193, name SettlDate2, type LOCALMKTDATE
  double order_qty2 = 144;  // tag 192, name OrderQty2, type QTY
  double price2 = 145;  // tag 640, name Price2, type PRICE
  int32 position_effect = 146;  // tag 77, name PositionEffect, type CHAR
  int32 covered_or_uncovered = 147;  // tag 203, name CoveredOrUncovered, type INT
  double max_show = 148;  // tag 210, name MaxShow, type QTY
  bool locate_reqd = 149;  // tag 114, name LocateReqd, type BOOLEAN
  int32 cancellation_rights = 150;  // tag 480, name CancellationRights, type CHAR
  int32 money_laundering_status = 151;  // tag 481, name MoneyLaunderingStatus, type CHAR
  string regist_id = 152;  // tag 513, name RegistID, type STRING
  string designation = 153;  // tag 494, name Designation, type STRING

  // GROUPS
  repeated NoPartyIds no_party_ids = 154;
  repeated NoAllocs no_allocs = 155;
  repeated NoTradingSessions no_trading_sessions = 156;
  repeated NoSecurityAltId no_security_alt_id = 157;
  repeated NoEvents no_events = 158;
  repeated NoUnderlyings no_underlyings = 159;
}

